
LiquidMenuInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  00004936  000049ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007f2  0080026e  0080026e  00004a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b50  00000000  00000000  00004aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019985  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004701  00000000  00000000  0001ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c8b  00000000  00000000  0002367e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000232c  00000000  00000000  0002a30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006735  00000000  00000000  0002c638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cba2  00000000  00000000  00032d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  0003f90f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b1 c1       	rjmp	.+866    	; 0x364 <__dtors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c1       	rjmp	.+956    	; 0x3c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_3>
      10:	da c1       	rjmp	.+948    	; 0x3c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_5>
      18:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_6>
      1c:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_7>
      20:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_8>
      24:	d0 c1       	rjmp	.+928    	; 0x3c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c1       	rjmp	.+924    	; 0x3c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c1       	rjmp	.+920    	; 0x3c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c1       	rjmp	.+916    	; 0x3c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c1       	rjmp	.+912    	; 0x3c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c1       	rjmp	.+908    	; 0x3c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c1       	rjmp	.+904    	; 0x3c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c1       	rjmp	.+900    	; 0x3c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c1       	rjmp	.+896    	; 0x3c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c1       	rjmp	.+892    	; 0x3c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c1       	rjmp	.+888    	; 0x3c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c1       	rjmp	.+884    	; 0x3c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c1       	rjmp	.+880    	; 0x3c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c1       	rjmp	.+876    	; 0x3c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__vector_23>
      60:	b2 c1       	rjmp	.+868    	; 0x3c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c1       	rjmp	.+864    	; 0x3c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c1       	rjmp	.+860    	; 0x3c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c1       	rjmp	.+856    	; 0x3c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c1       	rjmp	.+852    	; 0x3c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c1       	rjmp	.+848    	; 0x3c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c1       	rjmp	.+844    	; 0x3c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c1       	rjmp	.+840    	; 0x3c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c1       	rjmp	.+836    	; 0x3c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c1       	rjmp	.+832    	; 0x3c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c1       	rjmp	.+828    	; 0x3c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c1       	rjmp	.+824    	; 0x3c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c1       	rjmp	.+820    	; 0x3c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c1       	rjmp	.+816    	; 0x3c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c1       	rjmp	.+812    	; 0x3c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_39>
      a0:	92 c1       	rjmp	.+804    	; 0x3c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c1       	rjmp	.+800    	; 0x3c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c1       	rjmp	.+796    	; 0x3c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c1       	rjmp	.+792    	; 0x3c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c1       	rjmp	.+788    	; 0x3c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c1       	rjmp	.+784    	; 0x3c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c1       	rjmp	.+780    	; 0x3c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c1       	rjmp	.+776    	; 0x3c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c1       	rjmp	.+772    	; 0x3c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c1       	rjmp	.+768    	; 0x3c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c1       	rjmp	.+764    	; 0x3c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c1       	rjmp	.+760    	; 0x3c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c1       	rjmp	.+756    	; 0x3c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c1       	rjmp	.+752    	; 0x3c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c1       	rjmp	.+748    	; 0x3c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c1       	rjmp	.+744    	; 0x3c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c1       	rjmp	.+740    	; 0x3c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd 19       	sub	r29, r13
      e6:	e0 19       	sub	r30, r0
      e8:	cf 19       	sub	r28, r15
      ea:	d3 19       	sub	r29, r3
      ec:	d9 19       	sub	r29, r9
      ee:	17 1a       	sub	r1, r23
      f0:	e4 19       	sub	r30, r4
      f2:	e8 19       	sub	r30, r8
      f4:	ee 19       	sub	r30, r14
      f6:	f2 19       	sub	r31, r2
      f8:	f6 19       	sub	r31, r6
      fa:	fc 19       	sub	r31, r12
      fc:	00 1a       	sub	r0, r16
      fe:	04 1a       	sub	r0, r20
     100:	17 1a       	sub	r1, r23
     102:	0a 1a       	sub	r0, r26
     104:	0e 1a       	sub	r0, r30
     106:	12 1a       	sub	r1, r18

00000108 <__trampolines_end>:
     108:	4b 20       	and	r4, r11
     10a:	76 61       	ori	r23, 0x16	; 22
     10c:	6c 75       	andi	r22, 0x5C	; 92
     10e:	65 20       	and	r6, r5
     110:	3f 00       	.word	0x003f	; ????

00000112 <_ZL25K_value_selection_d_text0>:
     112:	4b 20 76 61 6c 75 65 20 3f 00                       K value ?.

0000011c <_ZL25K_value_selection_c_text0>:
     11c:	4b 20 76 61 6c 75 65 20 3f 00                       K value ?.

00000126 <_ZL9INA_text3>:
     126:	45 58 49 54 00                                      EXIT.

0000012b <_ZL9INA_text2>:
     12b:	49 32 20 42 75 73 20 3a 00                          I2 Bus :.

00000134 <_ZL9INA_text1>:
     134:	49 32 20 3a 20 00                                   I2 : .

0000013a <_ZL9INA_text0>:
     13a:	43 75 72 72 65 6e 74 20 72 65 61 64 69 6e 67 73     Current readings
	...

0000014b <_ZL13liveReadText2>:
     14b:	45 58 49 54 00                                      EXIT.

00000150 <_ZL13liveReadText1>:
     150:	56 32 20 3d 20 00                                   V2 = .

00000156 <_ZL13liveReadText0>:
     156:	56 31 20 3d 20 00                                   V1 = .

0000015c <_ZL17configureAdcText1>:
     15c:	45 78 69 74 00                                      Exit.

00000161 <_ZL17configureAdcText0>:
     161:	4e 6f 74 68 69 6e 67 20 79 65 74 20 3a 28 00        Nothing yet :(.

00000170 <_ZL20calibrationDoneText1>:
     170:	45 78 69 74 00                                      Exit.

00000175 <_ZL20calibrationDoneText0>:
     175:	43 61 6c 69 62 72 61 74 69 6f 6e 20 44 6f 6e 65     Calibration Done
     185:	20 21 00                                             !.

00000188 <_ZL18calibrateGainText1>:
     188:	43 6c 69 63 6b 20 68 65 72 65 20 77 68 65 6e 20     Click here when 
     198:	52 44 59 00                                         RDY.

0000019c <_ZL18calibrateGainText0>:
     19c:	53 65 74 20 32 34 56 20 6f 6e 20 56 31 00           Set 24V on V1.

000001aa <_ZL20calibrateOffsetText1>:
     1aa:	43 6c 69 63 6b 20 68 65 72 65 20 77 68 65 6e 20     Click here when 
     1ba:	52 44 59 00                                         RDY.

000001be <_ZL20calibrateOffsetText0>:
     1be:	53 65 74 20 30 56 20 6f 6e 20 56 31 00              Set 0V on V1.

000001cb <_ZL10main_text4>:
     1cb:	34 3a 20 43 55 52 52 45 4e 54 20 52 45 41 44 49     4: CURRENT READI
     1db:	4e 47 53 00                                         NGS.

000001df <_ZL10main_text3>:
     1df:	33 3a 20 41 44 43 20 52 45 41 44 49 4e 47 53 00     3: ADC READINGS.

000001ef <_ZL10main_text2>:
     1ef:	32 3a 20 43 4f 4e 46 49 47 55 52 45 20 41 44 43     2: CONFIGURE ADC
	...

00000200 <_ZL10main_text1>:
     200:	31 3a 20 43 41 4c 49 42 52 41 54 49 4f 4e 20 41     1: CALIBRATION A
     210:	44 43 00                                            DC.

00000213 <_ZL10main_text0>:
     213:	20 20 20 20 4d 41 49 4e 20 4d 45 4e 55 00               MAIN MENU.

00000221 <_ZL13welcome_text3>:
     221:	31 35 3a 31 32 3a 30 35 00                          15:12:05.

0000022a <_ZL13welcome_text2>:
     22a:	42 75 69 6c 64 20 6f 6e 20 3a 00                    Build on :.

00000235 <_ZL13welcome_text1>:
     235:	41 44 43 20 43 41 4c 49 42 52 41 54 49 4f 4e 00     ADC CALIBRATION.

00000245 <_ZL13welcome_text0>:
     245:	20 20 54 45 53 54 20 50 52 4f 47 52 41 4d 00          TEST PROGRAM.

00000254 <digital_pin_to_timer_PGM>:
     254:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     280:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000029a <digital_pin_to_bit_mask_PGM>:
     29a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2aa:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     2ba:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     2ca:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     2da:	04 08 10 20 40 80                                   ... @.

000002e0 <digital_pin_to_port_PGM>:
     2e0:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2f0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     300:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     310:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     320:	0b 0b 0b 0b 0b 0b                                   ......

00000326 <port_to_output_PGM>:
     326:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     336:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000340 <port_to_mode_PGM>:
     340:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     350:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000035a <__ctors_start>:
     35a:	f7 03       	fmuls	r23, r23
     35c:	93 06       	cpc	r9, r19
     35e:	2f 0a       	sbc	r2, r31
     360:	a6 16       	cp	r10, r22

00000362 <__ctors_end>:
     362:	67 0a       	sbc	r6, r23

00000364 <__dtors_end>:
     364:	11 24       	eor	r1, r1
     366:	1f be       	out	0x3f, r1	; 63
     368:	cf ef       	ldi	r28, 0xFF	; 255
     36a:	d1 e2       	ldi	r29, 0x21	; 33
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	0c bf       	out	0x3c, r16	; 60

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b2 e0       	ldi	r27, 0x02	; 2
     37a:	e6 e3       	ldi	r30, 0x36	; 54
     37c:	f9 e4       	ldi	r31, 0x49	; 73
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	0b bf       	out	0x3b, r16	; 59
     382:	02 c0       	rjmp	.+4      	; 0x388 <__do_copy_data+0x14>
     384:	07 90       	elpm	r0, Z+
     386:	0d 92       	st	X+, r0
     388:	ae 36       	cpi	r26, 0x6E	; 110
     38a:	b1 07       	cpc	r27, r17
     38c:	d9 f7       	brne	.-10     	; 0x384 <__do_copy_data+0x10>

0000038e <__do_clear_bss>:
     38e:	2a e0       	ldi	r18, 0x0A	; 10
     390:	ae e6       	ldi	r26, 0x6E	; 110
     392:	b2 e0       	ldi	r27, 0x02	; 2
     394:	01 c0       	rjmp	.+2      	; 0x398 <.do_clear_bss_start>

00000396 <.do_clear_bss_loop>:
     396:	1d 92       	st	X+, r1

00000398 <.do_clear_bss_start>:
     398:	a0 36       	cpi	r26, 0x60	; 96
     39a:	b2 07       	cpc	r27, r18
     39c:	e1 f7       	brne	.-8      	; 0x396 <.do_clear_bss_loop>

0000039e <__do_global_ctors>:
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	c1 eb       	ldi	r28, 0xB1	; 177
     3a2:	d1 e0       	ldi	r29, 0x01	; 1
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <__do_global_ctors+0x16>
     3a8:	21 97       	sbiw	r28, 0x01	; 1
     3aa:	01 09       	sbc	r16, r1
     3ac:	80 2f       	mov	r24, r16
     3ae:	fe 01       	movw	r30, r28
     3b0:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <__tablejump2__>
     3b4:	cd 3a       	cpi	r28, 0xAD	; 173
     3b6:	d1 07       	cpc	r29, r17
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	08 07       	cpc	r16, r24
     3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__do_global_ctors+0xa>
     3be:	0e 94 94 18 	call	0x3128	; 0x3128 <main>
     3c2:	0c 94 8a 24 	jmp	0x4914	; 0x4914 <__do_global_dtors>

000003c6 <__bad_interrupt>:
     3c6:	1c ce       	rjmp	.-968    	; 0x0 <__vectors>

000003c8 <_ZN11SPISettingsC1Emhh>:
	SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE1));
	setMux(CS_ADC);
	SPI.transfer(RESET_ADC);//Does a reset
	SPI.endTransaction();
	setMux(CS_DISABLE);
}
     3c8:	0f 93       	push	r16
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	92 e1       	ldi	r25, 0x12	; 18
     3d0:	aa e7       	ldi	r26, 0x7A	; 122
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	48 17       	cp	r20, r24
     3d8:	59 07       	cpc	r21, r25
     3da:	6a 07       	cpc	r22, r26
     3dc:	7b 07       	cpc	r23, r27
     3de:	40 f4       	brcc	.+16     	; 0x3f0 <_ZN11SPISettingsC1Emhh+0x28>
     3e0:	b6 95       	lsr	r27
     3e2:	a7 95       	ror	r26
     3e4:	97 95       	ror	r25
     3e6:	87 95       	ror	r24
     3e8:	3f 5f       	subi	r19, 0xFF	; 255
     3ea:	36 30       	cpi	r19, 0x06	; 6
     3ec:	a1 f7       	brne	.-24     	; 0x3d6 <_ZN11SPISettingsC1Emhh+0xe>
     3ee:	37 e0       	ldi	r19, 0x07	; 7
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	93 27       	eor	r25, r19
     3f4:	22 23       	and	r18, r18
     3f6:	11 f0       	breq	.+4      	; 0x3fc <_ZN11SPISettingsC1Emhh+0x34>
     3f8:	20 e5       	ldi	r18, 0x50	; 80
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <_ZN11SPISettingsC1Emhh+0x36>
     3fc:	20 e7       	ldi	r18, 0x70	; 112
     3fe:	0c 70       	andi	r16, 0x0C	; 12
     400:	89 2f       	mov	r24, r25
     402:	86 95       	lsr	r24
     404:	08 2b       	or	r16, r24
     406:	02 2b       	or	r16, r18
     408:	00 83       	st	Z, r16
     40a:	91 70       	andi	r25, 0x01	; 1
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     412:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
     416:	22 23       	and	r18, r18
     418:	99 f0       	breq	.+38     	; 0x440 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     41a:	4f b7       	in	r20, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
     422:	21 30       	cpi	r18, 0x01	; 1
     424:	59 f4       	brne	.+22     	; 0x43c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     426:	2d b3       	in	r18, 0x1d	; 29
     428:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
     42c:	3d b3       	in	r19, 0x1d	; 29
     42e:	20 91 5d 0a 	lds	r18, 0x0A5D	; 0x800a5d <_ZN8SPIClass13interruptMaskE>
     432:	20 95       	com	r18
     434:	23 23       	and	r18, r19
     436:	2d bb       	out	0x1d, r18	; 29
     438:	4f bf       	out	0x3f, r20	; 63
     43a:	02 c0       	rjmp	.+4      	; 0x440 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     43c:	40 93 5c 0a 	sts	0x0A5C, r20	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
     440:	8c bd       	out	0x2c, r24	; 44
     442:	9d bd       	out	0x2d, r25	; 45
     444:	08 95       	ret

00000446 <_ZN8SPIClass8transferEh>:
     446:	8e bd       	out	0x2e, r24	; 46
     448:	00 00       	nop
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <_ZN8SPIClass8transferEh+0x4>
     450:	8e b5       	in	r24, 0x2e	; 46
     452:	08 95       	ret

00000454 <_ZN8SPIClass14endTransactionEv>:
     454:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
     458:	88 23       	and	r24, r24
     45a:	61 f0       	breq	.+24     	; 0x474 <_ZN8SPIClass14endTransactionEv+0x20>
     45c:	9f b7       	in	r25, 0x3f	; 63
     45e:	f8 94       	cli
     460:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
     464:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
     468:	21 30       	cpi	r18, 0x01	; 1
     46a:	19 f4       	brne	.+6      	; 0x472 <_ZN8SPIClass14endTransactionEv+0x1e>
     46c:	8d bb       	out	0x1d, r24	; 29
     46e:	9f bf       	out	0x3f, r25	; 63
     470:	08 95       	ret
     472:	8f bf       	out	0x3f, r24	; 63
     474:	08 95       	ret

00000476 <_ZN7ADS1241C1Ev>:
     476:	08 95       	ret

00000478 <_ZN7ADS1241D1Ev>:
     478:	08 95       	ret

0000047a <_ZN7ADS12415writeEhh>:


void ADS1241::write(uint8_t uiReg, uint8_t uiValue)
{
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	1f 92       	push	r1
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	f6 2e       	mov	r15, r22
     48e:	14 2f       	mov	r17, r20
	SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE1));
     490:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <SPI_SPEED>
     494:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <SPI_SPEED+0x1>
     498:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <SPI_SPEED+0x2>
     49c:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <SPI_SPEED+0x3>
     4a0:	04 e0       	ldi	r16, 0x04	; 4
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	8f df       	rcall	.-226    	; 0x3c8 <_ZN11SPISettingsC1Emhh>
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	b1 df       	rcall	.-158    	; 0x412 <_ZN8SPIClass16beginTransactionE11SPISettings>
	setMux(CS_ADC);
     4b0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <CS_ADC>
     4b4:	cd d5       	rcall	.+2970   	; 0x1050 <_Z6setMuxh>
	SPI.transfer(transform(WREG_ADC, uiReg));
     4b6:	8f 2d       	mov	r24, r15
     4b8:	80 65       	ori	r24, 0x50	; 80
     4ba:	c5 df       	rcall	.-118    	; 0x446 <_ZN8SPIClass8transferEh>
	SPI.transfer(0x00); //We write in only 1 register (#reg - 1 see datasheet)
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	c3 df       	rcall	.-122    	; 0x446 <_ZN8SPIClass8transferEh>
	SPI.transfer(uiValue);
     4c0:	81 2f       	mov	r24, r17
     4c2:	c1 df       	rcall	.-126    	; 0x446 <_ZN8SPIClass8transferEh>
	setMux(CS_DISABLE);
     4c4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <CS_DISABLE>
     4c8:	c3 d5       	rcall	.+2950   	; 0x1050 <_Z6setMuxh>
     4ca:	c4 df       	rcall	.-120    	; 0x454 <_ZN8SPIClass14endTransactionEv>
	SPI.endTransaction();
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
	
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret

000004dc <_ZN7ADS12414readEh>:
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17

uint8_t ADS1241::read(uint8_t uiReg)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	16 2f       	mov	r17, r22
	SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE1));
     4ee:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <SPI_SPEED>
     4f2:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <SPI_SPEED+0x1>
     4f6:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <SPI_SPEED+0x2>
     4fa:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <SPI_SPEED+0x3>
     4fe:	04 e0       	ldi	r16, 0x04	; 4
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	60 df       	rcall	.-320    	; 0x3c8 <_ZN11SPISettingsC1Emhh>
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	82 df       	rcall	.-252    	; 0x412 <_ZN8SPIClass16beginTransactionE11SPISettings>
	uint8_t data;
	cli(); //Disable global interrupt
     50e:	f8 94       	cli
	setMux(CS_ADC);
     510:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <CS_ADC>
     514:	9d d5       	rcall	.+2874   	; 0x1050 <_Z6setMuxh>
	SPI.transfer(transform(RREG_ADC, uiReg));
     516:	81 2f       	mov	r24, r17
     518:	80 61       	ori	r24, 0x10	; 16
     51a:	95 df       	rcall	.-214    	; 0x446 <_ZN8SPIClass8transferEh>
	SPI.transfer(0x00); //We read 1 register
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	93 df       	rcall	.-218    	; 0x446 <_ZN8SPIClass8transferEh>
     520:	80 e5       	ldi	r24, 0x50	; 80
	delayMicroseconds(80);
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 55 19 	call	0x32aa	; 0x32aa <delayMicroseconds>
	data = SPI.transfer(0x00); //read the register
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	8d df       	rcall	.-230    	; 0x446 <_ZN8SPIClass8transferEh>
	sei(); // Enable global interrupt
     52c:	18 2f       	mov	r17, r24
	setMux(CS_DISABLE);
     52e:	78 94       	sei
     530:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <CS_DISABLE>
     534:	8d d5       	rcall	.+2842   	; 0x1050 <_Z6setMuxh>
	SPI.endTransaction();
     536:	8e df       	rcall	.-228    	; 0x454 <_ZN8SPIClass14endTransactionEv>
     538:	81 2f       	mov	r24, r17
	return data;
}
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <_ZN7ADS124110read24bitsEh>:
     548:	ef 92       	push	r14

uint32_t ADS1241::read24bits(uint8_t uiReg)//TODO :check endianess
{
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	00 d0       	rcall	.+0      	; 0x556 <_ZN7ADS124110read24bitsEh+0xe>
     556:	1f 92       	push	r1
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	16 2f       	mov	r17, r22
	union 
	{
		uint32_t data;
		uint8_t uiValue[4];
	}MyUnion;
	SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE1));
     55e:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <SPI_SPEED>
     562:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <SPI_SPEED+0x1>
     566:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <SPI_SPEED+0x2>
     56a:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <SPI_SPEED+0x3>
     56e:	04 e0       	ldi	r16, 0x04	; 4
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	28 df       	rcall	.-432    	; 0x3c8 <_ZN11SPISettingsC1Emhh>
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	4a df       	rcall	.-364    	; 0x412 <_ZN8SPIClass16beginTransactionE11SPISettings>
	cli();
     57e:	f8 94       	cli
	setMux(CS_ADC);
     580:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <CS_ADC>
     584:	65 d5       	rcall	.+2762   	; 0x1050 <_Z6setMuxh>
	SPI.transfer(transform(RREG_ADC, uiReg));
     586:	81 2f       	mov	r24, r17
     588:	80 61       	ori	r24, 0x10	; 16
     58a:	5d df       	rcall	.-326    	; 0x446 <_ZN8SPIClass8transferEh>
	SPI.transfer(0x02); //we read 3 registers
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	5b df       	rcall	.-330    	; 0x446 <_ZN8SPIClass8transferEh>
     590:	80 e5       	ldi	r24, 0x50	; 80
	delayMicroseconds(80); //Maybe not needed, check with that line commented
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 55 19 	call	0x32aa	; 0x32aa <delayMicroseconds>
     598:	8e 01       	movw	r16, r28
     59a:	0f 5f       	subi	r16, 0xFF	; 255
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	7e 01       	movw	r14, r28
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	e8 0e       	add	r14, r24
     5a4:	f1 1c       	adc	r15, r1
	
	for(i=0; i<=2; i++) 
	{
		MyUnion.uiValue[i] = SPI.transfer(0x00); 
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	4e df       	rcall	.-356    	; 0x446 <_ZN8SPIClass8transferEh>
     5aa:	f8 01       	movw	r30, r16
     5ac:	81 93       	st	Z+, r24
     5ae:	8f 01       	movw	r16, r30
     5b0:	ee 15       	cp	r30, r14
	setMux(CS_ADC);
	SPI.transfer(transform(RREG_ADC, uiReg));
	SPI.transfer(0x02); //we read 3 registers
	delayMicroseconds(80); //Maybe not needed, check with that line commented
	
	for(i=0; i<=2; i++) 
     5b2:	ff 05       	cpc	r31, r15
	{
		MyUnion.uiValue[i] = SPI.transfer(0x00); 
	}
	sei();
     5b4:	c1 f7       	brne	.-16     	; 0x5a6 <_ZN7ADS124110read24bitsEh+0x5e>
	setMux(CS_DISABLE);
     5b6:	78 94       	sei
     5b8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <CS_DISABLE>
     5bc:	49 d5       	rcall	.+2706   	; 0x1050 <_Z6setMuxh>
	SPI.endTransaction();
     5be:	4a df       	rcall	.-364    	; 0x454 <_ZN8SPIClass14endTransactionEv>
     5c0:	69 81       	ldd	r22, Y+1	; 0x01
	return MyUnion.data;
     5c2:	7a 81       	ldd	r23, Y+2	; 0x02
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	0f 90       	pop	r0
	
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	08 95       	ret

000005de <_ZN7ADS124113selectChannelEh>:
     5de:	46 2f       	mov	r20, r22
//Example uiValue1 = 0b0010 and uiValue2 = 0b1000 it return
// temp = 0b0010 1000
uint8_t ADS1241::transform(uint8_t uiValue1, uint8_t uiValue2)
{
	uint8_t temp;
	temp = uiValue1 << 4; //put the first 4 bits (MSB first)
     5e0:	42 95       	swap	r20
     5e2:	40 7f       	andi	r20, 0xF0	; 240

void ADS1241::selectChannel(uint8_t channel)
{
	//Select AINCOM as negative channel and 
	//select  the arg as positive channel
	write(MUX_ADC, transform(channel, 0x8));
     5e4:	48 60       	ori	r20, 0x08	; 8
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	48 cf       	rjmp	.-368    	; 0x47a <_ZN7ADS12415writeEhh>

000005ea <_ZN7ADS124110getVoltageEh>:
}

uint32_t ADS1241::getVoltage(uint8_t channel)//TODO : Use the tension used for calibration
{
     5ea:	8f 92       	push	r8
     5ec:	9f 92       	push	r9
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
	
	cli(); //Disable global interrupt
     602:	f8 94       	cli
	uint32_t data;
	uint32_t FSR; //Full Scale Register
	uint8_t i=0;
	
	bool isDataReady = false;
	selectChannel(channel);
     604:	ec df       	rcall	.-40     	; 0x5de <_ZN7ADS124113selectChannelEh>
	
	cli(); //Disable global interrupt
	uint8_t temp;
	uint32_t data;
	uint32_t FSR; //Full Scale Register
	uint8_t i=0;
     606:	10 e0       	ldi	r17, 0x00	; 0
	
	bool isDataReady = false;
	selectChannel(channel);
	while(!isDataReady || (i<100) ) //If we tried 100 times
	{
		temp = read(ACR_ADC);
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	ce 01       	movw	r24, r28
     60c:	67 df       	rcall	.-306    	; 0x4dc <_ZN7ADS12414readEh>
		isDataReady = (temp & (1<<7)); //Check DRDY bit
		i++;		
     60e:	1f 5f       	subi	r17, 0xFF	; 255
	uint32_t FSR; //Full Scale Register
	uint8_t i=0;
	
	bool isDataReady = false;
	selectChannel(channel);
	while(!isDataReady || (i<100) ) //If we tried 100 times
     610:	87 ff       	sbrs	r24, 7
     612:	fa cf       	rjmp	.-12     	; 0x608 <_ZN7ADS124110getVoltageEh+0x1e>
     614:	14 36       	cpi	r17, 0x64	; 100
     616:	c0 f3       	brcs	.-16     	; 0x608 <_ZN7ADS124110getVoltageEh+0x1e>
		isDataReady = (temp & (1<<7)); //Check DRDY bit
		i++;		
	}
	if(isDataReady)
	{
		data = read24bits(RDATA_ADC);
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	ce 01       	movw	r24, r28
     61c:	95 df       	rcall	.-214    	; 0x548 <_ZN7ADS124110read24bitsEh>
	}
	else
	{
		data = 0xFFFFFFFF;
	}
	data = read24bits(RDATA_ADC);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	ce 01       	movw	r24, r28
     622:	92 df       	rcall	.-220    	; 0x548 <_ZN7ADS124110read24bitsEh>
     624:	6b 01       	movw	r12, r22
     626:	7c 01       	movw	r14, r24
	FSR = read24bits(FSR0_ADC);
     628:	6a e0       	ldi	r22, 0x0A	; 10
     62a:	ce 01       	movw	r24, r28
     62c:	8d df       	rcall	.-230    	; 0x548 <_ZN7ADS124110read24bitsEh>
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
     632:	c7 01       	movw	r24, r14
	data = (static_cast <float>(data) / static_cast <float>(FSR))*24000.0; //If we used 24V for calibration, 
     634:	b6 01       	movw	r22, r12
     636:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatunsisf>
     63a:	6b 01       	movw	r12, r22
     63c:	7c 01       	movw	r14, r24
     63e:	c5 01       	movw	r24, r10
     640:	b4 01       	movw	r22, r8
     642:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatunsisf>
     646:	9b 01       	movw	r18, r22
     648:	ac 01       	movw	r20, r24
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__divsf3>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e8       	ldi	r19, 0x80	; 128
     656:	4b eb       	ldi	r20, 0xBB	; 187
     658:	56 e4       	ldi	r21, 0x46	; 70
     65a:	0e 94 30 18 	call	0x3060	; 0x3060 <__mulsf3>
     65e:	78 94       	sei
	sei(); // Enable global interrupt
     660:	0e 94 76 17 	call	0x2eec	; 0x2eec <__fixunssfsi>
	return data;
     664:	df 91       	pop	r29
}
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	08 95       	ret

0000067c <_ZN7ADS12419setupBOCSEb>:
     67c:	1f 93       	push	r17
	range(1);
	sei();
}

void ADS1241::setupBOCS(bool boolBOCS) //activate or disable burnout current source
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	16 2f       	mov	r17, r22
	uint8_t temp;
	temp = read(SETUP_ADC);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	29 df       	rcall	.-430    	; 0x4dc <_ZN7ADS12414readEh>
	if(boolBOCS)
	{
		temp |= (1<<3);  //set BOCS bit
     68a:	48 2f       	mov	r20, r24

void ADS1241::setupBOCS(bool boolBOCS) //activate or disable burnout current source
{
	uint8_t temp;
	temp = read(SETUP_ADC);
	if(boolBOCS)
     68c:	11 23       	and	r17, r17
     68e:	11 f0       	breq	.+4      	; 0x694 <_ZN7ADS12419setupBOCSEb+0x18>
	{
		temp |= (1<<3);  //set BOCS bit
     690:	48 60       	ori	r20, 0x08	; 8
     692:	01 c0       	rjmp	.+2      	; 0x696 <_ZN7ADS12419setupBOCSEb+0x1a>
	}
	else
	{
		temp &= ~(1<<3); //clear BOCS bit
     694:	47 7f       	andi	r20, 0xF7	; 247
	}
	write(SETUP_ADC, temp);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	ce 01       	movw	r24, r28
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
	}
	else
	{
		temp &= ~(1<<3); //clear BOCS bit
	}
	write(SETUP_ADC, temp);
     69e:	1f 91       	pop	r17
     6a0:	ec ce       	rjmp	.-552    	; 0x47a <_ZN7ADS12415writeEhh>

000006a2 <_ZN7ADS12418setupBUFEb>:
}

void ADS1241::setupBUF(bool boolBUF)
{
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	16 2f       	mov	r17, r22
	uint8_t temp;
	DDRB |= (1<<4); //BUF pin as output
     6ac:	24 9a       	sbi	0x04, 4	; 4
	temp = read(ACR_ADC);
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	15 df       	rcall	.-470    	; 0x4dc <_ZN7ADS12414readEh>
	if(boolBUF)
     6b2:	11 23       	and	r17, r17
     6b4:	21 f0       	breq	.+8      	; 0x6be <_ZN7ADS12418setupBUFEb+0x1c>
	{
		PORTB |= (1<<4);//Write 1 to BUF pin
     6b6:	2c 9a       	sbi	0x05, 4	; 5
		temp |= (1<<4);//Write 1 to ACR Register
		write(ACR_ADC, temp); // Unipolar data, MSBFIRST, buf enable, range = 1, 30Hz 00 DR1 DR0
     6b8:	48 2f       	mov	r20, r24
     6ba:	40 61       	ori	r20, 0x10	; 16
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <_ZN7ADS12418setupBUFEb+0x22>
	}
	else
	{
		PORTB &=~(1<<4); //Write 0 to BUF pin
     6be:	2c 98       	cbi	0x05, 4	; 5
		temp &=~(1<<4);
		write(ACR_ADC, temp); //Same but with buf disable SEE DATASHEET
     6c0:	48 2f       	mov	r20, r24
     6c2:	4f 7e       	andi	r20, 0xEF	; 239
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	ce 01       	movw	r24, r28
	}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
	}
	else
	{
		PORTB &=~(1<<4); //Write 0 to BUF pin
		temp &=~(1<<4);
		write(ACR_ADC, temp); //Same but with buf disable SEE DATASHEET
     6cc:	1f 91       	pop	r17
     6ce:	d5 ce       	rjmp	.-598    	; 0x47a <_ZN7ADS12415writeEhh>

000006d0 <_ZN7ADS12415rangeEb>:
	}
}

void ADS1241::range(bool boolRange)
{
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	16 2f       	mov	r17, r22
	uint8_t temp;
	temp = read(ACR_ADC);
     6da:	62 e0       	ldi	r22, 0x02	; 2
     6dc:	ff de       	rcall	.-514    	; 0x4dc <_ZN7ADS12414readEh>
	if(boolRange)
	{
		temp |= (1<<2);  //set Range bit
     6de:	48 2f       	mov	r20, r24

void ADS1241::range(bool boolRange)
{
	uint8_t temp;
	temp = read(ACR_ADC);
	if(boolRange)
     6e0:	11 23       	and	r17, r17
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <_ZN7ADS12415rangeEb+0x18>
	{
		temp |= (1<<2);  //set Range bit
     6e4:	44 60       	ori	r20, 0x04	; 4
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <_ZN7ADS12415rangeEb+0x1a>
	}
	else
	{
		temp &= ~(1<<2); //clear Range bit
     6e8:	4b 7f       	andi	r20, 0xFB	; 251
	}
	write(ACR_ADC, temp);
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	ce 01       	movw	r24, r28
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
	}
	else
	{
		temp &= ~(1<<2); //clear Range bit
	}
	write(ACR_ADC, temp);
     6f2:	1f 91       	pop	r17
     6f4:	c2 ce       	rjmp	.-636    	; 0x47a <_ZN7ADS12415writeEhh>

000006f6 <_ZN7ADS124113calibrateGainEv>:
}



void ADS1241::calibrateGain(void)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	cli();
     6fc:	f8 94       	cli
	range(0); //Range must be 0 for calibration
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	e7 df       	rcall	.-50     	; 0x6d0 <_ZN7ADS12415rangeEb>
	setupBUF(0); //Disable Buffer
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	ce 01       	movw	r24, r28
     706:	cd df       	rcall	.-102    	; 0x6a2 <_ZN7ADS12418setupBUFEb>
	selectChannel(0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	ce 01       	movw	r24, r28
	SPI.transfer(SELFGCAL_ADC);
     70c:	68 df       	rcall	.-304    	; 0x5de <_ZN7ADS124113selectChannelEh>
     70e:	82 ef       	ldi	r24, 0xF2	; 242
     710:	9a de       	rcall	.-716    	; 0x446 <_ZN8SPIClass8transferEh>
	delay(10); //wait 10ms for calibration
     712:	6a e0       	ldi	r22, 0x0A	; 10
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 1c 19 	call	0x3238	; 0x3238 <delay>
	getVoltage(1); //Discard the data in the buffer
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	ce 01       	movw	r24, r28
	setupBUF(_isBufEnable); //If buffer was enabled, we re-enable it
     722:	63 df       	rcall	.-314    	; 0x5ea <_ZN7ADS124110getVoltageEh>
     724:	68 81       	ld	r22, Y
     726:	ce 01       	movw	r24, r28
	range(1);
     728:	bc df       	rcall	.-136    	; 0x6a2 <_ZN7ADS12418setupBUFEb>
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	ce 01       	movw	r24, r28
     72e:	d0 df       	rcall	.-96     	; 0x6d0 <_ZN7ADS12415rangeEb>
	sei();
     730:	78 94       	sei
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <_ZN7ADS124115calibrateOffsetEv>:

void ADS1241::calibrateOffset(void) //Calibration on channel 1 TODO SELECT CHANNEL ALREADY ON GND
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ec 01       	movw	r28, r24
	cli();
     73e:	f8 94       	cli
	range(0); //Range must be 0 for calibration
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	c6 df       	rcall	.-116    	; 0x6d0 <_ZN7ADS12415rangeEb>
	setupBUF(0); //Disable Buffer
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	ce 01       	movw	r24, r28
     748:	ac df       	rcall	.-168    	; 0x6a2 <_ZN7ADS12418setupBUFEb>
	selectChannel(0);
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	ce 01       	movw	r24, r28
	SPI.transfer(SELFOCAL_ADC);
     74e:	47 df       	rcall	.-370    	; 0x5de <_ZN7ADS124113selectChannelEh>
     750:	81 ef       	ldi	r24, 0xF1	; 241
     752:	79 de       	rcall	.-782    	; 0x446 <_ZN8SPIClass8transferEh>
	delay(10);
     754:	6a e0       	ldi	r22, 0x0A	; 10
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 1c 19 	call	0x3238	; 0x3238 <delay>
	getVoltage(1); //Discard the data in the buffer
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	ce 01       	movw	r24, r28
	setupBUF(_isBufEnable); //If buffer was enabled, we re-enable it
     764:	42 df       	rcall	.-380    	; 0x5ea <_ZN7ADS124110getVoltageEh>
     766:	68 81       	ld	r22, Y
     768:	ce 01       	movw	r24, r28
	range(1);
     76a:	9b df       	rcall	.-202    	; 0x6a2 <_ZN7ADS12418setupBUFEb>
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	ce 01       	movw	r24, r28
     770:	af df       	rcall	.-162    	; 0x6d0 <_ZN7ADS12415rangeEb>
	sei();
     772:	78 94       	sei
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <_ZN7ADS12416SPIPolEb>:
	write(ACR_ADC, temp);
}

void ADS1241::SPIPol(bool boolMode)
{
	DDRB |= (1<<5); //POL PIN as output
     77a:	25 9a       	sbi	0x04, 5	; 4
	if(boolMode)
     77c:	66 23       	and	r22, r22
     77e:	11 f0       	breq	.+4      	; 0x784 <_ZN7ADS12416SPIPolEb+0xa>
	{
		PORTB |=(1<<5);//Write a 1 to POL pin
     780:	2d 9a       	sbi	0x05, 5	; 5
     782:	08 95       	ret
	}
	else if(boolMode == false)
	{
		PORTB &=~(1<<5);//Write a 0 to POL pin
     784:	2d 98       	cbi	0x05, 5	; 5
     786:	08 95       	ret

00000788 <_ZN7ADS124113setDataFormatEb>:
	}	
}

void ADS1241::setDataFormat(bool boolData) //if true, set data as unipolar
{
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	16 2f       	mov	r17, r22
	uint8_t temp;
	temp = read(ACR_ADC);
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	a3 de       	rcall	.-698    	; 0x4dc <_ZN7ADS12414readEh>
	if(boolData)
	{
		temp |= (1<<6);  //set UB
     796:	48 2f       	mov	r20, r24

void ADS1241::setDataFormat(bool boolData) //if true, set data as unipolar
{
	uint8_t temp;
	temp = read(ACR_ADC);
	if(boolData)
     798:	11 23       	and	r17, r17
     79a:	11 f0       	breq	.+4      	; 0x7a0 <_ZN7ADS124113setDataFormatEb+0x18>
	{
		temp |= (1<<6);  //set UB
     79c:	40 64       	ori	r20, 0x40	; 64
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <_ZN7ADS124113setDataFormatEb+0x1a>
	}
	else
	{
		temp &= ~(1<<6); //clear UB bit
     7a0:	4f 7b       	andi	r20, 0xBF	; 191
	}
	write(ACR_ADC, temp);
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	ce 01       	movw	r24, r28
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
	}
	else
	{
		temp &= ~(1<<6); //clear UB bit
	}
	write(ACR_ADC, temp);
     7aa:	1f 91       	pop	r17
     7ac:	66 ce       	rjmp	.-820    	; 0x47a <_ZN7ADS12415writeEhh>

000007ae <_ZN7ADS12415beginEbb>:
ADS1241::~ADS1241() //unused destructor
{
}

void ADS1241::begin(bool isBufEnable, bool isBOCSenable)
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ec 01       	movw	r28, r24
     7b8:	06 2f       	mov	r16, r22
     7ba:	14 2f       	mov	r17, r20
	//change PIN FOR FINAL PRODUCT
	//Polarity is hard coded 0
	//RANGE = 1 because we use 5V as VREF
	SPI.begin();
     7bc:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN8SPIClass5beginEv>
	//Those 2 lines are very important they prevent the ATMEGA to enter in slave mode
	DDRB |= (1 << 0); //SS as output
     7c0:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 << 0); //Write a 1
     7c2:	28 9a       	sbi	0x05, 0	; 5
	
	_isBufEnable = isBufEnable;
     7c4:	08 83       	st	Y, r16
	_isBOCSenable = isBOCSenable;
     7c6:	19 83       	std	Y+1, r17	; 0x01
	SPIPol(false);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	ce 01       	movw	r24, r28
     7cc:	d6 df       	rcall	.-84     	; 0x77a <_ZN7ADS12416SPIPolEb>
	setupBUF(_isBufEnable);
     7ce:	68 81       	ld	r22, Y
     7d0:	ce 01       	movw	r24, r28
     7d2:	67 df       	rcall	.-306    	; 0x6a2 <_ZN7ADS12418setupBUFEb>
	setupBOCS(_isBOCSenable);
     7d4:	69 81       	ldd	r22, Y+1	; 0x01
     7d6:	ce 01       	movw	r24, r28
     7d8:	51 df       	rcall	.-350    	; 0x67c <_ZN7ADS12419setupBOCSEb>
	setDataFormat(true);
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	ce 01       	movw	r24, r28
     7de:	d4 df       	rcall	.-88     	; 0x788 <_ZN7ADS124113setDataFormatEb>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
	range(true);
     7e2:	ce 01       	movw	r24, r28
     7e4:	df 91       	pop	r29
}
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
	_isBOCSenable = isBOCSenable;
	SPIPol(false);
	setupBUF(_isBufEnable);
	setupBOCS(_isBOCSenable);
	setDataFormat(true);
	range(true);
     7ec:	71 cf       	rjmp	.-286    	; 0x6d0 <_ZN7ADS12415rangeEb>

000007ee <_GLOBAL__sub_I__ZN8MAX31856C2Ea>:
     7ee:	e3 e7       	ldi	r30, 0x73	; 115
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	87 e5       	ldi	r24, 0x57	; 87
     7f4:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     7f6:	11 82       	std	Z+1, r1	; 0x01
     7f8:	08 95       	ret

000007fa <_Z14gotoMainScreenv>:
	K_value_selection_c_line1.set_asGlyph(1);
	K_value_selection_c_line3.set_asGlyph(3);
	K_value_selection_d_line1.set_asGlyph(1);
	K_value_selection_d_line3.set_asGlyph(3);
	K_value_selection_u_line1.set_asGlyph(1);
	K_value_selection_u_line3.set_asGlyph(3);
     7fa:	6e e9       	ldi	r22, 0x9E	; 158
     7fc:	77 e0       	ldi	r23, 0x07	; 7
     7fe:	85 e3       	ldi	r24, 0x35	; 53
     800:	99 e0       	ldi	r25, 0x09	; 9
     802:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	85 e3       	ldi	r24, 0x35	; 53
     80a:	99 e0       	ldi	r25, 0x09	; 9
     80c:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

00000810 <_Z27gotoCalibrationOffsetScreenv>:
     810:	64 e3       	ldi	r22, 0x34	; 52
     812:	77 e0       	ldi	r23, 0x07	; 7
     814:	85 e3       	ldi	r24, 0x35	; 53
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	85 e3       	ldi	r24, 0x35	; 53
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

00000826 <_Z25gotoCalibrationGainScreenv>:
     826:	6a ec       	ldi	r22, 0xCA	; 202
     828:	76 e0       	ldi	r23, 0x06	; 6
     82a:	85 e3       	ldi	r24, 0x35	; 53
     82c:	99 e0       	ldi	r25, 0x09	; 9
     82e:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	85 e3       	ldi	r24, 0x35	; 53
     836:	99 e0       	ldi	r25, 0x09	; 9
     838:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

0000083c <_Z22gotoConfigureAdcScreenv>:
     83c:	66 ef       	ldi	r22, 0xF6	; 246
     83e:	75 e0       	ldi	r23, 0x05	; 5
     840:	85 e3       	ldi	r24, 0x35	; 53
     842:	99 e0       	ldi	r25, 0x09	; 9
     844:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	85 e3       	ldi	r24, 0x35	; 53
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

00000852 <_Z22gotoLiveReadingsScreenv>:
     852:	6d e5       	ldi	r22, 0x5D	; 93
     854:	75 e0       	ldi	r23, 0x05	; 5
     856:	85 e3       	ldi	r24, 0x35	; 53
     858:	99 e0       	ldi	r25, 0x09	; 9
     85a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	85 e3       	ldi	r24, 0x35	; 53
     862:	99 e0       	ldi	r25, 0x09	; 9
     864:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

00000868 <_Z25gotoCalibrationDoneScreenv>:
     868:	60 e6       	ldi	r22, 0x60	; 96
     86a:	76 e0       	ldi	r23, 0x06	; 6
     86c:	85 e3       	ldi	r24, 0x35	; 53
     86e:	99 e0       	ldi	r25, 0x09	; 9
     870:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	85 e3       	ldi	r24, 0x35	; 53
     878:	99 e0       	ldi	r25, 0x09	; 9
     87a:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

0000087e <_Z13gotoINAScreenv>:
     87e:	6d e9       	ldi	r22, 0x9D	; 157
     880:	74 e0       	ldi	r23, 0x04	; 4
     882:	85 e3       	ldi	r24, 0x35	; 53
     884:	99 e0       	ldi	r25, 0x09	; 9
     886:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	85 e3       	ldi	r24, 0x35	; 53
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>

00000894 <_ZN10LiquidLineC1Ehh>:
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	fc 01       	movw	r30, r24
     89a:	40 83       	st	Z, r20
     89c:	61 83       	std	Z+1, r22	; 0x01
     89e:	41 50       	subi	r20, 0x01	; 1
     8a0:	42 83       	std	Z+2, r20	; 0x02
     8a2:	61 50       	subi	r22, 0x01	; 1
     8a4:	63 83       	std	Z+3, r22	; 0x03
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	84 83       	std	Z+4, r24	; 0x04
     8aa:	16 82       	std	Z+6, r1	; 0x06
     8ac:	16 a2       	std	Z+38, r1	; 0x26
     8ae:	cf 01       	movw	r24, r30
     8b0:	47 96       	adiw	r24, 0x17	; 23
     8b2:	9f 01       	movw	r18, r30
     8b4:	2f 5d       	subi	r18, 0xDF	; 223
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	e9 01       	movw	r28, r18
     8ba:	dc 01       	movw	r26, r24
     8bc:	1d 92       	st	X+, r1
     8be:	1d 92       	st	X+, r1
     8c0:	19 92       	st	Y+, r1
     8c2:	a2 17       	cp	r26, r18
     8c4:	b3 07       	cpc	r27, r19
     8c6:	d1 f7       	brne	.-12     	; 0x8bc <_ZN10LiquidLineC1Ehh+0x28>
     8c8:	df 01       	movw	r26, r30
     8ca:	17 96       	adiw	r26, 0x07	; 7
     8cc:	1d 92       	st	X+, r1
     8ce:	1d 92       	st	X+, r1
     8d0:	a8 17       	cp	r26, r24
     8d2:	b9 07       	cpc	r27, r25
     8d4:	d9 f7       	brne	.-10     	; 0x8cc <_ZN10LiquidLineC1Ehh+0x38>
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	85 83       	std	Z+5, r24	; 0x05
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <_Z12putInProgmemv>:
	
}

void putInProgmem(void)
{
	welcome_line0.set_asProgmem(1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8e e0       	ldi	r24, 0x0E	; 14
     8e4:	99 e0       	ldi	r25, 0x09	; 9
     8e6:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line1.set_asProgmem(1);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	87 ee       	ldi	r24, 0xE7	; 231
     8ee:	98 e0       	ldi	r25, 0x08	; 8
     8f0:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line2.set_asProgmem(1);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	80 ec       	ldi	r24, 0xC0	; 192
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line3.set_asProgmem(1);
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	89 e9       	ldi	r24, 0x99	; 153
     902:	98 e0       	ldi	r25, 0x08	; 8
     904:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	main_line0.set_asProgmem(1);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	86 e5       	ldi	r24, 0x56	; 86
     90c:	98 e0       	ldi	r25, 0x08	; 8
     90e:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	main_line1.set_asProgmem(1);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	8f e2       	ldi	r24, 0x2F	; 47
     916:	98 e0       	ldi	r25, 0x08	; 8
     918:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	main_line2.set_asProgmem(1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	98 e0       	ldi	r25, 0x08	; 8
     922:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	main_line3.set_asProgmem(1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	81 ee       	ldi	r24, 0xE1	; 225
     92a:	97 e0       	ldi	r25, 0x07	; 7
     92c:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	main_line4.set_asProgmem(1);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	8a eb       	ldi	r24, 0xBA	; 186
     934:	97 e0       	ldi	r25, 0x07	; 7
     936:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrategain_line0.set_asProgmem(1);
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	8d e0       	ldi	r24, 0x0D	; 13
     93e:	97 e0       	ldi	r25, 0x07	; 7
     940:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrategain_line1.set_asProgmem(1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	86 ee       	ldi	r24, 0xE6	; 230
     948:	96 e0       	ldi	r25, 0x06	; 6
     94a:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrateoffset_line0.set_asProgmem(1);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	87 e7       	ldi	r24, 0x77	; 119
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrateoffset_line1.set_asProgmem(1);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	80 e5       	ldi	r24, 0x50	; 80
     95c:	97 e0       	ldi	r25, 0x07	; 7
     95e:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrationDone_line0.set_asProgmem(1);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	83 ea       	ldi	r24, 0xA3	; 163
     966:	96 e0       	ldi	r25, 0x06	; 6
     968:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	calibrationDone_line1.set_asProgmem(1);
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	8c e7       	ldi	r24, 0x7C	; 124
     970:	96 e0       	ldi	r25, 0x06	; 6
     972:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	configureAdc_line0.set_asProgmem(1);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	89 e3       	ldi	r24, 0x39	; 57
     97a:	96 e0       	ldi	r25, 0x06	; 6
     97c:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	configureAdc_line1.set_asProgmem(1);
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	82 e1       	ldi	r24, 0x12	; 18
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line0.set_asProgmem(1);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	87 ec       	ldi	r24, 0xC7	; 199
     98e:	95 e0       	ldi	r25, 0x05	; 5
     990:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line1.set_asProgmem(1);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	80 ea       	ldi	r24, 0xA0	; 160
     998:	95 e0       	ldi	r25, 0x05	; 5
     99a:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line2.set_asProgmem(1);
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	89 e7       	ldi	r24, 0x79	; 121
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line0.set_asProgmem(1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	8e e2       	ldi	r24, 0x2E	; 46
     9ac:	95 e0       	ldi	r25, 0x05	; 5
     9ae:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line1.set_asProgmem(1);
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	95 e0       	ldi	r25, 0x05	; 5
     9b8:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line2.set_asProgmem(1);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	80 ee       	ldi	r24, 0xE0	; 224
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line3.set_asProgmem(1);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	89 eb       	ldi	r24, 0xB9	; 185
     9ca:	94 e0       	ldi	r25, 0x04	; 4
     9cc:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	K_value_selection_c_line0.set_asProgmem(1);
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	86 e7       	ldi	r24, 0x76	; 118
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	K_value_selection_d_line0.set_asProgmem(1);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	8e eb       	ldi	r24, 0xBE	; 190
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>
	K_value_selection_u_line0.set_asProgmem(1);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <_ZN10LiquidLine13set_asProgmemEh>

000009ee <_Z15enableScrollingv>:
	
}
void enableScrolling(void)
{
     9ee:	cf 93       	push	r28
	welcome_Screen.set_displayLineCount(LCD_ROWS);
     9f0:	c0 91 29 02 	lds	r28, 0x0229	; 0x800229 <LCD_ROWS>
     9f4:	6c 2f       	mov	r22, r28
     9f6:	8d e7       	ldi	r24, 0x7D	; 125
     9f8:	98 e0       	ldi	r25, 0x08	; 8
     9fa:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	main_Screen.set_displayLineCount(LCD_ROWS);
     9fe:	6c 2f       	mov	r22, r28
     a00:	8e e9       	ldi	r24, 0x9E	; 158
     a02:	97 e0       	ldi	r25, 0x07	; 7
     a04:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrateGain_Screen.set_displayLineCount(LCD_ROWS);
     a08:	6c 2f       	mov	r22, r28
     a0a:	8a ec       	ldi	r24, 0xCA	; 202
     a0c:	96 e0       	ldi	r25, 0x06	; 6
     a0e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrateOffset_Screen.set_displayLineCount(LCD_ROWS);
     a12:	6c 2f       	mov	r22, r28
     a14:	84 e3       	ldi	r24, 0x34	; 52
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrationDone_Screen.set_displayLineCount(LCD_ROWS);
     a1c:	6c 2f       	mov	r22, r28
     a1e:	80 e6       	ldi	r24, 0x60	; 96
     a20:	96 e0       	ldi	r25, 0x06	; 6
     a22:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	liveRead_Screen.set_displayLineCount(LCD_ROWS);
     a26:	6c 2f       	mov	r22, r28
     a28:	8d e5       	ldi	r24, 0x5D	; 93
     a2a:	95 e0       	ldi	r25, 0x05	; 5
     a2c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>
	INA_Screen.set_displayLineCount(LCD_ROWS);
     a30:	6c 2f       	mov	r22, r28
     a32:	8d e9       	ldi	r24, 0x9D	; 157
     a34:	94 e0       	ldi	r25, 0x04	; 4
}
     a36:	cf 91       	pop	r28
	main_Screen.set_displayLineCount(LCD_ROWS);
	calibrateGain_Screen.set_displayLineCount(LCD_ROWS);
	calibrateOffset_Screen.set_displayLineCount(LCD_ROWS);
	calibrationDone_Screen.set_displayLineCount(LCD_ROWS);
	liveRead_Screen.set_displayLineCount(LCD_ROWS);
	INA_Screen.set_displayLineCount(LCD_ROWS);
     a38:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <_ZN12LiquidScreen20set_displayLineCountEh>

00000a3c <_Z20attachFunctionToLinev>:
}

void attachFunctionToLine(void)
{	
	welcome_line0.attach_function(1,gotoMainScreen);
     a3c:	4d ef       	ldi	r20, 0xFD	; 253
     a3e:	53 e0       	ldi	r21, 0x03	; 3
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	8e e0       	ldi	r24, 0x0E	; 14
     a44:	99 e0       	ldi	r25, 0x09	; 9
     a46:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line1.attach_function(1,gotoMainScreen);
     a4a:	4d ef       	ldi	r20, 0xFD	; 253
     a4c:	53 e0       	ldi	r21, 0x03	; 3
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	87 ee       	ldi	r24, 0xE7	; 231
     a52:	98 e0       	ldi	r25, 0x08	; 8
     a54:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line2.attach_function(1,gotoMainScreen);
     a58:	4d ef       	ldi	r20, 0xFD	; 253
     a5a:	53 e0       	ldi	r21, 0x03	; 3
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	80 ec       	ldi	r24, 0xC0	; 192
     a60:	98 e0       	ldi	r25, 0x08	; 8
     a62:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line3.attach_function(1,gotoMainScreen);
     a66:	4d ef       	ldi	r20, 0xFD	; 253
     a68:	53 e0       	ldi	r21, 0x03	; 3
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	89 e9       	ldi	r24, 0x99	; 153
     a6e:	98 e0       	ldi	r25, 0x08	; 8
     a70:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	main_line0.attach_function(1,emptyfunction);
     a74:	48 ec       	ldi	r20, 0xC8	; 200
     a76:	58 e0       	ldi	r21, 0x08	; 8
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	86 e5       	ldi	r24, 0x56	; 86
     a7c:	98 e0       	ldi	r25, 0x08	; 8
     a7e:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line1.attach_function(1,gotoCalibrationOffsetScreen); //go to calibration menu
     a82:	48 e0       	ldi	r20, 0x08	; 8
     a84:	54 e0       	ldi	r21, 0x04	; 4
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	8f e2       	ldi	r24, 0x2F	; 47
     a8a:	98 e0       	ldi	r25, 0x08	; 8
     a8c:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line2.attach_function(1,gotoConfigureAdcScreen);
     a90:	4e e1       	ldi	r20, 0x1E	; 30
     a92:	54 e0       	ldi	r21, 0x04	; 4
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	98 e0       	ldi	r25, 0x08	; 8
     a9a:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line3.attach_function(1,gotoLiveReadingsScreen);
     a9e:	49 e2       	ldi	r20, 0x29	; 41
     aa0:	54 e0       	ldi	r21, 0x04	; 4
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	81 ee       	ldi	r24, 0xE1	; 225
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line4.attach_function(1, gotoINAScreen);
     aac:	4f e3       	ldi	r20, 0x3F	; 63
     aae:	54 e0       	ldi	r21, 0x04	; 4
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	8a eb       	ldi	r24, 0xBA	; 186
     ab4:	97 e0       	ldi	r25, 0x07	; 7
     ab6:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrateoffset_line0.attach_function(1,emptyfunction);
     aba:	48 ec       	ldi	r20, 0xC8	; 200
     abc:	58 e0       	ldi	r21, 0x08	; 8
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	87 e7       	ldi	r24, 0x77	; 119
     ac2:	97 e0       	ldi	r25, 0x07	; 7
     ac4:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrateoffset_line1.attach_function(1,gotoCalibrationGainScreen); //After calibrating offset, we go to gain screen
     ac8:	43 e1       	ldi	r20, 0x13	; 19
     aca:	54 e0       	ldi	r21, 0x04	; 4
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	80 e5       	ldi	r24, 0x50	; 80
     ad0:	97 e0       	ldi	r25, 0x07	; 7
     ad2:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrateoffset_line1.attach_function(2,calibrateOffsetADC);
     ad6:	49 ec       	ldi	r20, 0xC9	; 201
     ad8:	58 e0       	ldi	r21, 0x08	; 8
     ada:	62 e0       	ldi	r22, 0x02	; 2
     adc:	80 e5       	ldi	r24, 0x50	; 80
     ade:	97 e0       	ldi	r25, 0x07	; 7
     ae0:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrategain_line0.attach_function(1,emptyfunction);
     ae4:	48 ec       	ldi	r20, 0xC8	; 200
     ae6:	58 e0       	ldi	r21, 0x08	; 8
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	8d e0       	ldi	r24, 0x0D	; 13
     aec:	97 e0       	ldi	r25, 0x07	; 7
     aee:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrategain_line1.attach_function(1, gotoCalibrationDoneScreen); //Show the calibration done screen
     af2:	44 e3       	ldi	r20, 0x34	; 52
     af4:	54 e0       	ldi	r21, 0x04	; 4
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	86 ee       	ldi	r24, 0xE6	; 230
     afa:	96 e0       	ldi	r25, 0x06	; 6
     afc:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrategain_line1.attach_function(2, calibrateGainADC); //Does the calibration
     b00:	4c ec       	ldi	r20, 0xCC	; 204
     b02:	58 e0       	ldi	r21, 0x08	; 8
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	86 ee       	ldi	r24, 0xE6	; 230
     b08:	96 e0       	ldi	r25, 0x06	; 6
     b0a:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrationDone_line0.attach_function(1,emptyfunction);
     b0e:	48 ec       	ldi	r20, 0xC8	; 200
     b10:	58 e0       	ldi	r21, 0x08	; 8
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	83 ea       	ldi	r24, 0xA3	; 163
     b16:	96 e0       	ldi	r25, 0x06	; 6
     b18:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrationDone_line1.attach_function(1,gotoMainScreen); //return to main menu
     b1c:	4d ef       	ldi	r20, 0xFD	; 253
     b1e:	53 e0       	ldi	r21, 0x03	; 3
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	8c e7       	ldi	r24, 0x7C	; 124
     b24:	96 e0       	ldi	r25, 0x06	; 6
     b26:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	configureAdc_line0.attach_function(1,emptyfunction);
     b2a:	48 ec       	ldi	r20, 0xC8	; 200
     b2c:	58 e0       	ldi	r21, 0x08	; 8
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	89 e3       	ldi	r24, 0x39	; 57
     b32:	96 e0       	ldi	r25, 0x06	; 6
     b34:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	configureAdc_line1.attach_function(1,gotoMainScreen);
     b38:	4d ef       	ldi	r20, 0xFD	; 253
     b3a:	53 e0       	ldi	r21, 0x03	; 3
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	82 e1       	ldi	r24, 0x12	; 18
     b40:	96 e0       	ldi	r25, 0x06	; 6
     b42:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	liveRead_line0.attach_function(1,emptyfunction);
     b46:	48 ec       	ldi	r20, 0xC8	; 200
     b48:	58 e0       	ldi	r21, 0x08	; 8
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	87 ec       	ldi	r24, 0xC7	; 199
     b4e:	95 e0       	ldi	r25, 0x05	; 5
     b50:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	liveRead_line1.attach_function(1,emptyfunction);
     b54:	48 ec       	ldi	r20, 0xC8	; 200
     b56:	58 e0       	ldi	r21, 0x08	; 8
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	80 ea       	ldi	r24, 0xA0	; 160
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	liveRead_line2.attach_function(1,gotoMainScreen); //Exit live readings, go back to main menu
     b62:	4d ef       	ldi	r20, 0xFD	; 253
     b64:	53 e0       	ldi	r21, 0x03	; 3
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	89 e7       	ldi	r24, 0x79	; 121
     b6a:	95 e0       	ldi	r25, 0x05	; 5
     b6c:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	INA_line0.attach_function(1,emptyfunction);
     b70:	48 ec       	ldi	r20, 0xC8	; 200
     b72:	58 e0       	ldi	r21, 0x08	; 8
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	8e e2       	ldi	r24, 0x2E	; 46
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line1.attach_function(1,emptyfunction);
     b7e:	48 ec       	ldi	r20, 0xC8	; 200
     b80:	58 e0       	ldi	r21, 0x08	; 8
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	95 e0       	ldi	r25, 0x05	; 5
     b88:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line2.attach_function(1,emptyfunction);
     b8c:	48 ec       	ldi	r20, 0xC8	; 200
     b8e:	58 e0       	ldi	r21, 0x08	; 8
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	80 ee       	ldi	r24, 0xE0	; 224
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	0e 94 19 1c 	call	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line3.attach_function(1,gotoMainScreen);//return to main menu
     b9a:	4d ef       	ldi	r20, 0xFD	; 253
     b9c:	53 e0       	ldi	r21, 0x03	; 3
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	89 eb       	ldi	r24, 0xB9	; 185
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <_ZN10LiquidLine15attach_functionEhPFvvE>

00000ba8 <_ZN10LiquidLineC1IKhEEhhRT_>:
  @param column - the column at which the line starts
  @param row - the row at which the line is printed
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24
     bb6:	79 01       	movw	r14, r18
    : LiquidLine(column, row) {
     bb8:	6d de       	rcall	.-806    	; 0x894 <_ZN10LiquidLineC1Ehh>
  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
    print_me(reinterpret_cast<uintptr_t>(this));
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 18 1c 	call	0x3830	; 0x3830 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     bc0:	0e 81       	ldd	r16, Y+6	; 0x06
     bc2:	05 30       	cpi	r16, 0x05	; 5
     bc4:	98 f4       	brcc	.+38     	; 0xbec <_ZN10LiquidLineC1IKhEEhhRT_+0x44>
      _variable[_variableCount] = (void*)&variable;
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	f8 01       	movw	r30, r16
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	ec 0f       	add	r30, r28
     bd0:	fd 1f       	adc	r31, r29
     bd2:	f0 8e       	std	Z+24, r15	; 0x18
     bd4:	e7 8a       	std	Z+23, r14	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     bd6:	f7 01       	movw	r30, r14
     bd8:	80 81       	ld	r24, Z
     bda:	0e 94 65 20 	call	0x40ca	; 0x40ca <_Z13recognizeTypeh>
     bde:	fe 01       	movw	r30, r28
     be0:	e0 0f       	add	r30, r16
     be2:	f1 1f       	adc	r31, r17
     be4:	81 a3       	std	Z+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8e 83       	std	Y+6, r24	; 0x06
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
    : LiquidLine(column, row) {
    add_variable(variableA);
  }
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	08 95       	ret

00000bfa <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>:

  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	8c 01       	movw	r16, r24
     c08:	7b 01       	movw	r14, r22
    print_me(reinterpret_cast<uintptr_t>(this));
     c0a:	0e 94 18 1c 	call	0x3830	; 0x3830 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     c0e:	f8 01       	movw	r30, r16
     c10:	c6 81       	ldd	r28, Z+6	; 0x06
     c12:	c5 30       	cpi	r28, 0x05	; 5
     c14:	a0 f4       	brcc	.+40     	; 0xc3e <_ZN10LiquidLine12add_variableIA6_KcEEbRT_+0x44>
      _variable[_variableCount] = (void*)&variable;
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	fe 01       	movw	r30, r28
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e0 0f       	add	r30, r16
     c20:	f1 1f       	adc	r31, r17
     c22:	f0 8e       	std	Z+24, r15	; 0x18
     c24:	e7 8a       	std	Z+23, r14	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     c26:	c7 01       	movw	r24, r14
     c28:	0e 94 63 20 	call	0x40c6	; 0x40c6 <_Z13recognizeTypePKc>
     c2c:	c0 0f       	add	r28, r16
     c2e:	d1 1f       	adc	r29, r17
     c30:	89 a3       	std	Y+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     c32:	f8 01       	movw	r30, r16
     c34:	86 81       	ldd	r24, Z+6	; 0x06
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	86 83       	std	Z+6, r24	; 0x06
      return true;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <_ZN10LiquidLine12add_variableIA6_KcEEbRT_+0x46>
      if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
        DEBUG(reinterpret_cast<uintptr_t>(variable));
      }
#   endif
    DEBUGLN(F(" failed, edit LiquidMenu_config.h to allow for more variables"));
    return false;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
  }
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>:
  @param column - the column at which the line starts
  @param row - the row at which the line is printed
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	89 01       	movw	r16, r18
    : LiquidLine(column, row) {
     c5a:	1c de       	rcall	.-968    	; 0x894 <_ZN10LiquidLineC1Ehh>
    add_variable(variableA);
     c5c:	b8 01       	movw	r22, r16
     c5e:	ce 01       	movw	r24, r28
  }
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
    : LiquidLine(column, row) {
    add_variable(variableA);
     c66:	0f 91       	pop	r16
     c68:	c8 cf       	rjmp	.-112    	; 0xbfa <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>

00000c6a <_ZN10LiquidLineC1IA5_KcfEEhhRT_RT0_>:
  @param row - the row at which the line is printed
  @param &variableA - variable/constant to be printed
  @param &variableB - variable/constant to be printed
  */
  template <typename A, typename B>
  LiquidLine(uint8_t column, uint8_t row,
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
             A &variableA, B &variableB)
    : LiquidLine(column, row, variableA) {
     c78:	ea df       	rcall	.-44     	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
    print_me(reinterpret_cast<uintptr_t>(this));
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 18 1c 	call	0x3830	; 0x3830 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	b8 f4       	brcc	.+46     	; 0xcb4 <_ZN10LiquidLineC1IA5_KcfEEhhRT_RT0_+0x4a>
      _variable[_variableCount] = (void*)&variable;
     c86:	e8 2e       	mov	r14, r24
     c88:	f1 2c       	mov	r15, r1
     c8a:	f7 01       	movw	r30, r14
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	ec 0f       	add	r30, r28
     c92:	fd 1f       	adc	r31, r29
     c94:	10 8f       	std	Z+24, r17	; 0x18
     c96:	07 8b       	std	Z+23, r16	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     c98:	f8 01       	movw	r30, r16
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_Z13recognizeTypef>
     ca6:	fe 01       	movw	r30, r28
     ca8:	ee 0d       	add	r30, r14
     caa:	ff 1d       	adc	r31, r15
     cac:	81 a3       	std	Z+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	8e 83       	std	Y+6, r24	; 0x06
  template <typename A, typename B>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB)
    : LiquidLine(column, row, variableA) {
    add_variable(variableB);
  }
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_>:
  @param &variableA - variable/constant to be printed
  @param &variableB - variable/constant to be printed
  @param &variableC - variable/constant to be printed
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
  @param &variableB - variable/constant to be printed
  */
  template <typename A, typename B>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB)
    : LiquidLine(column, row, variableA) {
     cd4:	bc df       	rcall	.-136    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
    print_me(reinterpret_cast<uintptr_t>(this));
     cd6:	ce 01       	movw	r24, r28
     cd8:	0e 94 18 1c 	call	0x3830	; 0x3830 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	85 30       	cpi	r24, 0x05	; 5
     ce0:	b8 f4       	brcc	.+46     	; 0xd10 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_+0x4e>
      _variable[_variableCount] = (void*)&variable;
     ce2:	c8 2e       	mov	r12, r24
     ce4:	d1 2c       	mov	r13, r1
     ce6:	f6 01       	movw	r30, r12
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ec 0f       	add	r30, r28
     cee:	fd 1f       	adc	r31, r29
     cf0:	10 8f       	std	Z+24, r17	; 0x18
     cf2:	07 8b       	std	Z+23, r16	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     cf4:	f8 01       	movw	r30, r16
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0e 94 67 20 	call	0x40ce	; 0x40ce <_Z13recognizeTypem>
     d02:	fe 01       	movw	r30, r28
     d04:	ec 0d       	add	r30, r12
     d06:	fd 1d       	adc	r31, r13
     d08:	81 a3       	std	Z+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     d0a:	8e 81       	ldd	r24, Y+6	; 0x06
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	8e 83       	std	Y+6, r24	; 0x06
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB, C &variableC)
    : LiquidLine(column, row, variableA, variableB) {
    add_variable(variableC);
     d10:	b7 01       	movw	r22, r14
     d12:	ce 01       	movw	r24, r28
  }
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB, C &variableC)
    : LiquidLine(column, row, variableA, variableB) {
    add_variable(variableC);
     d22:	cf 90       	pop	r12
     d24:	6a cf       	rjmp	.-300    	; 0xbfa <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>

00000d26 <_GLOBAL__sub_I_welcome_line0>:

void gotoINAScreen(void)
{
	menu.change_screen(INA_Screen);
	menu.switch_focus(true);
}
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
/////////////Welcome Screen////////////////////
const char welcome_text0[] PROGMEM = "  TEST PROGRAM";
const char welcome_text1[] PROGMEM = "ADC CALIBRATION";
const char welcome_text2[] PROGMEM = "Build on :";
const char welcome_text3[] PROGMEM =  __TIME__;
LiquidLine welcome_line0(1,0,welcome_text0);
     d2e:	25 e4       	ldi	r18, 0x45	; 69
     d30:	32 e0       	ldi	r19, 0x02	; 2
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	8e e0       	ldi	r24, 0x0E	; 14
     d38:	99 e0       	ldi	r25, 0x09	; 9
     d3a:	89 df       	rcall	.-238    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line1(1,1,welcome_text1);
     d3c:	25 e3       	ldi	r18, 0x35	; 53
     d3e:	32 e0       	ldi	r19, 0x02	; 2
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	87 ee       	ldi	r24, 0xE7	; 231
     d46:	98 e0       	ldi	r25, 0x08	; 8
     d48:	82 df       	rcall	.-252    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line2(1,2,welcome_text2);
     d4a:	2a e2       	ldi	r18, 0x2A	; 42
     d4c:	32 e0       	ldi	r19, 0x02	; 2
     d4e:	42 e0       	ldi	r20, 0x02	; 2
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	98 e0       	ldi	r25, 0x08	; 8
     d56:	7b df       	rcall	.-266    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line3(1,3,welcome_text3);
     d58:	21 e2       	ldi	r18, 0x21	; 33
     d5a:	32 e0       	ldi	r19, 0x02	; 2
     d5c:	43 e0       	ldi	r20, 0x03	; 3
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	89 e9       	ldi	r24, 0x99	; 153
     d62:	98 e0       	ldi	r25, 0x08	; 8
     d64:	74 df       	rcall	.-280    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidScreen welcome_Screen(welcome_line0, welcome_line1, welcome_line2, welcome_line3);
     d66:	09 e9       	ldi	r16, 0x99	; 153
     d68:	18 e0       	ldi	r17, 0x08	; 8
     d6a:	20 ec       	ldi	r18, 0xC0	; 192
     d6c:	38 e0       	ldi	r19, 0x08	; 8
     d6e:	47 ee       	ldi	r20, 0xE7	; 231
     d70:	58 e0       	ldi	r21, 0x08	; 8
     d72:	6e e0       	ldi	r22, 0x0E	; 14
     d74:	79 e0       	ldi	r23, 0x09	; 9
     d76:	8d e7       	ldi	r24, 0x7D	; 125
     d78:	98 e0       	ldi	r25, 0x08	; 8
     d7a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
const char main_text0[] PROGMEM = "    MAIN MENU";
const char main_text1[] PROGMEM = "1: CALIBRATION ADC";
const char main_text2[] PROGMEM = "2: CONFIGURE ADC";
const char main_text3[] PROGMEM = "3: ADC READINGS";
const char main_text4[] PROGMEM = "4: CURRENT READINGS";
LiquidLine main_line0(1,0,main_text0);
     d7e:	23 e1       	ldi	r18, 0x13	; 19
     d80:	32 e0       	ldi	r19, 0x02	; 2
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	86 e5       	ldi	r24, 0x56	; 86
     d88:	98 e0       	ldi	r25, 0x08	; 8
     d8a:	61 df       	rcall	.-318    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line1(1,1,main_text1);
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	32 e0       	ldi	r19, 0x02	; 2
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	8f e2       	ldi	r24, 0x2F	; 47
     d96:	98 e0       	ldi	r25, 0x08	; 8
     d98:	5a df       	rcall	.-332    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line2(1,2,main_text2);
     d9a:	2f ee       	ldi	r18, 0xEF	; 239
     d9c:	31 e0       	ldi	r19, 0x01	; 1
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	88 e0       	ldi	r24, 0x08	; 8
     da4:	98 e0       	ldi	r25, 0x08	; 8
     da6:	53 df       	rcall	.-346    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line3(1,3,main_text3);
     da8:	2f ed       	ldi	r18, 0xDF	; 223
     daa:	31 e0       	ldi	r19, 0x01	; 1
     dac:	43 e0       	ldi	r20, 0x03	; 3
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	81 ee       	ldi	r24, 0xE1	; 225
     db2:	97 e0       	ldi	r25, 0x07	; 7
     db4:	4c df       	rcall	.-360    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line4(1,4,main_text4);
     db6:	2b ec       	ldi	r18, 0xCB	; 203
     db8:	31 e0       	ldi	r19, 0x01	; 1
     dba:	44 e0       	ldi	r20, 0x04	; 4
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	8a eb       	ldi	r24, 0xBA	; 186
     dc0:	97 e0       	ldi	r25, 0x07	; 7
     dc2:	45 df       	rcall	.-374    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     dc4:	8a eb       	ldi	r24, 0xBA	; 186
LiquidScreen main_Screen(main_line0,main_line1,main_line2,main_line3, main_line4);
     dc6:	e8 2e       	mov	r14, r24
     dc8:	87 e0       	ldi	r24, 0x07	; 7
     dca:	f8 2e       	mov	r15, r24
     dcc:	01 ee       	ldi	r16, 0xE1	; 225
     dce:	17 e0       	ldi	r17, 0x07	; 7
     dd0:	28 e0       	ldi	r18, 0x08	; 8
     dd2:	38 e0       	ldi	r19, 0x08	; 8
     dd4:	4f e2       	ldi	r20, 0x2F	; 47
     dd6:	58 e0       	ldi	r21, 0x08	; 8
     dd8:	66 e5       	ldi	r22, 0x56	; 86
     dda:	78 e0       	ldi	r23, 0x08	; 8
     ddc:	8e e9       	ldi	r24, 0x9E	; 158
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_S1_>

//CalibrateOffset

const char calibrateOffsetText0[] PROGMEM = "Set 0V on V1";
const char calibrateOffsetText1[] PROGMEM = "Click here when RDY";
LiquidLine calibrateoffset_line0(1,0,calibrateOffsetText0);
     de4:	2e eb       	ldi	r18, 0xBE	; 190
     de6:	31 e0       	ldi	r19, 0x01	; 1
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	87 e7       	ldi	r24, 0x77	; 119
     dee:	97 e0       	ldi	r25, 0x07	; 7
     df0:	2e df       	rcall	.-420    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrateoffset_line1(1,1,calibrateOffsetText1);
     df2:	2a ea       	ldi	r18, 0xAA	; 170
     df4:	31 e0       	ldi	r19, 0x01	; 1
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	80 e5       	ldi	r24, 0x50	; 80
     dfc:	97 e0       	ldi	r25, 0x07	; 7
     dfe:	27 df       	rcall	.-434    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     e00:	40 e5       	ldi	r20, 0x50	; 80
LiquidScreen calibrateOffset_Screen(calibrateoffset_line0,calibrateoffset_line1);
     e02:	57 e0       	ldi	r21, 0x07	; 7
     e04:	67 e7       	ldi	r22, 0x77	; 119
     e06:	77 e0       	ldi	r23, 0x07	; 7
     e08:	84 e3       	ldi	r24, 0x34	; 52
     e0a:	97 e0       	ldi	r25, 0x07	; 7
     e0c:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>

//CalibrateGain

const char calibrateGainText0[] PROGMEM = "Set 24V on V1";
const char calibrateGainText1[] PROGMEM = "Click here when RDY";
LiquidLine calibrategain_line0(1,0, calibrateGainText0);
     e10:	2c e9       	ldi	r18, 0x9C	; 156
     e12:	31 e0       	ldi	r19, 0x01	; 1
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	8d e0       	ldi	r24, 0x0D	; 13
     e1a:	97 e0       	ldi	r25, 0x07	; 7
     e1c:	18 df       	rcall	.-464    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrategain_line1(1,1, calibrateGainText1);
     e1e:	28 e8       	ldi	r18, 0x88	; 136
     e20:	31 e0       	ldi	r19, 0x01	; 1
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	86 ee       	ldi	r24, 0xE6	; 230
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	11 df       	rcall	.-478    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     e2c:	46 ee       	ldi	r20, 0xE6	; 230
LiquidScreen calibrateGain_Screen(calibrategain_line0,calibrategain_line1);
     e2e:	56 e0       	ldi	r21, 0x06	; 6
     e30:	6d e0       	ldi	r22, 0x0D	; 13
     e32:	77 e0       	ldi	r23, 0x07	; 7
     e34:	8a ec       	ldi	r24, 0xCA	; 202
     e36:	96 e0       	ldi	r25, 0x06	; 6
     e38:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>


//CalibrateDone
const char calibrationDoneText0[] PROGMEM = "Calibration Done !";
const char calibrationDoneText1[] PROGMEM = "Exit";
LiquidLine calibrationDone_line0(1,0, calibrationDoneText0);
     e3c:	25 e7       	ldi	r18, 0x75	; 117
     e3e:	31 e0       	ldi	r19, 0x01	; 1
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	83 ea       	ldi	r24, 0xA3	; 163
     e46:	96 e0       	ldi	r25, 0x06	; 6
     e48:	02 df       	rcall	.-508    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrationDone_line1(1,1, calibrationDoneText1);
     e4a:	20 e7       	ldi	r18, 0x70	; 112
     e4c:	31 e0       	ldi	r19, 0x01	; 1
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	8c e7       	ldi	r24, 0x7C	; 124
     e54:	96 e0       	ldi	r25, 0x06	; 6
     e56:	fb de       	rcall	.-522    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidScreen calibrationDone_Screen(calibrationDone_line0, calibrationDone_line1);
     e58:	4c e7       	ldi	r20, 0x7C	; 124
     e5a:	56 e0       	ldi	r21, 0x06	; 6
     e5c:	63 ea       	ldi	r22, 0xA3	; 163
     e5e:	76 e0       	ldi	r23, 0x06	; 6
     e60:	80 e6       	ldi	r24, 0x60	; 96
     e62:	96 e0       	ldi	r25, 0x06	; 6
     e64:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>


/////////////ADC CONFIGURATION////////////////////
const char configureAdcText0[] PROGMEM = "Nothing yet :(";
const char configureAdcText1[] PROGMEM = "Exit";
LiquidLine configureAdc_line0(1,0,configureAdcText0);
     e68:	21 e6       	ldi	r18, 0x61	; 97
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	89 e3       	ldi	r24, 0x39	; 57
     e72:	96 e0       	ldi	r25, 0x06	; 6
     e74:	ec de       	rcall	.-552    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine configureAdc_line1(1,1,configureAdcText1);
     e76:	2c e5       	ldi	r18, 0x5C	; 92
     e78:	31 e0       	ldi	r19, 0x01	; 1
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	82 e1       	ldi	r24, 0x12	; 18
     e80:	96 e0       	ldi	r25, 0x06	; 6
     e82:	e5 de       	rcall	.-566    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     e84:	42 e1       	ldi	r20, 0x12	; 18
LiquidScreen configureAdc_Screen(configureAdc_line0, configureAdc_line1);
     e86:	56 e0       	ldi	r21, 0x06	; 6
     e88:	69 e3       	ldi	r22, 0x39	; 57
     e8a:	76 e0       	ldi	r23, 0x06	; 6
     e8c:	86 ef       	ldi	r24, 0xF6	; 246
     e8e:	95 e0       	ldi	r25, 0x05	; 5
     e90:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>
uint32_t V2Value = 0;
const char liveReadText0[] PROGMEM = "V1 = ";
const char liveReadText1[] PROGMEM = "V2 = ";
const char liveReadText2[] PROGMEM = "EXIT";
//const char liveReadText3[] PROGMEM;
LiquidLine liveRead_line0(1,0,liveReadText0, V1Value, "mV");
     e94:	96 e3       	ldi	r25, 0x36	; 54
     e96:	e9 2e       	mov	r14, r25
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	f9 2e       	mov	r15, r25
     e9c:	02 ef       	ldi	r16, 0xF2	; 242
     e9e:	15 e0       	ldi	r17, 0x05	; 5
     ea0:	26 e5       	ldi	r18, 0x56	; 86
     ea2:	31 e0       	ldi	r19, 0x01	; 1
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	87 ec       	ldi	r24, 0xC7	; 199
     eaa:	95 e0       	ldi	r25, 0x05	; 5
LiquidLine liveRead_line1(1,1,liveReadText1, V2Value, "mV");
     eac:	0a df       	rcall	.-492    	; 0xcc2 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_>
     eae:	0e ee       	ldi	r16, 0xEE	; 238
     eb0:	15 e0       	ldi	r17, 0x05	; 5
     eb2:	20 e5       	ldi	r18, 0x50	; 80
     eb4:	31 e0       	ldi	r19, 0x01	; 1
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	80 ea       	ldi	r24, 0xA0	; 160
     ebc:	95 e0       	ldi	r25, 0x05	; 5
     ebe:	01 df       	rcall	.-510    	; 0xcc2 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_>
LiquidLine liveRead_line2(1,2, liveReadText2);
     ec0:	2b e4       	ldi	r18, 0x4B	; 75
     ec2:	31 e0       	ldi	r19, 0x01	; 1
     ec4:	42 e0       	ldi	r20, 0x02	; 2
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	89 e7       	ldi	r24, 0x79	; 121
     eca:	95 e0       	ldi	r25, 0x05	; 5
     ecc:	c0 de       	rcall	.-640    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidScreen liveRead_Screen(liveRead_line0,liveRead_line1,liveRead_line2);
     ece:	29 e7       	ldi	r18, 0x79	; 121
     ed0:	35 e0       	ldi	r19, 0x05	; 5
     ed2:	40 ea       	ldi	r20, 0xA0	; 160
     ed4:	55 e0       	ldi	r21, 0x05	; 5
     ed6:	67 ec       	ldi	r22, 0xC7	; 199
     ed8:	75 e0       	ldi	r23, 0x05	; 5
     eda:	8d e5       	ldi	r24, 0x5D	; 93
     edc:	95 e0       	ldi	r25, 0x05	; 5
     ede:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>
uint32_t VBusValue = 0;
const char INA_text0[] PROGMEM = "Current readings";
const char INA_text1[] PROGMEM = "I2 : ";
const char INA_text2[] PROGMEM = "I2 Bus :";
const char INA_text3[] PROGMEM = "EXIT";
LiquidLine INA_line0 (1,0, INA_text0);
     ee2:	2a e3       	ldi	r18, 0x3A	; 58
     ee4:	31 e0       	ldi	r19, 0x01	; 1
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	8e e2       	ldi	r24, 0x2E	; 46
     eec:	95 e0       	ldi	r25, 0x05	; 5
     eee:	af de       	rcall	.-674    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine INA_line1 (1,1, INA_text1, I1Value, "uA");
     ef0:	29 e3       	ldi	r18, 0x39	; 57
     ef2:	e2 2e       	mov	r14, r18
     ef4:	22 e0       	ldi	r18, 0x02	; 2
     ef6:	f2 2e       	mov	r15, r18
     ef8:	09 e5       	ldi	r16, 0x59	; 89
     efa:	15 e0       	ldi	r17, 0x05	; 5
     efc:	24 e3       	ldi	r18, 0x34	; 52
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	87 e0       	ldi	r24, 0x07	; 7
     f06:	95 e0       	ldi	r25, 0x05	; 5
LiquidLine INA_line2 (1,2, INA_text2, VBusValue, "mV");
     f08:	dc de       	rcall	.-584    	; 0xcc2 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_>
     f0a:	36 e3       	ldi	r19, 0x36	; 54
     f0c:	e3 2e       	mov	r14, r19
     f0e:	32 e0       	ldi	r19, 0x02	; 2
     f10:	f3 2e       	mov	r15, r19
     f12:	05 e5       	ldi	r16, 0x55	; 85
     f14:	15 e0       	ldi	r17, 0x05	; 5
     f16:	2b e2       	ldi	r18, 0x2B	; 43
     f18:	31 e0       	ldi	r19, 0x01	; 1
     f1a:	42 e0       	ldi	r20, 0x02	; 2
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	80 ee       	ldi	r24, 0xE0	; 224
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	cf de       	rcall	.-610    	; 0xcc2 <_ZN10LiquidLineC1IA9_KcmA3_S1_EEhhRT_RT0_RT1_>
LiquidLine INA_line3 (1,3, INA_text3);
     f24:	26 e2       	ldi	r18, 0x26	; 38
     f26:	31 e0       	ldi	r19, 0x01	; 1
     f28:	43 e0       	ldi	r20, 0x03	; 3
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	89 eb       	ldi	r24, 0xB9	; 185
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	8e de       	rcall	.-740    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidScreen INA_Screen (INA_line0,INA_line1,INA_line2,INA_line3);
     f32:	09 eb       	ldi	r16, 0xB9	; 185
     f34:	14 e0       	ldi	r17, 0x04	; 4
     f36:	20 ee       	ldi	r18, 0xE0	; 224
     f38:	34 e0       	ldi	r19, 0x04	; 4
     f3a:	47 e0       	ldi	r20, 0x07	; 7
     f3c:	55 e0       	ldi	r21, 0x05	; 5
     f3e:	6e e2       	ldi	r22, 0x2E	; 46
     f40:	75 e0       	ldi	r23, 0x05	; 5
     f42:	8d e9       	ldi	r24, 0x9D	; 157
     f44:	94 e0       	ldi	r25, 0x04	; 4


//////////////NTC///////////////
//////////For multiple of 100///////
const char K_value_selection_c_text0[] PROGMEM = "K value ?";
LiquidLine K_value_selection_c_line0(1,0,K_value_selection_c_text0);
     f46:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
     f4a:	2c e1       	ldi	r18, 0x1C	; 28
     f4c:	31 e0       	ldi	r19, 0x01	; 1
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	86 e7       	ldi	r24, 0x76	; 118
LiquidLine K_value_selection_c_line1(5,1,upArrowIndex); //Above the multiple of 100
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	7b de       	rcall	.-778    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     f58:	22 e2       	ldi	r18, 0x22	; 34
     f5a:	32 e0       	ldi	r19, 0x02	; 2
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	65 e0       	ldi	r22, 0x05	; 5
     f60:	8f e4       	ldi	r24, 0x4F	; 79
     f62:	94 e0       	ldi	r25, 0x04	; 4
LiquidLine K_value_selection_c_line2(1,2,"K = ", K_FACTOR);
     f64:	21 de       	rcall	.-958    	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
     f66:	08 e1       	ldi	r16, 0x18	; 24
     f68:	12 e0       	ldi	r17, 0x02	; 2
     f6a:	2c e3       	ldi	r18, 0x3C	; 60
     f6c:	32 e0       	ldi	r19, 0x02	; 2
     f6e:	42 e0       	ldi	r20, 0x02	; 2
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	88 e2       	ldi	r24, 0x28	; 40
     f74:	94 e0       	ldi	r25, 0x04	; 4
LiquidLine K_value_selection_c_line3(5,3,downArrowIndex);
     f76:	79 de       	rcall	.-782    	; 0xc6a <_ZN10LiquidLineC1IA5_KcfEEhhRT_RT0_>
     f78:	21 e2       	ldi	r18, 0x21	; 33
     f7a:	32 e0       	ldi	r19, 0x02	; 2
     f7c:	43 e0       	ldi	r20, 0x03	; 3
     f7e:	65 e0       	ldi	r22, 0x05	; 5
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	94 e0       	ldi	r25, 0x04	; 4
LiquidScreen K_value_selection_c_Screen(K_value_selection_c_line0,K_value_selection_c_line1,K_value_selection_c_line2,K_value_selection_c_line3);
     f84:	11 de       	rcall	.-990    	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
     f86:	01 e0       	ldi	r16, 0x01	; 1
     f88:	14 e0       	ldi	r17, 0x04	; 4
     f8a:	28 e2       	ldi	r18, 0x28	; 40
     f8c:	34 e0       	ldi	r19, 0x04	; 4
     f8e:	4f e4       	ldi	r20, 0x4F	; 79
     f90:	54 e0       	ldi	r21, 0x04	; 4
     f92:	66 e7       	ldi	r22, 0x76	; 118
     f94:	74 e0       	ldi	r23, 0x04	; 4
     f96:	85 ee       	ldi	r24, 0xE5	; 229
     f98:	93 e0       	ldi	r25, 0x03	; 3

//////////For multiple of 10///////
const char K_value_selection_d_text0[] PROGMEM = "K value ?";
LiquidLine K_value_selection_d_line0(1,0,K_value_selection_d_text0);
     f9a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
     f9e:	22 e1       	ldi	r18, 0x12	; 18
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8e eb       	ldi	r24, 0xBE	; 190
LiquidLine K_value_selection_d_line1(6,1,upArrowIndex); //Above the multiple of 100
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	51 de       	rcall	.-862    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     fac:	22 e2       	ldi	r18, 0x22	; 34
     fae:	32 e0       	ldi	r19, 0x02	; 2
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	66 e0       	ldi	r22, 0x06	; 6
     fb4:	87 e9       	ldi	r24, 0x97	; 151
     fb6:	93 e0       	ldi	r25, 0x03	; 3
LiquidLine K_value_selection_d_line2(1,2,"K = ", K_FACTOR);
     fb8:	f7 dd       	rcall	.-1042   	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
     fba:	08 e1       	ldi	r16, 0x18	; 24
     fbc:	12 e0       	ldi	r17, 0x02	; 2
     fbe:	2c e3       	ldi	r18, 0x3C	; 60
     fc0:	32 e0       	ldi	r19, 0x02	; 2
     fc2:	42 e0       	ldi	r20, 0x02	; 2
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	80 e7       	ldi	r24, 0x70	; 112
     fc8:	93 e0       	ldi	r25, 0x03	; 3
LiquidLine K_value_selection_d_line3(6,3,downArrowIndex);
     fca:	4f de       	rcall	.-866    	; 0xc6a <_ZN10LiquidLineC1IA5_KcfEEhhRT_RT0_>
     fcc:	21 e2       	ldi	r18, 0x21	; 33
     fce:	32 e0       	ldi	r19, 0x02	; 2
     fd0:	43 e0       	ldi	r20, 0x03	; 3
     fd2:	66 e0       	ldi	r22, 0x06	; 6
     fd4:	89 e4       	ldi	r24, 0x49	; 73
     fd6:	93 e0       	ldi	r25, 0x03	; 3
LiquidScreen K_value_selection_d_Screen(K_value_selection_d_line0,K_value_selection_d_line1,K_value_selection_d_line2,K_value_selection_d_line3);
     fd8:	e7 dd       	rcall	.-1074   	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
     fda:	09 e4       	ldi	r16, 0x49	; 73
     fdc:	13 e0       	ldi	r17, 0x03	; 3
     fde:	20 e7       	ldi	r18, 0x70	; 112
     fe0:	33 e0       	ldi	r19, 0x03	; 3
     fe2:	47 e9       	ldi	r20, 0x97	; 151
     fe4:	53 e0       	ldi	r21, 0x03	; 3
     fe6:	6e eb       	ldi	r22, 0xBE	; 190
     fe8:	73 e0       	ldi	r23, 0x03	; 3
     fea:	8d e2       	ldi	r24, 0x2D	; 45

//////////For multiple of 1///////
const char K_value_selection_u_text0[] PROGMEM = "K value ?";
LiquidLine K_value_selection_u_line0(1,0,K_value_selection_u_text0);
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
     ff2:	28 e0       	ldi	r18, 0x08	; 8
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	86 e0       	ldi	r24, 0x06	; 6
LiquidLine K_value_selection_u_line1(7,1,upArrowIndex); //Above the multiple of 100
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	27 de       	rcall	.-946    	; 0xc4e <_ZN10LiquidLineC1IA6_KcEEhhRT_>
    1000:	22 e2       	ldi	r18, 0x22	; 34
    1002:	32 e0       	ldi	r19, 0x02	; 2
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	67 e0       	ldi	r22, 0x07	; 7
    1008:	8f ed       	ldi	r24, 0xDF	; 223
    100a:	92 e0       	ldi	r25, 0x02	; 2
LiquidLine K_value_selection_u_line2(1,2,"K = ", K_FACTOR);
    100c:	cd dd       	rcall	.-1126   	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
    100e:	08 e1       	ldi	r16, 0x18	; 24
    1010:	12 e0       	ldi	r17, 0x02	; 2
    1012:	2c e3       	ldi	r18, 0x3C	; 60
    1014:	32 e0       	ldi	r19, 0x02	; 2
    1016:	42 e0       	ldi	r20, 0x02	; 2
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	88 eb       	ldi	r24, 0xB8	; 184
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	25 de       	rcall	.-950    	; 0xc6a <_ZN10LiquidLineC1IA5_KcfEEhhRT_RT0_>
LiquidLine K_value_selection_u_line3(7,3,downArrowIndex);
    1020:	21 e2       	ldi	r18, 0x21	; 33
    1022:	32 e0       	ldi	r19, 0x02	; 2
    1024:	43 e0       	ldi	r20, 0x03	; 3
    1026:	67 e0       	ldi	r22, 0x07	; 7
    1028:	81 e9       	ldi	r24, 0x91	; 145
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	bd dd       	rcall	.-1158   	; 0xba8 <_ZN10LiquidLineC1IKhEEhhRT_>
    102e:	01 e9       	ldi	r16, 0x91	; 145
LiquidScreen K_value_selection_u_Screen(K_value_selection_u_line0,K_value_selection_u_line1,K_value_selection_u_line2,K_value_selection_u_line3);
    1030:	12 e0       	ldi	r17, 0x02	; 2
    1032:	28 eb       	ldi	r18, 0xB8	; 184
    1034:	32 e0       	ldi	r19, 0x02	; 2
    1036:	4f ed       	ldi	r20, 0xDF	; 223
    1038:	52 e0       	ldi	r21, 0x02	; 2
    103a:	66 e0       	ldi	r22, 0x06	; 6
    103c:	73 e0       	ldi	r23, 0x03	; 3
    103e:	85 e7       	ldi	r24, 0x75	; 117
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
    1046:	1f 91       	pop	r17

void gotoINAScreen(void)
{
	menu.change_screen(INA_Screen);
	menu.switch_focus(true);
}
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	08 95       	ret

00001050 <_Z6setMuxh>:
    1050:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
				break; //the call_function returned false, there is no more function
				//so we get out
			}
		}
	}	
}
    1054:	9f 60       	ori	r25, 0x0F	; 15
    1056:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    105a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    105e:	9e 7f       	andi	r25, 0xFE	; 254
    1060:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1064:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
    1068:	91 60       	ori	r25, 0x01	; 1
    106a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a9 f0       	breq	.+42     	; 0x109c <_Z6setMuxh+0x4c>
    1072:	58 f0       	brcs	.+22     	; 0x108a <_Z6setMuxh+0x3a>
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	91 f5       	brne	.+100    	; 0x10dc <_Z6setMuxh+0x8c>
    1078:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1082:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	1e c0       	rjmp	.+60     	; 0x10c6 <_Z6setMuxh+0x76>
    108a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    108e:	87 7f       	andi	r24, 0xF7	; 247
    1090:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1094:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1098:	8b 7f       	andi	r24, 0xFB	; 251
    109a:	15 c0       	rjmp	.+42     	; 0x10c6 <_Z6setMuxh+0x76>
    109c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10a0:	88 60       	ori	r24, 0x08	; 8
    10a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10aa:	8b 7f       	andi	r24, 0xFB	; 251
    10ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10b4:	8d 7f       	andi	r24, 0xFD	; 253
    10b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    10c4:	1f c0       	rjmp	.+62     	; 0x1104 <_Z6setMuxh+0xb4>
    10c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10ce:	8d 7f       	andi	r24, 0xFD	; 253
    10d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    10d8:	8e 7f       	andi	r24, 0xFE	; 254
    10da:	f2 cf       	rjmp	.-28     	; 0x10c0 <_Z6setMuxh+0x70>
    10dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10e0:	88 60       	ori	r24, 0x08	; 8
    10e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    1104:	84 e1       	ldi	r24, 0x14	; 20
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <delayMicroseconds>

0000110c <_Z15enableIntButtonv>:
    110c:	52 98       	cbi	0x0a, 2	; 10
    110e:	8d b1       	in	r24, 0x0d	; 13
    1110:	8f 70       	andi	r24, 0x0F	; 15
    1112:	8d b9       	out	0x0d, r24	; 13
    1114:	f8 94       	cli
    1116:	1d ba       	out	0x1d, r1	; 29
    1118:	e9 e6       	ldi	r30, 0x69	; 105
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	80 83       	st	Z, r24
    1122:	80 81       	ld	r24, Z
    1124:	8f 7e       	andi	r24, 0xEF	; 239
    1126:	80 83       	st	Z, r24
    1128:	8a ea       	ldi	r24, 0xAA	; 170
    112a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    112e:	8d b3       	in	r24, 0x1d	; 29
    1130:	84 6f       	ori	r24, 0xF4	; 244
    1132:	8d bb       	out	0x1d, r24	; 29
    1134:	78 94       	sei
    1136:	08 95       	ret

00001138 <_Z12buttonsCheckv>:
    1138:	cf 93       	push	r28
    113a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <bOk>
    113e:	88 23       	and	r24, r24
    1140:	71 f0       	breq	.+28     	; 0x115e <_Z12buttonsCheckv+0x26>
    1142:	c1 e0       	ldi	r28, 0x01	; 1
    1144:	6c 2f       	mov	r22, r28
    1146:	85 e3       	ldi	r24, 0x35	; 53
    1148:	99 e0       	ldi	r25, 0x09	; 9
    114a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_ZNK10LiquidMenu13call_functionEh>
    114e:	88 23       	and	r24, r24
    1150:	19 f0       	breq	.+6      	; 0x1158 <_Z12buttonsCheckv+0x20>
    1152:	cf 5f       	subi	r28, 0xFF	; 255
    1154:	c8 30       	cpi	r28, 0x08	; 8
    1156:	b1 f7       	brne	.-20     	; 0x1144 <_Z12buttonsCheckv+0xc>
    1158:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <bOk>
    115c:	17 c0       	rjmp	.+46     	; 0x118c <_Z12buttonsCheckv+0x54>
    115e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <bUp>
    1162:	88 23       	and	r24, r24
    1164:	41 f0       	breq	.+16     	; 0x1176 <_Z12buttonsCheckv+0x3e>
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	85 e3       	ldi	r24, 0x35	; 53
    116a:	99 e0       	ldi	r25, 0x09	; 9
    116c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>
    1170:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <bUp>
    1174:	0b c0       	rjmp	.+22     	; 0x118c <_Z12buttonsCheckv+0x54>
    1176:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
    117a:	88 23       	and	r24, r24
    117c:	39 f0       	breq	.+14     	; 0x118c <_Z12buttonsCheckv+0x54>
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	85 e3       	ldi	r24, 0x35	; 53
    1182:	99 e0       	ldi	r25, 0x09	; 9
    1184:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>
    1188:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <_Z13emptyfunctionv>:

void emptyfunction(void) //To attach to line to enable scrolling
{
    1190:	08 95       	ret

00001192 <_Z18calibrateOffsetADCv>:
}

void calibrateOffsetADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateOffset();
    1192:	81 e7       	ldi	r24, 0x71	; 113
    1194:	99 e0       	ldi	r25, 0x09	; 9
    1196:	d0 ca       	rjmp	.-2656   	; 0x738 <_ZN7ADS124115calibrateOffsetEv>

00001198 <_Z16calibrateGainADCv>:
}

void calibrateGainADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateGain();
    1198:	81 e7       	ldi	r24, 0x71	; 113
    119a:	99 e0       	ldi	r25, 0x09	; 9
    119c:	ac ca       	rjmp	.-2728   	; 0x6f6 <_ZN7ADS124113calibrateGainEv>

0000119e <__vector_3>:
INA_Class INA;
LiquidMenu menu(lcd);


ISR(INT2_vect) //OK button
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	8f 93       	push	r24
	bOk =  true;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <bOk>
}
    11b0:	8f 91       	pop	r24
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_5>:

ISR(INT4_vect) //Up button
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	8f 93       	push	r24
	bUp = true;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <bUp>
}
    11ce:	8f 91       	pop	r24
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_6>:

ISR(INT5_vect) //Right button
{
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	8f 93       	push	r24
	bRight = true;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <bRight>
}
    11ec:	8f 91       	pop	r24
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_7>:

ISR(INT6_vect) //Down button
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	8f 93       	push	r24
	bDown = true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
}
    120a:	8f 91       	pop	r24
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_8>:
ISR(INT7_vect) //Left button
{
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	8f 93       	push	r24
	bLeft = true;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <bLeft>
}
    1228:	8f 91       	pop	r24
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <setup>:



void setup()
{
	lcd.begin(LCD_COL, LCD_ROWS);
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	40 91 29 02 	lds	r20, 0x0229	; 0x800229 <LCD_ROWS>
    123a:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <LCD_COL>
    123e:	83 e7       	ldi	r24, 0x73	; 115
    1240:	99 e0       	ldi	r25, 0x09	; 9
    1242:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN13LiquidCrystal5beginEhhh>
	lcd.createChar(upArrowIndex, upArrow);
    1246:	40 e1       	ldi	r20, 0x10	; 16
    1248:	52 e0       	ldi	r21, 0x02	; 2
    124a:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <upArrowIndex>
    124e:	83 e7       	ldi	r24, 0x73	; 115
    1250:	99 e0       	ldi	r25, 0x09	; 9
    1252:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(downArrowIndex, downArrow);
    1256:	48 e0       	ldi	r20, 0x08	; 8
    1258:	52 e0       	ldi	r21, 0x02	; 2
    125a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <downArrowIndex>
    125e:	83 e7       	ldi	r24, 0x73	; 115
    1260:	99 e0       	ldi	r25, 0x09	; 9
    1262:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN13LiquidCrystal10createCharEhPh>
	lcd.createChar(rightArrowIndex, rightArrow);
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	52 e0       	ldi	r21, 0x02	; 2
    126a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <rightArrowIndex>
    126e:	83 e7       	ldi	r24, 0x73	; 115
    1270:	99 e0       	ldi	r25, 0x09	; 9
    1272:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN13LiquidCrystal10createCharEhPh>
	ads1241.begin(true, true);
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	81 e7       	ldi	r24, 0x71	; 113
    127c:	99 e0       	ldi	r25, 0x09	; 9
    127e:	97 da       	rcall	.-2770   	; 0x7ae <_ZN7ADS12415beginEbb>
	
	enableIntButton();
    1280:	45 df       	rcall	.-374    	; 0x110c <_Z15enableIntButtonv>
    1282:	40 ea       	ldi	r20, 0xA0	; 160
	

	INA.setI2CSpeed(INA_I2C_STANDARD_MODE); // 100kHz I2C
    1284:	56 e8       	ldi	r21, 0x86	; 134
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	85 e5       	ldi	r24, 0x55	; 85
    128c:	99 e0       	ldi	r25, 0x09	; 9
    128e:	da d2       	rcall	.+1460   	; 0x1844 <_ZN9INA_Class11setI2CSpeedEm>
    1290:	0f ef       	ldi	r16, 0xFF	; 255
	INA.begin(3, 2000); //MAX 3A, 2mOhm resistor
    1292:	20 ed       	ldi	r18, 0xD0	; 208
    1294:	37 e0       	ldi	r19, 0x07	; 7
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	85 e5       	ldi	r24, 0x55	; 85
    129e:	99 e0       	ldi	r25, 0x09	; 9
    12a0:	41 d4       	rcall	.+2178   	; 0x1b24 <_ZN9INA_Class5beginEhmh>
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
	INA.setBusConversion(8500); // Maximum conversion time 8.244ms
    12a4:	44 e3       	ldi	r20, 0x34	; 52
    12a6:	51 e2       	ldi	r21, 0x21	; 33
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	85 e5       	ldi	r24, 0x55	; 85
    12ae:	99 e0       	ldi	r25, 0x09	; 9
    12b0:	63 d5       	rcall	.+2758   	; 0x1d78 <_ZN9INA_Class16setBusConversionEmh>
    12b2:	2f ef       	ldi	r18, 0xFF	; 255
	INA.setShuntConversion(8500); // Maximum conversion time 8.244ms
    12b4:	44 e3       	ldi	r20, 0x34	; 52
    12b6:	51 e2       	ldi	r21, 0x21	; 33
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	85 e5       	ldi	r24, 0x55	; 85
    12be:	99 e0       	ldi	r25, 0x09	; 9
    12c0:	67 d6       	rcall	.+3278   	; 0x1f90 <_ZN9INA_Class18setShuntConversionEmh>
    12c2:	4f ef       	ldi	r20, 0xFF	; 255
	INA.setAveraging(128); //Average 128 readings
    12c4:	60 e8       	ldi	r22, 0x80	; 128
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	85 e5       	ldi	r24, 0x55	; 85
    12ca:	99 e0       	ldi	r25, 0x09	; 9
    12cc:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_ZN9INA_Class12setAveragingEjh>
    12d0:	4f ef       	ldi	r20, 0xFF	; 255
	INA.setMode(INA_MODE_CONTINUOUS_BOTH); //read bus and shunt
    12d2:	67 e0       	ldi	r22, 0x07	; 7
    12d4:	85 e5       	ldi	r24, 0x55	; 85
    12d6:	99 e0       	ldi	r25, 0x09	; 9

	attachFunctionToLine();
    12d8:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZN9INA_Class7setModeEhh>
	enableScrolling();
    12dc:	af db       	rcall	.-2210   	; 0xa3c <_Z20attachFunctionToLinev>
    12de:	87 db       	rcall	.-2290   	; 0x9ee <_Z15enableScrollingv>
	putInProgmem();
    12e0:	ff da       	rcall	.-2562   	; 0x8e0 <_Z12putInProgmemv>
    12e2:	6d e7       	ldi	r22, 0x7D	; 125
	
	menu.add_screen(welcome_Screen);
    12e4:	78 e0       	ldi	r23, 0x08	; 8
    12e6:	85 e3       	ldi	r24, 0x35	; 53
    12e8:	99 e0       	ldi	r25, 0x09	; 9
    12ea:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    12ee:	6e e9       	ldi	r22, 0x9E	; 158
	menu.add_screen(main_Screen);
    12f0:	77 e0       	ldi	r23, 0x07	; 7
    12f2:	85 e3       	ldi	r24, 0x35	; 53
    12f4:	99 e0       	ldi	r25, 0x09	; 9
    12f6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    12fa:	6a ec       	ldi	r22, 0xCA	; 202
	menu.add_screen(calibrateGain_Screen);
    12fc:	76 e0       	ldi	r23, 0x06	; 6
    12fe:	85 e3       	ldi	r24, 0x35	; 53
    1300:	99 e0       	ldi	r25, 0x09	; 9
    1302:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    1306:	64 e3       	ldi	r22, 0x34	; 52
	menu.add_screen(calibrateOffset_Screen);
    1308:	77 e0       	ldi	r23, 0x07	; 7
    130a:	85 e3       	ldi	r24, 0x35	; 53
    130c:	99 e0       	ldi	r25, 0x09	; 9
    130e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    1312:	60 e6       	ldi	r22, 0x60	; 96
	menu.add_screen(calibrationDone_Screen);
    1314:	76 e0       	ldi	r23, 0x06	; 6
    1316:	85 e3       	ldi	r24, 0x35	; 53
    1318:	99 e0       	ldi	r25, 0x09	; 9
    131a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    131e:	66 ef       	ldi	r22, 0xF6	; 246
	menu.add_screen(configureAdc_Screen);
    1320:	75 e0       	ldi	r23, 0x05	; 5
    1322:	85 e3       	ldi	r24, 0x35	; 53
    1324:	99 e0       	ldi	r25, 0x09	; 9
    1326:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    132a:	6d e5       	ldi	r22, 0x5D	; 93
	menu.add_screen(liveRead_Screen);
    132c:	75 e0       	ldi	r23, 0x05	; 5
    132e:	85 e3       	ldi	r24, 0x35	; 53
    1330:	99 e0       	ldi	r25, 0x09	; 9
    1332:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    1336:	6d e9       	ldi	r22, 0x9D	; 157
	menu.add_screen(INA_Screen);
    1338:	74 e0       	ldi	r23, 0x04	; 4
    133a:	85 e3       	ldi	r24, 0x35	; 53
    133c:	99 e0       	ldi	r25, 0x09	; 9
    133e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    1342:	65 ee       	ldi	r22, 0xE5	; 229
	menu.add_screen(K_value_selection_c_Screen);
    1344:	73 e0       	ldi	r23, 0x03	; 3
    1346:	85 e3       	ldi	r24, 0x35	; 53
    1348:	99 e0       	ldi	r25, 0x09	; 9
    134a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>
    134e:	62 e0       	ldi	r22, 0x02	; 2
	
	menu.set_focusPosition(Position::LEFT);
    1350:	85 e3       	ldi	r24, 0x35	; 53
    1352:	99 e0       	ldi	r25, 0x09	; 9
    1354:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN10LiquidMenu17set_focusPositionE8Position>
    1358:	40 e0       	ldi	r20, 0x00	; 0
	menu.set_focusSymbol(Position::LEFT, rightArrow);
    135a:	52 e0       	ldi	r21, 0x02	; 2
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	85 e3       	ldi	r24, 0x35	; 53
    1360:	99 e0       	ldi	r25, 0x09	; 9
    1362:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN10LiquidMenu15set_focusSymbolE8PositionPh>
    1366:	85 e3       	ldi	r24, 0x35	; 53
	

	menu.update();
    1368:	99 e0       	ldi	r25, 0x09	; 9
    136a:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_ZNK10LiquidMenu6updateEv>
	menu.switch_focus(true);
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	85 e3       	ldi	r24, 0x35	; 53
    1372:	99 e0       	ldi	r25, 0x09	; 9
    1374:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <_ZN10LiquidMenu12switch_focusEb>
	
	while(1)
	{
		buttonsCheck();
    1378:	df de       	rcall	.-578    	; 0x1138 <_Z12buttonsCheckv>
    137a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <millis>
		if(millis()-updateLastMs > updatePeriod)
    137e:	00 91 8b 09 	lds	r16, 0x098B	; 0x80098b <updateLastMs>
    1382:	10 91 8c 09 	lds	r17, 0x098C	; 0x80098c <updateLastMs+0x1>
    1386:	20 91 8d 09 	lds	r18, 0x098D	; 0x80098d <updateLastMs+0x2>
    138a:	30 91 8e 09 	lds	r19, 0x098E	; 0x80098e <updateLastMs+0x3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	80 1b       	sub	r24, r16
    1394:	91 0b       	sbc	r25, r17
    1396:	a2 0b       	sbc	r26, r18
    1398:	b3 0b       	sbc	r27, r19
    139a:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <updatePeriod>
    139e:	10 91 1d 02 	lds	r17, 0x021D	; 0x80021d <updatePeriod+0x1>
    13a2:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <updatePeriod+0x2>
    13a6:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <updatePeriod+0x3>
    13aa:	08 17       	cp	r16, r24
    13ac:	19 07       	cpc	r17, r25
    13ae:	2a 07       	cpc	r18, r26
    13b0:	3b 07       	cpc	r19, r27
    13b2:	10 f7       	brcc	.-60     	; 0x1378 <setup+0x144>
    13b4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <millis>
		{
			updateLastMs = millis();
    13b8:	60 93 8b 09 	sts	0x098B, r22	; 0x80098b <updateLastMs>
    13bc:	70 93 8c 09 	sts	0x098C, r23	; 0x80098c <updateLastMs+0x1>
    13c0:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <updateLastMs+0x2>
    13c4:	90 93 8e 09 	sts	0x098E, r25	; 0x80098e <updateLastMs+0x3>
    13c8:	85 e3       	ldi	r24, 0x35	; 53
			if (menu.get_currentScreen() == &liveRead_Screen) //Maybe stock the pointer in a variable
    13ca:	99 e0       	ldi	r25, 0x09	; 9
    13cc:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZNK10LiquidMenu17get_currentScreenEv>
    13d0:	8d 55       	subi	r24, 0x5D	; 93
    13d2:	95 40       	sbci	r25, 0x05	; 5
    13d4:	c9 f4       	brne	.+50     	; 0x1408 <setup+0x1d4>
															// so we don't cal it multiple times
			{
				V1Value = ads1241.getVoltage(1);
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	81 e7       	ldi	r24, 0x71	; 113
    13da:	99 e0       	ldi	r25, 0x09	; 9
    13dc:	06 d9       	rcall	.-3572   	; 0x5ea <_ZN7ADS124110getVoltageEh>
    13de:	60 93 f2 05 	sts	0x05F2, r22	; 0x8005f2 <V1Value>
    13e2:	70 93 f3 05 	sts	0x05F3, r23	; 0x8005f3 <V1Value+0x1>
    13e6:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <V1Value+0x2>
    13ea:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <V1Value+0x3>
				V2Value = ads1241.getVoltage(2);
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	81 e7       	ldi	r24, 0x71	; 113
    13f2:	99 e0       	ldi	r25, 0x09	; 9
    13f4:	fa d8       	rcall	.-3596   	; 0x5ea <_ZN7ADS124110getVoltageEh>
    13f6:	60 93 ee 05 	sts	0x05EE, r22	; 0x8005ee <V2Value>
    13fa:	70 93 ef 05 	sts	0x05EF, r23	; 0x8005ef <V2Value+0x1>
    13fe:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <V2Value+0x2>
    1402:	90 93 f1 05 	sts	0x05F1, r25	; 0x8005f1 <V2Value+0x3>
    1406:	21 c0       	rjmp	.+66     	; 0x144a <setup+0x216>
				menu.update();
			}
			else if (menu.get_currentScreen() == &INA_Screen)
    1408:	85 e3       	ldi	r24, 0x35	; 53
    140a:	99 e0       	ldi	r25, 0x09	; 9
    140c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZNK10LiquidMenu17get_currentScreenEv>
    1410:	8d 59       	subi	r24, 0x9D	; 157
    1412:	94 40       	sbci	r25, 0x04	; 4
    1414:	f1 f4       	brne	.+60     	; 0x1452 <setup+0x21e>
			{
				I1Value = INA.getBusMicroAmps();
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	85 e5       	ldi	r24, 0x55	; 85
    141a:	99 e0       	ldi	r25, 0x09	; 9
    141c:	3d d7       	rcall	.+3706   	; 0x2298 <_ZN9INA_Class15getBusMicroAmpsEh>
    141e:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <I1Value>
    1422:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <I1Value+0x1>
    1426:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <I1Value+0x2>
    142a:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <I1Value+0x3>
				VBusValue = INA.getBusMilliVolts();
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	85 e5       	ldi	r24, 0x55	; 85
    1432:	99 e0       	ldi	r25, 0x09	; 9
    1434:	e1 d6       	rcall	.+3522   	; 0x21f8 <_ZN9INA_Class16getBusMilliVoltsEh>
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <VBusValue>
    143e:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <VBusValue+0x1>
    1442:	a0 93 57 05 	sts	0x0557, r26	; 0x800557 <VBusValue+0x2>
    1446:	b0 93 58 05 	sts	0x0558, r27	; 0x800558 <VBusValue+0x3>
    144a:	85 e3       	ldi	r24, 0x35	; 53
				menu.update();
    144c:	99 e0       	ldi	r25, 0x09	; 9
    144e:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_ZNK10LiquidMenu6updateEv>
    1452:	85 e3       	ldi	r24, 0x35	; 53
			}
			menu.softUpdate();
    1454:	99 e0       	ldi	r25, 0x09	; 9
    1456:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <_ZNK10LiquidMenu10softUpdateEv>
    145a:	8e cf       	rjmp	.-228    	; 0x1378 <setup+0x144>

0000145c <loop>:
    145c:	08 95       	ret

0000145e <_GLOBAL__sub_I_updatePeriod>:

	
	
	
	
void loop(){} //already have while(1) in setup 
    145e:	8f 92       	push	r8
    1460:	af 92       	push	r10
    1462:	cf 92       	push	r12
    1464:	ef 92       	push	r14
    1466:	0f 93       	push	r16
uint32_t updatePeriod = 500;
uint32_t updateLastMs = 0;


///////OBJECT INSTANTATION///////
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
    1468:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <D7>
    146c:	8f 93       	push	r24
    146e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <D6>
    1472:	8f 93       	push	r24
    1474:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <D5>
    1478:	8f 93       	push	r24
    147a:	80 90 2e 02 	lds	r8, 0x022E	; 0x80022e <D4>
    147e:	a0 90 2f 02 	lds	r10, 0x022F	; 0x80022f <D3>
    1482:	c0 90 30 02 	lds	r12, 0x0230	; 0x800230 <D2>
    1486:	e0 90 31 02 	lds	r14, 0x0231	; 0x800231 <D1>
    148a:	00 91 32 02 	lds	r16, 0x0232	; 0x800232 <D0>
    148e:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <ENABLE_LCD>
    1492:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <RW>
    1496:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <RS>
    149a:	83 e7       	ldi	r24, 0x73	; 115
    149c:	99 e0       	ldi	r25, 0x09	; 9
    149e:	0e 94 c0 1b 	call	0x3780	; 0x3780 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>
ADS1241 ads1241;
    14a2:	81 e7       	ldi	r24, 0x71	; 113
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN7ADS1241C1Ev>
INA_Class INA;
    14aa:	85 e5       	ldi	r24, 0x55	; 85
    14ac:	99 e0       	ldi	r25, 0x09	; 9
    14ae:	37 d1       	rcall	.+622    	; 0x171e <_ZN9INA_ClassC1Ev>
LiquidMenu menu(lcd);
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	63 e7       	ldi	r22, 0x73	; 115
    14ba:	79 e0       	ldi	r23, 0x09	; 9
    14bc:	85 e3       	ldi	r24, 0x35	; 53
    14be:	99 e0       	ldi	r25, 0x09	; 9

	
	
	
	
void loop(){} //already have while(1) in setup 
    14c0:	0f 91       	pop	r16
    14c2:	ef 90       	pop	r14
    14c4:	cf 90       	pop	r12
    14c6:	af 90       	pop	r10
    14c8:	8f 90       	pop	r8

///////OBJECT INSTANTATION///////
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
ADS1241 ads1241;
INA_Class INA;
LiquidMenu menu(lcd);
    14ca:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <_ZN10LiquidMenuC1ER13LiquidCrystalh>

000014ce <_GLOBAL__sub_D_updatePeriod>:


///////OBJECT INSTANTATION///////
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
ADS1241 ads1241;
INA_Class INA;
    14ce:	85 e5       	ldi	r24, 0x55	; 85
    14d0:	99 e0       	ldi	r25, 0x09	; 9
    14d2:	2a d1       	rcall	.+596    	; 0x1728 <_ZN9INA_ClassD1Ev>
uint32_t updateLastMs = 0;


///////OBJECT INSTANTATION///////
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
ADS1241 ads1241;
    14d4:	81 e7       	ldi	r24, 0x71	; 113
    14d6:	99 e0       	ldi	r25, 0x09	; 9
    14d8:	0c 94 3c 02 	jmp	0x478	; 0x478 <_ZN7ADS1241D1Ev>

000014dc <_ZN6inaDetC1E9inaEEPROM>:
        default : returnCode = false;
      } // of switch type
    } // of if this device needs to be set
  } // for-next each device loop
  return(returnCode);
} // of method AlertOnPowerOverLimit
    14dc:	8f 92       	push	r8
    14de:	9f 92       	push	r9
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <_ZN6inaDetC1E9inaEEPROM+0x1a>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <_ZN6inaDetC1E9inaEEPROM+0x1c>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	fc 01       	movw	r30, r24
    14fe:	a2 2f       	mov	r26, r18
    1500:	af 70       	andi	r26, 0x0F	; 15
    1502:	92 2f       	mov	r25, r18
    1504:	20 83       	st	Z, r18
    1506:	83 2f       	mov	r24, r19
    1508:	88 1f       	adc	r24, r24
    150a:	88 27       	eor	r24, r24
    150c:	88 1f       	adc	r24, r24
    150e:	24 2f       	mov	r18, r20
    1510:	2f 73       	andi	r18, 0x3F	; 63
    1512:	22 0f       	add	r18, r18
    1514:	28 2b       	or	r18, r24
    1516:	20 fb       	bst	r18, 0
    1518:	37 f9       	bld	r19, 7
    151a:	31 83       	std	Z+1, r19	; 0x01
    151c:	82 2f       	mov	r24, r18
    151e:	86 95       	lsr	r24
    1520:	42 95       	swap	r20
    1522:	46 95       	lsr	r20
    1524:	46 95       	lsr	r20
    1526:	43 70       	andi	r20, 0x03	; 3
    1528:	35 2f       	mov	r19, r21
    152a:	33 0f       	add	r19, r19
    152c:	33 0f       	add	r19, r19
    152e:	43 2b       	or	r20, r19
    1530:	52 95       	swap	r21
    1532:	56 95       	lsr	r21
    1534:	56 95       	lsr	r21
    1536:	53 70       	andi	r21, 0x03	; 3
    1538:	36 2f       	mov	r19, r22
    153a:	33 0f       	add	r19, r19
    153c:	33 0f       	add	r19, r19
    153e:	53 2b       	or	r21, r19
    1540:	62 95       	swap	r22
    1542:	66 95       	lsr	r22
    1544:	66 95       	lsr	r22
    1546:	63 70       	andi	r22, 0x03	; 3
    1548:	73 70       	andi	r23, 0x03	; 3
    154a:	77 0f       	add	r23, r23
    154c:	77 0f       	add	r23, r23
    154e:	76 2b       	or	r23, r22
    1550:	34 2f       	mov	r19, r20
    1552:	32 95       	swap	r19
    1554:	33 0f       	add	r19, r19
    1556:	33 0f       	add	r19, r19
    1558:	30 7c       	andi	r19, 0xC0	; 192
    155a:	8f 73       	andi	r24, 0x3F	; 63
    155c:	83 2b       	or	r24, r19
    155e:	82 83       	std	Z+2, r24	; 0x02
    1560:	85 2f       	mov	r24, r21
    1562:	82 95       	swap	r24
    1564:	88 0f       	add	r24, r24
    1566:	88 0f       	add	r24, r24
    1568:	80 7c       	andi	r24, 0xC0	; 192
    156a:	46 95       	lsr	r20
    156c:	46 95       	lsr	r20
    156e:	48 2b       	or	r20, r24
    1570:	43 83       	std	Z+3, r20	; 0x03
    1572:	87 2f       	mov	r24, r23
    1574:	82 95       	swap	r24
    1576:	88 0f       	add	r24, r24
    1578:	88 0f       	add	r24, r24
    157a:	80 7c       	andi	r24, 0xC0	; 192
    157c:	56 95       	lsr	r21
    157e:	56 95       	lsr	r21
    1580:	58 2b       	or	r21, r24
    1582:	54 83       	std	Z+4, r21	; 0x04
    1584:	76 95       	lsr	r23
    1586:	76 95       	lsr	r23
    1588:	65 81       	ldd	r22, Z+5	; 0x05
    158a:	6c 7f       	andi	r22, 0xFC	; 252
    158c:	76 2b       	or	r23, r22
    158e:	75 83       	std	Z+5, r23	; 0x05
    1590:	a4 30       	cpi	r26, 0x04	; 4
    1592:	b0 f5       	brcc	.+108    	; 0x1600 <_ZN6inaDetC1E9inaEEPROM+0x124>
    1594:	4f 01       	movw	r8, r30
    1596:	87 81       	ldd	r24, Z+7	; 0x07
    1598:	a1 30       	cpi	r26, 0x01	; 1
    159a:	c0 f5       	brcc	.+112    	; 0x160c <_ZN6inaDetC1E9inaEEPROM+0x130>
    159c:	9a e0       	ldi	r25, 0x0A	; 10
    159e:	96 83       	std	Z+6, r25	; 0x06
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	87 83       	std	Z+7, r24	; 0x07
    15a4:	80 e9       	ldi	r24, 0x90	; 144
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	93 87       	std	Z+11, r25	; 0x0b
    15aa:	82 87       	std	Z+10, r24	; 0x0a
    15ac:	84 e6       	ldi	r24, 0x64	; 100
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	91 87       	std	Z+9, r25	; 0x09
    15b2:	80 87       	std	Z+8, r24	; 0x08
    15b4:	a1 2c       	mov	r10, r1
    15b6:	fa ec       	ldi	r31, 0xCA	; 202
    15b8:	bf 2e       	mov	r11, r31
    15ba:	aa e9       	ldi	r26, 0x9A	; 154
    15bc:	ca 2e       	mov	r12, r26
    15be:	bb e3       	ldi	r27, 0x3B	; 59
    15c0:	db 2e       	mov	r13, r27
    15c2:	e1 2c       	mov	r14, r1
    15c4:	f1 2c       	mov	r15, r1
    15c6:	00 e0       	ldi	r16, 0x00	; 0
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 23 23 	call	0x4646	; 0x4646 <__muldi3>
    15dc:	aa 24       	eor	r10, r10
    15de:	aa 94       	dec	r10
    15e0:	ef e7       	ldi	r30, 0x7F	; 127
    15e2:	be 2e       	mov	r11, r30
    15e4:	c1 2c       	mov	r12, r1
    15e6:	d1 2c       	mov	r13, r1
    15e8:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    15ec:	94 2f       	mov	r25, r20
    15ee:	85 2f       	mov	r24, r21
    15f0:	f4 01       	movw	r30, r8
    15f2:	24 87       	std	Z+12, r18	; 0x0c
    15f4:	35 87       	std	Z+13, r19	; 0x0d
    15f6:	46 87       	std	Z+14, r20	; 0x0e
    15f8:	57 87       	std	Z+15, r21	; 0x0f
    15fa:	a4 e1       	ldi	r26, 0x14	; 20
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	37 c0       	rjmp	.+110    	; 0x166e <_ZN6inaDetC1E9inaEEPROM+0x192>
    1600:	a4 30       	cpi	r26, 0x04	; 4
    1602:	f1 f1       	breq	.+124    	; 0x1680 <_ZN6inaDetC1E9inaEEPROM+0x1a4>
    1604:	a8 30       	cpi	r26, 0x08	; 8
    1606:	08 f4       	brcc	.+2      	; 0x160a <_ZN6inaDetC1E9inaEEPROM+0x12e>
    1608:	55 c0       	rjmp	.+170    	; 0x16b4 <_ZN6inaDetC1E9inaEEPROM+0x1d8>
    160a:	76 c0       	rjmp	.+236    	; 0x16f8 <_ZN6inaDetC1E9inaEEPROM+0x21c>
    160c:	9a e0       	ldi	r25, 0x0A	; 10
    160e:	96 83       	std	Z+6, r25	; 0x06
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	87 83       	std	Z+7, r24	; 0x07
    1614:	8d e7       	ldi	r24, 0x7D	; 125
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	93 87       	std	Z+11, r25	; 0x0b
    161a:	82 87       	std	Z+10, r24	; 0x0a
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 87       	std	Z+9, r25	; 0x09
    1622:	80 87       	std	Z+8, r24	; 0x08
    1624:	a1 2c       	mov	r10, r1
    1626:	8a ec       	ldi	r24, 0xCA	; 202
    1628:	b8 2e       	mov	r11, r24
    162a:	9a e9       	ldi	r25, 0x9A	; 154
    162c:	c9 2e       	mov	r12, r25
    162e:	3b e3       	ldi	r19, 0x3B	; 59
    1630:	d3 2e       	mov	r13, r19
    1632:	e1 2c       	mov	r14, r1
    1634:	f1 2c       	mov	r15, r1
    1636:	00 e0       	ldi	r16, 0x00	; 0
    1638:	10 e0       	ldi	r17, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 23 23 	call	0x4646	; 0x4646 <__muldi3>
    164c:	aa 24       	eor	r10, r10
    164e:	aa 94       	dec	r10
    1650:	ef e7       	ldi	r30, 0x7F	; 127
    1652:	be 2e       	mov	r11, r30
    1654:	c1 2c       	mov	r12, r1
    1656:	d1 2c       	mov	r13, r1
    1658:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    165c:	94 2f       	mov	r25, r20
    165e:	85 2f       	mov	r24, r21
    1660:	f4 01       	movw	r30, r8
    1662:	24 87       	std	Z+12, r18	; 0x0c
    1664:	35 87       	std	Z+13, r19	; 0x0d
    1666:	46 87       	std	Z+14, r20	; 0x0e
    1668:	57 87       	std	Z+15, r21	; 0x0f
    166a:	a9 e1       	ldi	r26, 0x19	; 25
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	49 2f       	mov	r20, r25
    1670:	58 2f       	mov	r21, r24
    1672:	0e 94 19 23 	call	0x4632	; 0x4632 <__muluhisi3>
    1676:	60 8b       	std	Z+16, r22	; 0x10
    1678:	71 8b       	std	Z+17, r23	; 0x11
    167a:	82 8b       	std	Z+18, r24	; 0x12
    167c:	93 8b       	std	Z+19, r25	; 0x13
    167e:	3c c0       	rjmp	.+120    	; 0x16f8 <_ZN6inaDetC1E9inaEEPROM+0x21c>
    1680:	82 e4       	ldi	r24, 0x42	; 66
    1682:	86 83       	std	Z+6, r24	; 0x06
    1684:	87 81       	ldd	r24, Z+7	; 0x07
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	87 83       	std	Z+7, r24	; 0x07
    168a:	8d e7       	ldi	r24, 0x7D	; 125
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	93 87       	std	Z+11, r25	; 0x0b
    1690:	82 87       	std	Z+10, r24	; 0x0a
    1692:	80 ed       	ldi	r24, 0xD0	; 208
    1694:	92 e1       	ldi	r25, 0x12	; 18
    1696:	a3 e1       	ldi	r26, 0x13	; 19
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	84 87       	std	Z+12, r24	; 0x0c
    169c:	95 87       	std	Z+13, r25	; 0x0d
    169e:	a6 87       	std	Z+14, r26	; 0x0e
    16a0:	b7 87       	std	Z+15, r27	; 0x0f
    16a2:	80 e8       	ldi	r24, 0x80	; 128
    16a4:	96 e9       	ldi	r25, 0x96	; 150
    16a6:	a8 e9       	ldi	r26, 0x98	; 152
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	80 8b       	std	Z+16, r24	; 0x10
    16ac:	91 8b       	std	Z+17, r25	; 0x11
    16ae:	a2 8b       	std	Z+18, r26	; 0x12
    16b0:	b3 8b       	std	Z+19, r27	; 0x13
    16b2:	22 c0       	rjmp	.+68     	; 0x16f8 <_ZN6inaDetC1E9inaEEPROM+0x21c>
    16b4:	86 81       	ldd	r24, Z+6	; 0x06
    16b6:	80 7c       	andi	r24, 0xC0	; 192
    16b8:	8a 60       	ori	r24, 0x0A	; 10
    16ba:	8f 73       	andi	r24, 0x3F	; 63
    16bc:	86 83       	std	Z+6, r24	; 0x06
    16be:	87 81       	ldd	r24, Z+7	; 0x07
    16c0:	8e 7f       	andi	r24, 0xFE	; 254
    16c2:	87 83       	std	Z+7, r24	; 0x07
    16c4:	20 e2       	ldi	r18, 0x20	; 32
    16c6:	33 e0       	ldi	r19, 0x03	; 3
    16c8:	33 87       	std	Z+11, r19	; 0x0b
    16ca:	22 87       	std	Z+10, r18	; 0x0a
    16cc:	20 e9       	ldi	r18, 0x90	; 144
    16ce:	31 e0       	ldi	r19, 0x01	; 1
    16d0:	31 87       	std	Z+9, r19	; 0x09
    16d2:	20 87       	std	Z+8, r18	; 0x08
    16d4:	14 86       	std	Z+12, r1	; 0x0c
    16d6:	15 86       	std	Z+13, r1	; 0x0d
    16d8:	16 86       	std	Z+14, r1	; 0x0e
    16da:	17 86       	std	Z+15, r1	; 0x0f
    16dc:	10 8a       	std	Z+16, r1	; 0x10
    16de:	11 8a       	std	Z+17, r1	; 0x11
    16e0:	12 8a       	std	Z+18, r1	; 0x12
    16e2:	13 8a       	std	Z+19, r1	; 0x13
    16e4:	29 2f       	mov	r18, r25
    16e6:	2f 70       	andi	r18, 0x0F	; 15
    16e8:	26 30       	cpi	r18, 0x06	; 6
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <_ZN6inaDetC1E9inaEEPROM+0x214>
    16ec:	8c e1       	ldi	r24, 0x1C	; 28
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <_ZN6inaDetC1E9inaEEPROM+0x21a>
    16f0:	27 30       	cpi	r18, 0x07	; 7
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <_ZN6inaDetC1E9inaEEPROM+0x21c>
    16f4:	8e e2       	ldi	r24, 0x2E	; 46
    16f6:	86 83       	std	Z+6, r24	; 0x06
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	9f 90       	pop	r9
    171a:	8f 90       	pop	r8
    171c:	08 95       	ret

0000171e <_ZN9INA_ClassC1Ev>:
    171e:	fc 01       	movw	r30, r24
    1720:	10 82       	st	Z, r1
    1722:	2f ef       	ldi	r18, 0xFF	; 255
    1724:	21 83       	std	Z+1, r18	; 0x01
    1726:	08 95       	ret

00001728 <_ZN9INA_ClassD1Ev>:
    1728:	08 95       	ret

0000172a <_ZN9INA_Class17readInafromEEPROMEh>:
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	64 97       	sbiw	r28, 0x14	; 20
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	fc 01       	movw	r30, r24
    1752:	21 81       	ldd	r18, Z+1	; 0x01
    1754:	26 17       	cp	r18, r22
    1756:	89 f1       	breq	.+98     	; 0x17ba <_ZN9INA_Class17readInafromEEPROMEh+0x90>
    1758:	20 81       	ld	r18, Z
    175a:	26 17       	cp	r18, r22
    175c:	70 f1       	brcs	.+92     	; 0x17ba <_ZN9INA_Class17readInafromEEPROMEh+0x90>
    175e:	f6 2e       	mov	r15, r22
    1760:	8c 01       	movw	r16, r24
    1762:	f6 e0       	ldi	r31, 0x06	; 6
    1764:	6f 9f       	mul	r22, r31
    1766:	50 01       	movw	r10, r0
    1768:	11 24       	eor	r1, r1
    176a:	4c 01       	movw	r8, r24
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	88 0e       	add	r8, r24
    1770:	91 1c       	adc	r9, r1
    1772:	f8 01       	movw	r30, r16
    1774:	32 96       	adiw	r30, 0x02	; 2
    1776:	6f 01       	movw	r12, r30
    1778:	ae 1a       	sub	r10, r30
    177a:	bf 0a       	sbc	r11, r31
    177c:	c5 01       	movw	r24, r10
    177e:	8c 0d       	add	r24, r12
    1780:	9d 1d       	adc	r25, r13
    1782:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_read_byte>
    1786:	f6 01       	movw	r30, r12
    1788:	81 93       	st	Z+, r24
    178a:	6f 01       	movw	r12, r30
    178c:	e8 15       	cp	r30, r8
    178e:	f9 05       	cpc	r31, r9
    1790:	a9 f7       	brne	.-22     	; 0x177c <_ZN9INA_Class17readInafromEEPROMEh+0x52>
    1792:	f8 01       	movw	r30, r16
    1794:	f1 82       	std	Z+1, r15	; 0x01
    1796:	22 81       	ldd	r18, Z+2	; 0x02
    1798:	33 81       	ldd	r19, Z+3	; 0x03
    179a:	44 81       	ldd	r20, Z+4	; 0x04
    179c:	55 81       	ldd	r21, Z+5	; 0x05
    179e:	66 81       	ldd	r22, Z+6	; 0x06
    17a0:	77 81       	ldd	r23, Z+7	; 0x07
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9a de       	rcall	.-716    	; 0x14dc <_ZN6inaDetC1E9inaEEPROM>
    17a8:	84 e1       	ldi	r24, 0x14	; 20
    17aa:	fe 01       	movw	r30, r28
    17ac:	31 96       	adiw	r30, 0x01	; 1
    17ae:	d8 01       	movw	r26, r16
    17b0:	18 96       	adiw	r26, 0x08	; 8
    17b2:	01 90       	ld	r0, Z+
    17b4:	0d 92       	st	X+, r0
    17b6:	8a 95       	dec	r24
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <_ZN9INA_Class17readInafromEEPROMEh+0x88>
    17ba:	64 96       	adiw	r28, 0x14	; 20
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	08 95       	ret

000017de <_ZN9INA_Class16writeInatoEEPROMEh>:
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	26 e0       	ldi	r18, 0x06	; 6
    17ee:	fc 01       	movw	r30, r24
    17f0:	38 96       	adiw	r30, 0x08	; 8
    17f2:	dc 01       	movw	r26, r24
    17f4:	12 96       	adiw	r26, 0x02	; 2
    17f6:	01 90       	ld	r0, Z+
    17f8:	0d 92       	st	X+, r0
    17fa:	2a 95       	dec	r18
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <_ZN9INA_Class16writeInatoEEPROMEh+0x18>
    17fe:	26 e0       	ldi	r18, 0x06	; 6
    1800:	62 9f       	mul	r22, r18
    1802:	e0 01       	movw	r28, r0
    1804:	11 24       	eor	r1, r1
    1806:	8c 01       	movw	r16, r24
    1808:	0e 5f       	subi	r16, 0xFE	; 254
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	6e 01       	movw	r12, r28
    180e:	86 e0       	ldi	r24, 0x06	; 6
    1810:	c8 0e       	add	r12, r24
    1812:	d1 1c       	adc	r13, r1
    1814:	f8 01       	movw	r30, r16
    1816:	f1 90       	ld	r15, Z+
    1818:	8f 01       	movw	r16, r30
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <eeprom_read_byte>
    1820:	f8 16       	cp	r15, r24
    1822:	21 f0       	breq	.+8      	; 0x182c <_ZN9INA_Class16writeInatoEEPROMEh+0x4e>
    1824:	6f 2d       	mov	r22, r15
    1826:	ce 01       	movw	r24, r28
    1828:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <eeprom_write_byte>
    182c:	21 96       	adiw	r28, 0x01	; 1
    182e:	cc 15       	cp	r28, r12
    1830:	dd 05       	cpc	r29, r13
    1832:	81 f7       	brne	.-32     	; 0x1814 <_ZN9INA_Class16writeInatoEEPROMEh+0x36>
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	08 95       	ret

00001844 <_ZN9INA_Class11setI2CSpeedEm>:
    1844:	8d ef       	ldi	r24, 0xFD	; 253
    1846:	99 e0       	ldi	r25, 0x09	; 9
    1848:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN7TwoWire8setClockEm>

0000184c <_ZN9INA_Class9writeWordEhjh>:
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	16 2f       	mov	r17, r22
    1854:	ea 01       	movw	r28, r20
    1856:	62 2f       	mov	r22, r18
    1858:	8d ef       	ldi	r24, 0xFD	; 253
    185a:	99 e0       	ldi	r25, 0x09	; 9
    185c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN7TwoWire17beginTransmissionEh>
    1860:	61 2f       	mov	r22, r17
    1862:	8d ef       	ldi	r24, 0xFD	; 253
    1864:	99 e0       	ldi	r25, 0x09	; 9
    1866:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7TwoWire5writeEh>
    186a:	6d 2f       	mov	r22, r29
    186c:	8d ef       	ldi	r24, 0xFD	; 253
    186e:	99 e0       	ldi	r25, 0x09	; 9
    1870:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7TwoWire5writeEh>
    1874:	6c 2f       	mov	r22, r28
    1876:	8d ef       	ldi	r24, 0xFD	; 253
    1878:	99 e0       	ldi	r25, 0x09	; 9
    187a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7TwoWire5writeEh>
    187e:	8d ef       	ldi	r24, 0xFD	; 253
    1880:	99 e0       	ldi	r25, 0x09	; 9
    1882:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZN7TwoWire15endTransmissionEv>
    1886:	8a e0       	ldi	r24, 0x0A	; 10
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <delayMicroseconds>

00001894 <_ZN9INA_Class10initDeviceEh>:
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	ec 01       	movw	r28, r24
    18ac:	88 85       	ldd	r24, Y+8	; 0x08
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	80 67       	ori	r24, 0x70	; 112
    18b2:	88 87       	std	Y+8, r24	; 0x08
    18b4:	ce 01       	movw	r24, r28
    18b6:	93 df       	rcall	.-218    	; 0x17de <_ZN9INA_Class16writeInatoEEPROMEh>
    18b8:	88 85       	ldd	r24, Y+8	; 0x08
    18ba:	8f 70       	andi	r24, 0x0F	; 15
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <_ZN9INA_Class10initDeviceEh+0x2c>
    18be:	51 c0       	rjmp	.+162    	; 0x1962 <_ZN9INA_Class10initDeviceEh+0xce>
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <_ZN9INA_Class10initDeviceEh+0x32>
    18c4:	f9 c0       	rjmp	.+498    	; 0x1ab8 <_ZN9INA_Class10initDeviceEh+0x224>
    18c6:	2c 89       	ldd	r18, Y+20	; 0x14
    18c8:	3d 89       	ldd	r19, Y+21	; 0x15
    18ca:	4e 89       	ldd	r20, Y+22	; 0x16
    18cc:	5f 89       	ldd	r21, Y+23	; 0x17
    18ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    18d0:	76 2f       	mov	r23, r22
    18d2:	72 95       	swap	r23
    18d4:	76 95       	lsr	r23
    18d6:	76 95       	lsr	r23
    18d8:	73 70       	andi	r23, 0x03	; 3
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	e6 2f       	mov	r30, r22
    18de:	ee 0f       	add	r30, r30
    18e0:	ee 0f       	add	r30, r30
    18e2:	8e 2f       	mov	r24, r30
    18e4:	87 2b       	or	r24, r23
    18e6:	76 2f       	mov	r23, r22
    18e8:	72 95       	swap	r23
    18ea:	76 95       	lsr	r23
    18ec:	76 95       	lsr	r23
    18ee:	73 70       	andi	r23, 0x03	; 3
    18f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    18f2:	e6 2f       	mov	r30, r22
    18f4:	ee 0f       	add	r30, r30
    18f6:	ee 0f       	add	r30, r30
    18f8:	9e 2f       	mov	r25, r30
    18fa:	97 2b       	or	r25, r23
    18fc:	62 95       	swap	r22
    18fe:	66 95       	lsr	r22
    1900:	66 95       	lsr	r22
    1902:	63 70       	andi	r22, 0x03	; 3
    1904:	7d 85       	ldd	r23, Y+13	; 0x0d
    1906:	73 70       	andi	r23, 0x03	; 3
    1908:	77 0f       	add	r23, r23
    190a:	77 0f       	add	r23, r23
    190c:	a7 2f       	mov	r26, r23
    190e:	a6 2b       	or	r26, r22
    1910:	69 85       	ldd	r22, Y+9	; 0x09
    1912:	6f 77       	andi	r22, 0x7F	; 127
    1914:	96 2e       	mov	r9, r22
    1916:	bc 01       	movw	r22, r24
    1918:	8a 2f       	mov	r24, r26
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__umulsidi3>
    1920:	e0 ea       	ldi	r30, 0xA0	; 160
    1922:	ae 2e       	mov	r10, r30
    1924:	f6 e8       	ldi	r31, 0x86	; 134
    1926:	bf 2e       	mov	r11, r31
    1928:	cc 24       	eor	r12, r12
    192a:	c3 94       	inc	r12
    192c:	d1 2c       	mov	r13, r1
    192e:	e1 2c       	mov	r14, r1
    1930:	f1 2c       	mov	r15, r1
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    193a:	59 01       	movw	r10, r18
    193c:	6a 01       	movw	r12, r20
    193e:	7b 01       	movw	r14, r22
    1940:	8c 01       	movw	r16, r24
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e4       	ldi	r19, 0x40	; 64
    1946:	4d e0       	ldi	r20, 0x0D	; 13
    1948:	53 e0       	ldi	r21, 0x03	; 3
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    1956:	82 2f       	mov	r24, r18
    1958:	29 2d       	mov	r18, r9
    195a:	48 2f       	mov	r20, r24
    195c:	53 2f       	mov	r21, r19
    195e:	65 e0       	ldi	r22, 0x05	; 5
    1960:	9e c0       	rjmp	.+316    	; 0x1a9e <_ZN9INA_Class10initDeviceEh+0x20a>
    1962:	2c 89       	ldd	r18, Y+20	; 0x14
    1964:	3d 89       	ldd	r19, Y+21	; 0x15
    1966:	4e 89       	ldd	r20, Y+22	; 0x16
    1968:	5f 89       	ldd	r21, Y+23	; 0x17
    196a:	6a 85       	ldd	r22, Y+10	; 0x0a
    196c:	76 2f       	mov	r23, r22
    196e:	72 95       	swap	r23
    1970:	76 95       	lsr	r23
    1972:	76 95       	lsr	r23
    1974:	73 70       	andi	r23, 0x03	; 3
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	e6 2f       	mov	r30, r22
    197a:	ee 0f       	add	r30, r30
    197c:	ee 0f       	add	r30, r30
    197e:	8e 2f       	mov	r24, r30
    1980:	87 2b       	or	r24, r23
    1982:	76 2f       	mov	r23, r22
    1984:	72 95       	swap	r23
    1986:	76 95       	lsr	r23
    1988:	76 95       	lsr	r23
    198a:	73 70       	andi	r23, 0x03	; 3
    198c:	6c 85       	ldd	r22, Y+12	; 0x0c
    198e:	e6 2f       	mov	r30, r22
    1990:	ee 0f       	add	r30, r30
    1992:	ee 0f       	add	r30, r30
    1994:	9e 2f       	mov	r25, r30
    1996:	97 2b       	or	r25, r23
    1998:	62 95       	swap	r22
    199a:	66 95       	lsr	r22
    199c:	66 95       	lsr	r22
    199e:	63 70       	andi	r22, 0x03	; 3
    19a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    19a2:	73 70       	andi	r23, 0x03	; 3
    19a4:	77 0f       	add	r23, r23
    19a6:	77 0f       	add	r23, r23
    19a8:	a7 2f       	mov	r26, r23
    19aa:	a6 2b       	or	r26, r22
    19ac:	69 85       	ldd	r22, Y+9	; 0x09
    19ae:	6f 77       	andi	r22, 0x7F	; 127
    19b0:	96 2e       	mov	r9, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	8a 2f       	mov	r24, r26
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__umulsidi3>
    19bc:	b0 ea       	ldi	r27, 0xA0	; 160
    19be:	ab 2e       	mov	r10, r27
    19c0:	16 e8       	ldi	r17, 0x86	; 134
    19c2:	b1 2e       	mov	r11, r17
    19c4:	cc 24       	eor	r12, r12
    19c6:	c3 94       	inc	r12
    19c8:	d1 2c       	mov	r13, r1
    19ca:	e1 2c       	mov	r14, r1
    19cc:	f1 2c       	mov	r15, r1
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    19d6:	59 01       	movw	r10, r18
    19d8:	6a 01       	movw	r12, r20
    19da:	7b 01       	movw	r14, r22
    19dc:	8c 01       	movw	r16, r24
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a e6       	ldi	r20, 0x6A	; 106
    19e4:	58 e1       	ldi	r21, 0x18	; 24
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivdi3>
    19f2:	82 2f       	mov	r24, r18
    19f4:	29 2d       	mov	r18, r9
    19f6:	48 2f       	mov	r20, r24
    19f8:	53 2f       	mov	r21, r19
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	ce 01       	movw	r24, r28
    19fe:	26 df       	rcall	.-436    	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    1a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a02:	58 2f       	mov	r21, r24
    1a04:	52 95       	swap	r21
    1a06:	56 95       	lsr	r21
    1a08:	56 95       	lsr	r21
    1a0a:	53 70       	andi	r21, 0x03	; 3
    1a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0e:	69 2f       	mov	r22, r25
    1a10:	66 0f       	add	r22, r22
    1a12:	66 0f       	add	r22, r22
    1a14:	26 2f       	mov	r18, r22
    1a16:	25 2b       	or	r18, r21
    1a18:	59 2f       	mov	r21, r25
    1a1a:	52 95       	swap	r21
    1a1c:	56 95       	lsr	r21
    1a1e:	56 95       	lsr	r21
    1a20:	53 70       	andi	r21, 0x03	; 3
    1a22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a24:	69 2f       	mov	r22, r25
    1a26:	66 0f       	add	r22, r22
    1a28:	66 0f       	add	r22, r22
    1a2a:	36 2f       	mov	r19, r22
    1a2c:	35 2b       	or	r19, r21
    1a2e:	59 2f       	mov	r21, r25
    1a30:	52 95       	swap	r21
    1a32:	56 95       	lsr	r21
    1a34:	56 95       	lsr	r21
    1a36:	53 70       	andi	r21, 0x03	; 3
    1a38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a3a:	93 70       	andi	r25, 0x03	; 3
    1a3c:	99 0f       	add	r25, r25
    1a3e:	99 0f       	add	r25, r25
    1a40:	49 2f       	mov	r20, r25
    1a42:	45 2b       	or	r20, r21
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	19 85       	ldd	r17, Y+9	; 0x09
    1a48:	a1 2f       	mov	r26, r17
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	aa 27       	eor	r26, r26
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	8f 73       	andi	r24, 0x3F	; 63
    1a52:	88 0f       	add	r24, r24
    1a54:	a8 2b       	or	r26, r24
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	0e 94 19 23 	call	0x4632	; 0x4632 <__muluhisi3>
    1a5c:	28 ee       	ldi	r18, 0xE8	; 232
    1a5e:	33 e0       	ldi	r19, 0x03	; 3
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	0e 94 be 22 	call	0x457c	; 0x457c <__udivmodsi4>
    1a68:	29 32       	cpi	r18, 0x29	; 41
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	40 f0       	brcs	.+16     	; 0x1a7e <_ZN9INA_Class10initDeviceEh+0x1ea>
    1a6e:	21 35       	cpi	r18, 0x51	; 81
    1a70:	31 05       	cpc	r19, r1
    1a72:	38 f0       	brcs	.+14     	; 0x1a82 <_ZN9INA_Class10initDeviceEh+0x1ee>
    1a74:	21 3a       	cpi	r18, 0xA1	; 161
    1a76:	31 05       	cpc	r19, r1
    1a78:	30 f0       	brcs	.+12     	; 0x1a86 <_ZN9INA_Class10initDeviceEh+0x1f2>
    1a7a:	43 e0       	ldi	r20, 0x03	; 3
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <_ZN9INA_Class10initDeviceEh+0x1f4>
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <_ZN9INA_Class10initDeviceEh+0x1f4>
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <_ZN9INA_Class10initDeviceEh+0x1f4>
    1a86:	42 e0       	ldi	r20, 0x02	; 2
    1a88:	21 2f       	mov	r18, r17
    1a8a:	2f 77       	andi	r18, 0x7F	; 127
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	54 2f       	mov	r21, r20
    1a90:	44 27       	eor	r20, r20
    1a92:	55 0f       	add	r21, r21
    1a94:	55 0f       	add	r21, r21
    1a96:	55 0f       	add	r21, r21
    1a98:	4f 69       	ori	r20, 0x9F	; 159
    1a9a:	51 62       	ori	r21, 0x21	; 33
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	ca ce       	rjmp	.-620    	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	9f 90       	pop	r9
    1ace:	08 95       	ret

00001ad0 <_ZN9INA_Class8readWordEhh>:
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	d6 2f       	mov	r29, r22
    1ad6:	c4 2f       	mov	r28, r20
    1ad8:	64 2f       	mov	r22, r20
    1ada:	8d ef       	ldi	r24, 0xFD	; 253
    1adc:	99 e0       	ldi	r25, 0x09	; 9
    1ade:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN7TwoWire17beginTransmissionEh>
    1ae2:	6d 2f       	mov	r22, r29
    1ae4:	8d ef       	ldi	r24, 0xFD	; 253
    1ae6:	99 e0       	ldi	r25, 0x09	; 9
    1ae8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7TwoWire5writeEh>
    1aec:	8d ef       	ldi	r24, 0xFD	; 253
    1aee:	99 e0       	ldi	r25, 0x09	; 9
    1af0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZN7TwoWire15endTransmissionEv>
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 55 19 	call	0x32aa	; 0x32aa <delayMicroseconds>
    1afc:	42 e0       	ldi	r20, 0x02	; 2
    1afe:	6c 2f       	mov	r22, r28
    1b00:	8d ef       	ldi	r24, 0xFD	; 253
    1b02:	99 e0       	ldi	r25, 0x09	; 9
    1b04:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <_ZN7TwoWire11requestFromEhh>
    1b08:	8d ef       	ldi	r24, 0xFD	; 253
    1b0a:	99 e0       	ldi	r25, 0x09	; 9
    1b0c:	c9 d7       	rcall	.+3986   	; 0x2aa0 <_ZN7TwoWire4readEv>
    1b0e:	d8 2f       	mov	r29, r24
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	c8 2f       	mov	r28, r24
    1b14:	8d ef       	ldi	r24, 0xFD	; 253
    1b16:	99 e0       	ldi	r25, 0x09	; 9
    1b18:	c3 d7       	rcall	.+3974   	; 0x2aa0 <_ZN7TwoWire4readEv>
    1b1a:	8c 2b       	or	r24, r28
    1b1c:	9d 2b       	or	r25, r29
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <_ZN9INA_Class5beginEhmh>:
    1b24:	5f 92       	push	r5
    1b26:	6f 92       	push	r6
    1b28:	7f 92       	push	r7
    1b2a:	8f 92       	push	r8
    1b2c:	9f 92       	push	r9
    1b2e:	af 92       	push	r10
    1b30:	bf 92       	push	r11
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	64 97       	sbiw	r28, 0x14	; 20
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	7c 01       	movw	r14, r24
    1b54:	96 2e       	mov	r9, r22
    1b56:	b2 2e       	mov	r11, r18
    1b58:	d3 2e       	mov	r13, r19
    1b5a:	c4 2e       	mov	r12, r20
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 11       	cpse	r24, r1
    1b62:	ea c0       	rjmp	.+468    	; 0x1d38 <_ZN9INA_Class5beginEhmh+0x214>
    1b64:	8d ef       	ldi	r24, 0xFD	; 253
    1b66:	99 e0       	ldi	r25, 0x09	; 9
    1b68:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN7TwoWire5beginEv>
    1b6c:	10 e4       	ldi	r17, 0x40	; 64
    1b6e:	89 2c       	mov	r8, r9
    1b70:	87 94       	ror	r8
    1b72:	88 24       	eor	r8, r8
    1b74:	87 94       	ror	r8
    1b76:	7b 2c       	mov	r7, r11
    1b78:	72 94       	swap	r7
    1b7a:	77 0c       	add	r7, r7
    1b7c:	77 0c       	add	r7, r7
    1b7e:	30 ec       	ldi	r19, 0xC0	; 192
    1b80:	73 22       	and	r7, r19
    1b82:	0b 2d       	mov	r16, r11
    1b84:	06 95       	lsr	r16
    1b86:	06 95       	lsr	r16
    1b88:	6d 2c       	mov	r6, r13
    1b8a:	62 94       	swap	r6
    1b8c:	66 0c       	add	r6, r6
    1b8e:	66 0c       	add	r6, r6
    1b90:	40 ec       	ldi	r20, 0xC0	; 192
    1b92:	64 22       	and	r6, r20
    1b94:	d6 94       	lsr	r13
    1b96:	d6 94       	lsr	r13
    1b98:	5c 2c       	mov	r5, r12
    1b9a:	52 94       	swap	r5
    1b9c:	55 0c       	add	r5, r5
    1b9e:	55 0c       	add	r5, r5
    1ba0:	50 ec       	ldi	r21, 0xC0	; 192
    1ba2:	55 22       	and	r5, r21
    1ba4:	c6 94       	lsr	r12
    1ba6:	c6 94       	lsr	r12
    1ba8:	61 2f       	mov	r22, r17
    1baa:	8d ef       	ldi	r24, 0xFD	; 253
    1bac:	99 e0       	ldi	r25, 0x09	; 9
    1bae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN7TwoWire17beginTransmissionEh>
    1bb2:	8d ef       	ldi	r24, 0xFD	; 253
    1bb4:	99 e0       	ldi	r25, 0x09	; 9
    1bb6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZN7TwoWire15endTransmissionEv>
    1bba:	81 11       	cpse	r24, r1
    1bbc:	b8 c0       	rjmp	.+368    	; 0x1d2e <_ZN9INA_Class5beginEhmh+0x20a>
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <_ZN9INA_Class5beginEhmh+0xa4>
    1bc6:	b3 c0       	rjmp	.+358    	; 0x1d2e <_ZN9INA_Class5beginEhmh+0x20a>
    1bc8:	41 2f       	mov	r20, r17
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	c7 01       	movw	r24, r14
    1bce:	80 df       	rcall	.-256    	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    1bd0:	5c 01       	movw	r10, r24
    1bd2:	21 2f       	mov	r18, r17
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	50 e8       	ldi	r21, 0x80	; 128
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	c7 01       	movw	r24, r14
    1bdc:	37 de       	rcall	.-914    	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    1bde:	41 2f       	mov	r20, r17
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	c7 01       	movw	r24, r14
    1be4:	75 df       	rcall	.-278    	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    1be6:	9c 01       	movw	r18, r24
    1be8:	81 15       	cp	r24, r1
    1bea:	90 48       	sbci	r25, 0x80	; 128
    1bec:	31 f4       	brne	.+12     	; 0x1bfa <_ZN9INA_Class5beginEhmh+0xd6>
    1bee:	21 2f       	mov	r18, r17
    1bf0:	a5 01       	movw	r20, r10
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	2a de       	rcall	.-940    	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    1bf8:	9a c0       	rjmp	.+308    	; 0x1d2e <_ZN9INA_Class5beginEhmh+0x20a>
    1bfa:	2f 39       	cpi	r18, 0x9F	; 159
    1bfc:	89 e3       	ldi	r24, 0x39	; 57
    1bfe:	38 07       	cpc	r19, r24
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <_ZN9INA_Class5beginEhmh+0xe8>
    1c02:	f7 01       	movw	r30, r14
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	80 7f       	andi	r24, 0xF0	; 240
    1c08:	82 83       	std	Z+2, r24	; 0x02
    1c0a:	29 c0       	rjmp	.+82     	; 0x1c5e <_ZN9INA_Class5beginEhmh+0x13a>
    1c0c:	27 32       	cpi	r18, 0x27	; 39
    1c0e:	f1 e4       	ldi	r31, 0x41	; 65
    1c10:	3f 07       	cpc	r19, r31
    1c12:	a1 f4       	brne	.+40     	; 0x1c3c <_ZN9INA_Class5beginEhmh+0x118>
    1c14:	41 2f       	mov	r20, r17
    1c16:	6f ef       	ldi	r22, 0xFF	; 255
    1c18:	c7 01       	movw	r24, r14
    1c1a:	5a df       	rcall	.-332    	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	f7 01       	movw	r30, r14
    1c20:	92 81       	ldd	r25, Z+2	; 0x02
    1c22:	90 7f       	andi	r25, 0xF0	; 240
    1c24:	20 36       	cpi	r18, 0x60	; 96
    1c26:	f2 e2       	ldi	r31, 0x22	; 34
    1c28:	3f 07       	cpc	r19, r31
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <_ZN9INA_Class5beginEhmh+0x10c>
    1c2c:	91 60       	ori	r25, 0x01	; 1
    1c2e:	15 c0       	rjmp	.+42     	; 0x1c5a <_ZN9INA_Class5beginEhmh+0x136>
    1c30:	23 2b       	or	r18, r19
    1c32:	11 f0       	breq	.+4      	; 0x1c38 <_ZN9INA_Class5beginEhmh+0x114>
    1c34:	92 60       	ori	r25, 0x02	; 2
    1c36:	11 c0       	rjmp	.+34     	; 0x1c5a <_ZN9INA_Class5beginEhmh+0x136>
    1c38:	93 60       	ori	r25, 0x03	; 3
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <_ZN9INA_Class5beginEhmh+0x136>
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	92 81       	ldd	r25, Z+2	; 0x02
    1c40:	90 7f       	andi	r25, 0xF0	; 240
    1c42:	27 32       	cpi	r18, 0x27	; 39
    1c44:	f1 e6       	ldi	r31, 0x61	; 97
    1c46:	3f 07       	cpc	r19, r31
    1c48:	11 f4       	brne	.+4      	; 0x1c4e <_ZN9INA_Class5beginEhmh+0x12a>
    1c4a:	94 60       	ori	r25, 0x04	; 4
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <_ZN9INA_Class5beginEhmh+0x136>
    1c4e:	27 32       	cpi	r18, 0x27	; 39
    1c50:	31 47       	sbci	r19, 0x71	; 113
    1c52:	11 f4       	brne	.+4      	; 0x1c58 <_ZN9INA_Class5beginEhmh+0x134>
    1c54:	95 60       	ori	r25, 0x05	; 5
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <_ZN9INA_Class5beginEhmh+0x136>
    1c58:	98 60       	ori	r25, 0x08	; 8
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	92 83       	std	Z+2, r25	; 0x02
    1c5e:	f7 01       	movw	r30, r14
    1c60:	22 81       	ldd	r18, Z+2	; 0x02
    1c62:	82 2f       	mov	r24, r18
    1c64:	8f 70       	andi	r24, 0x0F	; 15
    1c66:	88 30       	cpi	r24, 0x08	; 8
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <_ZN9INA_Class5beginEhmh+0x148>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_ZN9INA_Class5beginEhmh+0x20a>
    1c6c:	31 2f       	mov	r19, r17
    1c6e:	3f 77       	andi	r19, 0x7F	; 127
    1c70:	38 29       	or	r19, r8
    1c72:	33 83       	std	Z+3, r19	; 0x03
    1c74:	49 2d       	mov	r20, r9
    1c76:	46 95       	lsr	r20
    1c78:	4f 73       	andi	r20, 0x3F	; 63
    1c7a:	47 29       	or	r20, r7
    1c7c:	44 83       	std	Z+4, r20	; 0x04
    1c7e:	50 2f       	mov	r21, r16
    1c80:	56 29       	or	r21, r6
    1c82:	55 83       	std	Z+5, r21	; 0x05
    1c84:	6d 2d       	mov	r22, r13
    1c86:	65 29       	or	r22, r5
    1c88:	66 83       	std	Z+6, r22	; 0x06
    1c8a:	77 81       	ldd	r23, Z+7	; 0x07
    1c8c:	7c 7f       	andi	r23, 0xFC	; 252
    1c8e:	8c 2d       	mov	r24, r12
    1c90:	83 70       	andi	r24, 0x03	; 3
    1c92:	78 2b       	or	r23, r24
    1c94:	77 83       	std	Z+7, r23	; 0x07
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	20 dc       	rcall	.-1984   	; 0x14dc <_ZN6inaDetC1E9inaEEPROM>
    1c9c:	84 e1       	ldi	r24, 0x14	; 20
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	31 96       	adiw	r30, 0x01	; 1
    1ca2:	d7 01       	movw	r26, r14
    1ca4:	18 96       	adiw	r26, 0x08	; 8
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	0d 92       	st	X+, r0
    1caa:	8a 95       	dec	r24
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <_ZN9INA_Class5beginEhmh+0x182>
    1cae:	f7 01       	movw	r30, r14
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	8f 70       	andi	r24, 0x0F	; 15
    1cb4:	85 30       	cpi	r24, 0x05	; 5
    1cb6:	71 f5       	brne	.+92     	; 0x1d14 <_ZN9INA_Class5beginEhmh+0x1f0>
    1cb8:	80 85       	ldd	r24, Z+8	; 0x08
    1cba:	80 7f       	andi	r24, 0xF0	; 240
    1cbc:	85 60       	ori	r24, 0x05	; 5
    1cbe:	80 87       	std	Z+8, r24	; 0x08
    1cc0:	60 81       	ld	r22, Z
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	e7 dd       	rcall	.-1074   	; 0x1894 <_ZN9INA_Class10initDeviceEh>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	80 81       	ld	r24, Z
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	aa 24       	eor	r10, r10
    1cd0:	aa 94       	dec	r10
    1cd2:	b1 2c       	mov	r11, r1
    1cd4:	b5 01       	movw	r22, r10
    1cd6:	0e 94 aa 22 	call	0x4554	; 0x4554 <__udivmodhi4>
    1cda:	80 83       	st	Z, r24
    1cdc:	90 85       	ldd	r25, Z+8	; 0x08
    1cde:	90 7f       	andi	r25, 0xF0	; 240
    1ce0:	96 60       	ori	r25, 0x06	; 6
    1ce2:	90 87       	std	Z+8, r25	; 0x08
    1ce4:	68 2f       	mov	r22, r24
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	d5 dd       	rcall	.-1110   	; 0x1894 <_ZN9INA_Class10initDeviceEh>
    1cea:	f7 01       	movw	r30, r14
    1cec:	80 81       	ld	r24, Z
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	b5 01       	movw	r22, r10
    1cf4:	0e 94 aa 22 	call	0x4554	; 0x4554 <__udivmodhi4>
    1cf8:	80 83       	st	Z, r24
    1cfa:	90 85       	ldd	r25, Z+8	; 0x08
    1cfc:	90 7f       	andi	r25, 0xF0	; 240
    1cfe:	97 60       	ori	r25, 0x07	; 7
    1d00:	90 87       	std	Z+8, r25	; 0x08
    1d02:	68 2f       	mov	r22, r24
    1d04:	c7 01       	movw	r24, r14
    1d06:	c6 dd       	rcall	.-1140   	; 0x1894 <_ZN9INA_Class10initDeviceEh>
    1d08:	f7 01       	movw	r30, r14
    1d0a:	80 81       	ld	r24, Z
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	b5 01       	movw	r22, r10
    1d12:	0a c0       	rjmp	.+20     	; 0x1d28 <_ZN9INA_Class5beginEhmh+0x204>
    1d14:	f7 01       	movw	r30, r14
    1d16:	60 81       	ld	r22, Z
    1d18:	c7 01       	movw	r24, r14
    1d1a:	bc dd       	rcall	.-1160   	; 0x1894 <_ZN9INA_Class10initDeviceEh>
    1d1c:	f7 01       	movw	r30, r14
    1d1e:	80 81       	ld	r24, Z
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	6f ef       	ldi	r22, 0xFF	; 255
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	0e 94 aa 22 	call	0x4554	; 0x4554 <__udivmodhi4>
    1d2c:	80 83       	st	Z, r24
    1d2e:	1f 5f       	subi	r17, 0xFF	; 255
    1d30:	10 38       	cpi	r17, 0x80	; 128
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <_ZN9INA_Class5beginEhmh+0x212>
    1d34:	39 cf       	rjmp	.-398    	; 0x1ba8 <_ZN9INA_Class5beginEhmh+0x84>
    1d36:	06 c0       	rjmp	.+12     	; 0x1d44 <_ZN9INA_Class5beginEhmh+0x220>
    1d38:	60 2f       	mov	r22, r16
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	f6 dc       	rcall	.-1556   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    1d3e:	60 2f       	mov	r22, r16
    1d40:	c7 01       	movw	r24, r14
    1d42:	a8 dd       	rcall	.-1200   	; 0x1894 <_ZN9INA_Class10initDeviceEh>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	f7 01       	movw	r30, r14
    1d48:	81 83       	std	Z+1, r24	; 0x01
    1d4a:	80 81       	ld	r24, Z
    1d4c:	64 96       	adiw	r28, 0x14	; 20
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	bf 90       	pop	r11
    1d6a:	af 90       	pop	r10
    1d6c:	9f 90       	pop	r9
    1d6e:	8f 90       	pop	r8
    1d70:	7f 90       	pop	r7
    1d72:	6f 90       	pop	r6
    1d74:	5f 90       	pop	r5
    1d76:	08 95       	ret

00001d78 <_ZN9INA_Class16setBusConversionEmh>:
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
    1d8a:	6a 01       	movw	r12, r20
    1d8c:	7b 01       	movw	r14, r22
    1d8e:	02 2f       	mov	r16, r18
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	68 81       	ld	r22, Y
    1d94:	16 17       	cp	r17, r22
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <_ZN9INA_Class16setBusConversionEmh+0x22>
    1d98:	f2 c0       	rjmp	.+484    	; 0x1f7e <_ZN9INA_Class16setBusConversionEmh+0x206>
    1d9a:	0f 3f       	cpi	r16, 0xFF	; 255
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <_ZN9INA_Class16setBusConversionEmh+0x30>
    1d9e:	80 2f       	mov	r24, r16
    1da0:	0e 94 9e 22 	call	0x453c	; 0x453c <__udivmodqi4>
    1da4:	19 13       	cpse	r17, r25
    1da6:	e9 c0       	rjmp	.+466    	; 0x1f7a <_ZN9INA_Class16setBusConversionEmh+0x202>
    1da8:	61 2f       	mov	r22, r17
    1daa:	ce 01       	movw	r24, r28
    1dac:	be dc       	rcall	.-1668   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    1dae:	49 85       	ldd	r20, Y+9	; 0x09
    1db0:	4f 77       	andi	r20, 0x7F	; 127
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	ce 01       	movw	r24, r28
    1db6:	8c de       	rcall	.-744    	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    1db8:	58 85       	ldd	r21, Y+8	; 0x08
    1dba:	25 2f       	mov	r18, r21
    1dbc:	2f 70       	andi	r18, 0x0F	; 15
    1dbe:	21 f0       	breq	.+8      	; 0x1dc8 <_ZN9INA_Class16setBusConversionEmh+0x50>
    1dc0:	28 30       	cpi	r18, 0x08	; 8
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <_ZN9INA_Class16setBusConversionEmh+0x4e>
    1dc4:	d4 c0       	rjmp	.+424    	; 0x1f6e <_ZN9INA_Class16setBusConversionEmh+0x1f6>
    1dc6:	74 c0       	rjmp	.+232    	; 0x1eb0 <_ZN9INA_Class16setBusConversionEmh+0x138>
    1dc8:	24 e0       	ldi	r18, 0x04	; 4
    1dca:	c2 16       	cp	r12, r18
    1dcc:	2a e0       	ldi	r18, 0x0A	; 10
    1dce:	d2 06       	cpc	r13, r18
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	e2 06       	cpc	r14, r18
    1dd4:	f1 04       	cpc	r15, r1
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <_ZN9INA_Class16setBusConversionEmh+0x62>
    1dd8:	45 c0       	rjmp	.+138    	; 0x1e64 <_ZN9INA_Class16setBusConversionEmh+0xec>
    1dda:	42 e0       	ldi	r20, 0x02	; 2
    1ddc:	c4 16       	cp	r12, r20
    1dde:	45 e8       	ldi	r20, 0x85	; 133
    1de0:	d4 06       	cpc	r13, r20
    1de2:	e1 04       	cpc	r14, r1
    1de4:	f1 04       	cpc	r15, r1
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <_ZN9INA_Class16setBusConversionEmh+0x72>
    1de8:	40 c0       	rjmp	.+128    	; 0x1e6a <_ZN9INA_Class16setBusConversionEmh+0xf2>
    1dea:	2c e7       	ldi	r18, 0x7C	; 124
    1dec:	c2 16       	cp	r12, r18
    1dee:	22 e4       	ldi	r18, 0x42	; 66
    1df0:	d2 06       	cpc	r13, r18
    1df2:	e1 04       	cpc	r14, r1
    1df4:	f1 04       	cpc	r15, r1
    1df6:	e0 f5       	brcc	.+120    	; 0x1e70 <_ZN9INA_Class16setBusConversionEmh+0xf8>
    1df8:	4e e3       	ldi	r20, 0x3E	; 62
    1dfa:	c4 16       	cp	r12, r20
    1dfc:	41 e2       	ldi	r20, 0x21	; 33
    1dfe:	d4 06       	cpc	r13, r20
    1e00:	e1 04       	cpc	r14, r1
    1e02:	f1 04       	cpc	r15, r1
    1e04:	c0 f5       	brcc	.+112    	; 0x1e76 <_ZN9INA_Class16setBusConversionEmh+0xfe>
    1e06:	24 ea       	ldi	r18, 0xA4	; 164
    1e08:	c2 16       	cp	r12, r18
    1e0a:	20 e1       	ldi	r18, 0x10	; 16
    1e0c:	d2 06       	cpc	r13, r18
    1e0e:	e1 04       	cpc	r14, r1
    1e10:	f1 04       	cpc	r15, r1
    1e12:	a0 f5       	brcc	.+104    	; 0x1e7c <_ZN9INA_Class16setBusConversionEmh+0x104>
    1e14:	42 e5       	ldi	r20, 0x52	; 82
    1e16:	c4 16       	cp	r12, r20
    1e18:	48 e0       	ldi	r20, 0x08	; 8
    1e1a:	d4 06       	cpc	r13, r20
    1e1c:	e1 04       	cpc	r14, r1
    1e1e:	f1 04       	cpc	r15, r1
    1e20:	80 f5       	brcc	.+96     	; 0x1e82 <_ZN9INA_Class16setBusConversionEmh+0x10a>
    1e22:	24 e2       	ldi	r18, 0x24	; 36
    1e24:	c2 16       	cp	r12, r18
    1e26:	24 e0       	ldi	r18, 0x04	; 4
    1e28:	d2 06       	cpc	r13, r18
    1e2a:	e1 04       	cpc	r14, r1
    1e2c:	f1 04       	cpc	r15, r1
    1e2e:	60 f5       	brcc	.+88     	; 0x1e88 <_ZN9INA_Class16setBusConversionEmh+0x110>
    1e30:	44 e1       	ldi	r20, 0x14	; 20
    1e32:	c4 16       	cp	r12, r20
    1e34:	42 e0       	ldi	r20, 0x02	; 2
    1e36:	d4 06       	cpc	r13, r20
    1e38:	e1 04       	cpc	r14, r1
    1e3a:	f1 04       	cpc	r15, r1
    1e3c:	40 f5       	brcc	.+80     	; 0x1e8e <_ZN9INA_Class16setBusConversionEmh+0x116>
    1e3e:	24 e1       	ldi	r18, 0x14	; 20
    1e40:	c2 16       	cp	r12, r18
    1e42:	21 e0       	ldi	r18, 0x01	; 1
    1e44:	d2 06       	cpc	r13, r18
    1e46:	e1 04       	cpc	r14, r1
    1e48:	f1 04       	cpc	r15, r1
    1e4a:	20 f5       	brcc	.+72     	; 0x1e94 <_ZN9INA_Class16setBusConversionEmh+0x11c>
    1e4c:	31 e0       	ldi	r19, 0x01	; 1
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	44 e9       	ldi	r20, 0x94	; 148
    1e52:	c4 16       	cp	r12, r20
    1e54:	d1 04       	cpc	r13, r1
    1e56:	e1 04       	cpc	r14, r1
    1e58:	f1 04       	cpc	r15, r1
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <_ZN9INA_Class16setBusConversionEmh+0xe6>
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	63 2f       	mov	r22, r19
    1e60:	72 2f       	mov	r23, r18
    1e62:	1a c0       	rjmp	.+52     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e64:	6f e0       	ldi	r22, 0x0F	; 15
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	17 c0       	rjmp	.+46     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e6a:	6e e0       	ldi	r22, 0x0E	; 14
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e70:	6d e0       	ldi	r22, 0x0D	; 13
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	11 c0       	rjmp	.+34     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e76:	6c e0       	ldi	r22, 0x0C	; 12
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e7c:	6b e0       	ldi	r22, 0x0B	; 11
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e82:	6a e0       	ldi	r22, 0x0A	; 10
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	08 c0       	rjmp	.+16     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e88:	69 e0       	ldi	r22, 0x09	; 9
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e8e:	68 e0       	ldi	r22, 0x08	; 8
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <_ZN9INA_Class16setBusConversionEmh+0x120>
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	9c 01       	movw	r18, r24
    1e9a:	2f 77       	andi	r18, 0x7F	; 127
    1e9c:	38 7f       	andi	r19, 0xF8	; 248
    1e9e:	76 95       	lsr	r23
    1ea0:	76 2f       	mov	r23, r22
    1ea2:	66 27       	eor	r22, r22
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	82 2b       	or	r24, r18
    1eac:	93 2b       	or	r25, r19
    1eae:	5f c0       	rjmp	.+190    	; 0x1f6e <_ZN9INA_Class16setBusConversionEmh+0x1f6>
    1eb0:	28 e0       	ldi	r18, 0x08	; 8
    1eb2:	c2 16       	cp	r12, r18
    1eb4:	22 e4       	ldi	r18, 0x42	; 66
    1eb6:	d2 06       	cpc	r13, r18
    1eb8:	21 e0       	ldi	r18, 0x01	; 1
    1eba:	e2 06       	cpc	r14, r18
    1ebc:	f1 04       	cpc	r15, r1
    1ebe:	78 f5       	brcc	.+94     	; 0x1f1e <_ZN9INA_Class16setBusConversionEmh+0x1a6>
    1ec0:	48 e5       	ldi	r20, 0x58	; 88
    1ec2:	c4 16       	cp	r12, r20
    1ec4:	42 ea       	ldi	r20, 0xA2	; 162
    1ec6:	d4 06       	cpc	r13, r20
    1ec8:	e1 04       	cpc	r14, r1
    1eca:	f1 04       	cpc	r15, r1
    1ecc:	58 f5       	brcc	.+86     	; 0x1f24 <_ZN9INA_Class16setBusConversionEmh+0x1ac>
    1ece:	28 ea       	ldi	r18, 0xA8	; 168
    1ed0:	c2 16       	cp	r12, r18
    1ed2:	22 e5       	ldi	r18, 0x52	; 82
    1ed4:	d2 06       	cpc	r13, r18
    1ed6:	e1 04       	cpc	r14, r1
    1ed8:	f1 04       	cpc	r15, r1
    1eda:	38 f5       	brcc	.+78     	; 0x1f2a <_ZN9INA_Class16setBusConversionEmh+0x1b2>
    1edc:	48 ef       	ldi	r20, 0xF8	; 248
    1ede:	c4 16       	cp	r12, r20
    1ee0:	4a e2       	ldi	r20, 0x2A	; 42
    1ee2:	d4 06       	cpc	r13, r20
    1ee4:	e1 04       	cpc	r14, r1
    1ee6:	f1 04       	cpc	r15, r1
    1ee8:	18 f5       	brcc	.+70     	; 0x1f30 <_ZN9INA_Class16setBusConversionEmh+0x1b8>
    1eea:	2c e4       	ldi	r18, 0x4C	; 76
    1eec:	c2 16       	cp	r12, r18
    1eee:	22 e0       	ldi	r18, 0x02	; 2
    1ef0:	d2 06       	cpc	r13, r18
    1ef2:	e1 04       	cpc	r14, r1
    1ef4:	f1 04       	cpc	r15, r1
    1ef6:	f8 f4       	brcc	.+62     	; 0x1f36 <_ZN9INA_Class16setBusConversionEmh+0x1be>
    1ef8:	4c e4       	ldi	r20, 0x4C	; 76
    1efa:	c4 16       	cp	r12, r20
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	d4 06       	cpc	r13, r20
    1f00:	e1 04       	cpc	r14, r1
    1f02:	f1 04       	cpc	r15, r1
    1f04:	d8 f4       	brcc	.+54     	; 0x1f3c <_ZN9INA_Class16setBusConversionEmh+0x1c4>
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	2c ec       	ldi	r18, 0xCC	; 204
    1f0c:	c2 16       	cp	r12, r18
    1f0e:	d1 04       	cpc	r13, r1
    1f10:	e1 04       	cpc	r14, r1
    1f12:	f1 04       	cpc	r15, r1
    1f14:	08 f4       	brcc	.+2      	; 0x1f18 <_ZN9INA_Class16setBusConversionEmh+0x1a0>
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	26 2f       	mov	r18, r22
    1f1a:	34 2f       	mov	r19, r20
    1f1c:	11 c0       	rjmp	.+34     	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f1e:	27 e0       	ldi	r18, 0x07	; 7
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f24:	26 e0       	ldi	r18, 0x06	; 6
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	0b c0       	rjmp	.+22     	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f2a:	25 e0       	ldi	r18, 0x05	; 5
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	08 c0       	rjmp	.+16     	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f30:	24 e0       	ldi	r18, 0x04	; 4
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f36:	23 e0       	ldi	r18, 0x03	; 3
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1f3c:	22 e0       	ldi	r18, 0x02	; 2
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	5f 70       	andi	r21, 0x0F	; 15
    1f42:	bc 01       	movw	r22, r24
    1f44:	6f 73       	andi	r22, 0x3F	; 63
    1f46:	7e 7f       	andi	r23, 0xFE	; 254
    1f48:	51 30       	cpi	r21, 0x01	; 1
    1f4a:	19 f0       	breq	.+6      	; 0x1f52 <_ZN9INA_Class16setBusConversionEmh+0x1da>
    1f4c:	55 50       	subi	r21, 0x05	; 5
    1f4e:	53 30       	cpi	r21, 0x03	; 3
    1f50:	30 f4       	brcc	.+12     	; 0x1f5e <_ZN9INA_Class16setBusConversionEmh+0x1e6>
    1f52:	96 e0       	ldi	r25, 0x06	; 6
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	9a 95       	dec	r25
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <_ZN9INA_Class16setBusConversionEmh+0x1dc>
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <_ZN9INA_Class16setBusConversionEmh+0x1f0>
    1f5e:	36 95       	lsr	r19
    1f60:	32 2f       	mov	r19, r18
    1f62:	22 27       	eor	r18, r18
    1f64:	37 95       	ror	r19
    1f66:	27 95       	ror	r18
    1f68:	c9 01       	movw	r24, r18
    1f6a:	86 2b       	or	r24, r22
    1f6c:	97 2b       	or	r25, r23
    1f6e:	29 85       	ldd	r18, Y+9	; 0x09
    1f70:	2f 77       	andi	r18, 0x7F	; 127
    1f72:	ac 01       	movw	r20, r24
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	ce 01       	movw	r24, r28
    1f78:	69 dc       	rcall	.-1838   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    1f7a:	1f 5f       	subi	r17, 0xFF	; 255
    1f7c:	0a cf       	rjmp	.-492    	; 0x1d92 <_ZN9INA_Class16setBusConversionEmh+0x1a>
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <_ZN9INA_Class18setShuntConversionEmh>:
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	6a 01       	movw	r12, r20
    1fa4:	7b 01       	movw	r14, r22
    1fa6:	02 2f       	mov	r16, r18
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	68 81       	ld	r22, Y
    1fac:	16 17       	cp	r17, r22
    1fae:	08 f0       	brcs	.+2      	; 0x1fb2 <_ZN9INA_Class18setShuntConversionEmh+0x22>
    1fb0:	e8 c0       	rjmp	.+464    	; 0x2182 <_ZN9INA_Class18setShuntConversionEmh+0x1f2>
    1fb2:	0f 3f       	cpi	r16, 0xFF	; 255
    1fb4:	29 f0       	breq	.+10     	; 0x1fc0 <_ZN9INA_Class18setShuntConversionEmh+0x30>
    1fb6:	80 2f       	mov	r24, r16
    1fb8:	0e 94 9e 22 	call	0x453c	; 0x453c <__udivmodqi4>
    1fbc:	19 13       	cpse	r17, r25
    1fbe:	df c0       	rjmp	.+446    	; 0x217e <_ZN9INA_Class18setShuntConversionEmh+0x1ee>
    1fc0:	61 2f       	mov	r22, r17
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	b2 db       	rcall	.-2204   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    1fc6:	49 85       	ldd	r20, Y+9	; 0x09
    1fc8:	4f 77       	andi	r20, 0x7F	; 127
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	ce 01       	movw	r24, r28
    1fce:	80 dd       	rcall	.-1280   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	88 85       	ldd	r24, Y+8	; 0x08
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	9f 70       	andi	r25, 0x0F	; 15
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <_ZN9INA_Class18setShuntConversionEmh+0x52>
    1fda:	98 30       	cpi	r25, 0x08	; 8
    1fdc:	08 f0       	brcs	.+2      	; 0x1fe0 <_ZN9INA_Class18setShuntConversionEmh+0x50>
    1fde:	ca c0       	rjmp	.+404    	; 0x2174 <_ZN9INA_Class18setShuntConversionEmh+0x1e4>
    1fe0:	6f c0       	rjmp	.+222    	; 0x20c0 <_ZN9INA_Class18setShuntConversionEmh+0x130>
    1fe2:	24 e0       	ldi	r18, 0x04	; 4
    1fe4:	c2 16       	cp	r12, r18
    1fe6:	2a e0       	ldi	r18, 0x0A	; 10
    1fe8:	d2 06       	cpc	r13, r18
    1fea:	21 e0       	ldi	r18, 0x01	; 1
    1fec:	e2 06       	cpc	r14, r18
    1fee:	f1 04       	cpc	r15, r1
    1ff0:	08 f0       	brcs	.+2      	; 0x1ff4 <_ZN9INA_Class18setShuntConversionEmh+0x64>
    1ff2:	45 c0       	rjmp	.+138    	; 0x207e <_ZN9INA_Class18setShuntConversionEmh+0xee>
    1ff4:	32 e0       	ldi	r19, 0x02	; 2
    1ff6:	c3 16       	cp	r12, r19
    1ff8:	35 e8       	ldi	r19, 0x85	; 133
    1ffa:	d3 06       	cpc	r13, r19
    1ffc:	e1 04       	cpc	r14, r1
    1ffe:	f1 04       	cpc	r15, r1
    2000:	08 f0       	brcs	.+2      	; 0x2004 <_ZN9INA_Class18setShuntConversionEmh+0x74>
    2002:	40 c0       	rjmp	.+128    	; 0x2084 <_ZN9INA_Class18setShuntConversionEmh+0xf4>
    2004:	8c e7       	ldi	r24, 0x7C	; 124
    2006:	c8 16       	cp	r12, r24
    2008:	82 e4       	ldi	r24, 0x42	; 66
    200a:	d8 06       	cpc	r13, r24
    200c:	e1 04       	cpc	r14, r1
    200e:	f1 04       	cpc	r15, r1
    2010:	e0 f5       	brcc	.+120    	; 0x208a <_ZN9INA_Class18setShuntConversionEmh+0xfa>
    2012:	9e e3       	ldi	r25, 0x3E	; 62
    2014:	c9 16       	cp	r12, r25
    2016:	91 e2       	ldi	r25, 0x21	; 33
    2018:	d9 06       	cpc	r13, r25
    201a:	e1 04       	cpc	r14, r1
    201c:	f1 04       	cpc	r15, r1
    201e:	c0 f5       	brcc	.+112    	; 0x2090 <_ZN9INA_Class18setShuntConversionEmh+0x100>
    2020:	24 ea       	ldi	r18, 0xA4	; 164
    2022:	c2 16       	cp	r12, r18
    2024:	20 e1       	ldi	r18, 0x10	; 16
    2026:	d2 06       	cpc	r13, r18
    2028:	e1 04       	cpc	r14, r1
    202a:	f1 04       	cpc	r15, r1
    202c:	a0 f5       	brcc	.+104    	; 0x2096 <_ZN9INA_Class18setShuntConversionEmh+0x106>
    202e:	32 e5       	ldi	r19, 0x52	; 82
    2030:	c3 16       	cp	r12, r19
    2032:	38 e0       	ldi	r19, 0x08	; 8
    2034:	d3 06       	cpc	r13, r19
    2036:	e1 04       	cpc	r14, r1
    2038:	f1 04       	cpc	r15, r1
    203a:	80 f5       	brcc	.+96     	; 0x209c <_ZN9INA_Class18setShuntConversionEmh+0x10c>
    203c:	84 e2       	ldi	r24, 0x24	; 36
    203e:	c8 16       	cp	r12, r24
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	d8 06       	cpc	r13, r24
    2044:	e1 04       	cpc	r14, r1
    2046:	f1 04       	cpc	r15, r1
    2048:	60 f5       	brcc	.+88     	; 0x20a2 <_ZN9INA_Class18setShuntConversionEmh+0x112>
    204a:	94 e1       	ldi	r25, 0x14	; 20
    204c:	c9 16       	cp	r12, r25
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	d9 06       	cpc	r13, r25
    2052:	e1 04       	cpc	r14, r1
    2054:	f1 04       	cpc	r15, r1
    2056:	40 f5       	brcc	.+80     	; 0x20a8 <_ZN9INA_Class18setShuntConversionEmh+0x118>
    2058:	24 e1       	ldi	r18, 0x14	; 20
    205a:	c2 16       	cp	r12, r18
    205c:	21 e0       	ldi	r18, 0x01	; 1
    205e:	d2 06       	cpc	r13, r18
    2060:	e1 04       	cpc	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	20 f5       	brcc	.+72     	; 0x20ae <_ZN9INA_Class18setShuntConversionEmh+0x11e>
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	34 e9       	ldi	r19, 0x94	; 148
    206c:	c3 16       	cp	r12, r19
    206e:	d1 04       	cpc	r13, r1
    2070:	e1 04       	cpc	r14, r1
    2072:	f1 04       	cpc	r15, r1
    2074:	08 f4       	brcc	.+2      	; 0x2078 <_ZN9INA_Class18setShuntConversionEmh+0xe8>
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	29 2f       	mov	r18, r25
    207a:	38 2f       	mov	r19, r24
    207c:	1a c0       	rjmp	.+52     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    207e:	2f e0       	ldi	r18, 0x0F	; 15
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	17 c0       	rjmp	.+46     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    2084:	2e e0       	ldi	r18, 0x0E	; 14
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    208a:	2d e0       	ldi	r18, 0x0D	; 13
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	11 c0       	rjmp	.+34     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    2090:	2c e0       	ldi	r18, 0x0C	; 12
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	0e c0       	rjmp	.+28     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    2096:	2b e0       	ldi	r18, 0x0B	; 11
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	0b c0       	rjmp	.+22     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    209c:	2a e0       	ldi	r18, 0x0A	; 10
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	08 c0       	rjmp	.+16     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    20a2:	29 e0       	ldi	r18, 0x09	; 9
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	05 c0       	rjmp	.+10     	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    20a8:	28 e0       	ldi	r18, 0x08	; 8
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    20ae:	22 e0       	ldi	r18, 0x02	; 2
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	47 7c       	andi	r20, 0xC7	; 199
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	9a 95       	dec	r25
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <_ZN9INA_Class18setShuntConversionEmh+0x126>
    20be:	58 c0       	rjmp	.+176    	; 0x2170 <_ZN9INA_Class18setShuntConversionEmh+0x1e0>
    20c0:	98 e0       	ldi	r25, 0x08	; 8
    20c2:	c9 16       	cp	r12, r25
    20c4:	92 e4       	ldi	r25, 0x42	; 66
    20c6:	d9 06       	cpc	r13, r25
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	e9 06       	cpc	r14, r25
    20cc:	f1 04       	cpc	r15, r1
    20ce:	78 f5       	brcc	.+94     	; 0x212e <_ZN9INA_Class18setShuntConversionEmh+0x19e>
    20d0:	28 e5       	ldi	r18, 0x58	; 88
    20d2:	c2 16       	cp	r12, r18
    20d4:	22 ea       	ldi	r18, 0xA2	; 162
    20d6:	d2 06       	cpc	r13, r18
    20d8:	e1 04       	cpc	r14, r1
    20da:	f1 04       	cpc	r15, r1
    20dc:	58 f5       	brcc	.+86     	; 0x2134 <_ZN9INA_Class18setShuntConversionEmh+0x1a4>
    20de:	38 ea       	ldi	r19, 0xA8	; 168
    20e0:	c3 16       	cp	r12, r19
    20e2:	32 e5       	ldi	r19, 0x52	; 82
    20e4:	d3 06       	cpc	r13, r19
    20e6:	e1 04       	cpc	r14, r1
    20e8:	f1 04       	cpc	r15, r1
    20ea:	38 f5       	brcc	.+78     	; 0x213a <_ZN9INA_Class18setShuntConversionEmh+0x1aa>
    20ec:	98 ef       	ldi	r25, 0xF8	; 248
    20ee:	c9 16       	cp	r12, r25
    20f0:	9a e2       	ldi	r25, 0x2A	; 42
    20f2:	d9 06       	cpc	r13, r25
    20f4:	e1 04       	cpc	r14, r1
    20f6:	f1 04       	cpc	r15, r1
    20f8:	18 f5       	brcc	.+70     	; 0x2140 <_ZN9INA_Class18setShuntConversionEmh+0x1b0>
    20fa:	2c e4       	ldi	r18, 0x4C	; 76
    20fc:	c2 16       	cp	r12, r18
    20fe:	22 e0       	ldi	r18, 0x02	; 2
    2100:	d2 06       	cpc	r13, r18
    2102:	e1 04       	cpc	r14, r1
    2104:	f1 04       	cpc	r15, r1
    2106:	f8 f4       	brcc	.+62     	; 0x2146 <_ZN9INA_Class18setShuntConversionEmh+0x1b6>
    2108:	3c e4       	ldi	r19, 0x4C	; 76
    210a:	c3 16       	cp	r12, r19
    210c:	31 e0       	ldi	r19, 0x01	; 1
    210e:	d3 06       	cpc	r13, r19
    2110:	e1 04       	cpc	r14, r1
    2112:	f1 04       	cpc	r15, r1
    2114:	d8 f4       	brcc	.+54     	; 0x214c <_ZN9INA_Class18setShuntConversionEmh+0x1bc>
    2116:	21 e0       	ldi	r18, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	3c ec       	ldi	r19, 0xCC	; 204
    211c:	c3 16       	cp	r12, r19
    211e:	d1 04       	cpc	r13, r1
    2120:	e1 04       	cpc	r14, r1
    2122:	f1 04       	cpc	r15, r1
    2124:	08 f4       	brcc	.+2      	; 0x2128 <_ZN9INA_Class18setShuntConversionEmh+0x198>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	62 2f       	mov	r22, r18
    212a:	79 2f       	mov	r23, r25
    212c:	11 c0       	rjmp	.+34     	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    212e:	67 e0       	ldi	r22, 0x07	; 7
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	0e c0       	rjmp	.+28     	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    2134:	66 e0       	ldi	r22, 0x06	; 6
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	0b c0       	rjmp	.+22     	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    213a:	65 e0       	ldi	r22, 0x05	; 5
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    2140:	64 e0       	ldi	r22, 0x04	; 4
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	8f 70       	andi	r24, 0x0F	; 15
    2152:	9a 01       	movw	r18, r20
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	19 f0       	breq	.+6      	; 0x215e <_ZN9INA_Class18setShuntConversionEmh+0x1ce>
    2158:	85 50       	subi	r24, 0x05	; 5
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	10 f4       	brcc	.+4      	; 0x2162 <_ZN9INA_Class18setShuntConversionEmh+0x1d2>
    215e:	27 7e       	andi	r18, 0xE7	; 231
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <_ZN9INA_Class18setShuntConversionEmh+0x1d4>
    2162:	27 7c       	andi	r18, 0xC7	; 199
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	66 0f       	add	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	8a 95       	dec	r24
    216c:	e1 f7       	brne	.-8      	; 0x2166 <_ZN9INA_Class18setShuntConversionEmh+0x1d6>
    216e:	ab 01       	movw	r20, r22
    2170:	42 2b       	or	r20, r18
    2172:	53 2b       	or	r21, r19
    2174:	29 85       	ldd	r18, Y+9	; 0x09
    2176:	2f 77       	andi	r18, 0x7F	; 127
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	ce 01       	movw	r24, r28
    217c:	67 db       	rcall	.-2354   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    217e:	1f 5f       	subi	r17, 0xFF	; 255
    2180:	14 cf       	rjmp	.-472    	; 0x1faa <_ZN9INA_Class18setShuntConversionEmh+0x1a>
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	08 95       	ret

00002194 <_ZN9INA_Class9getBusRawEh>:
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
    219e:	c5 da       	rcall	.-2678   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    21a0:	49 85       	ldd	r20, Y+9	; 0x09
    21a2:	4f 77       	andi	r20, 0x7F	; 127
    21a4:	6e 85       	ldd	r22, Y+14	; 0x0e
    21a6:	67 70       	andi	r22, 0x07	; 7
    21a8:	ce 01       	movw	r24, r28
    21aa:	92 dc       	rcall	.-1756   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    21ac:	8c 01       	movw	r16, r24
    21ae:	88 85       	ldd	r24, Y+8	; 0x08
    21b0:	98 2f       	mov	r25, r24
    21b2:	9f 70       	andi	r25, 0x0F	; 15
    21b4:	2b ef       	ldi	r18, 0xFB	; 251
    21b6:	29 0f       	add	r18, r25
    21b8:	23 30       	cpi	r18, 0x03	; 3
    21ba:	10 f0       	brcs	.+4      	; 0x21c0 <_ZN9INA_Class9getBusRawEh+0x2c>
    21bc:	91 11       	cpse	r25, r1
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <_ZN9INA_Class9getBusRawEh+0x36>
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	16 95       	lsr	r17
    21c4:	07 95       	ror	r16
    21c6:	9a 95       	dec	r25
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <_ZN9INA_Class9getBusRawEh+0x2e>
    21ca:	82 95       	swap	r24
    21cc:	8f 70       	andi	r24, 0x0F	; 15
    21ce:	82 fd       	sbrc	r24, 2
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <_ZN9INA_Class9getBusRawEh+0x58>
    21d2:	81 ff       	sbrs	r24, 1
    21d4:	0b c0       	rjmp	.+22     	; 0x21ec <_ZN9INA_Class9getBusRawEh+0x58>
    21d6:	49 85       	ldd	r20, Y+9	; 0x09
    21d8:	4f 77       	andi	r20, 0x7F	; 127
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	ce 01       	movw	r24, r28
    21de:	78 dc       	rcall	.-1808   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    21e0:	29 85       	ldd	r18, Y+9	; 0x09
    21e2:	2f 77       	andi	r18, 0x7F	; 127
    21e4:	ac 01       	movw	r20, r24
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	ce 01       	movw	r24, r28
    21ea:	30 db       	rcall	.-2464   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    21ec:	c8 01       	movw	r24, r16
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <_ZN9INA_Class16getBusMilliVoltsEh>:
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	ec 01       	movw	r28, r24
    21fe:	ca df       	rcall	.-108    	; 0x2194 <_ZN9INA_Class9getBusRawEh>
    2200:	aa 89       	ldd	r26, Y+18	; 0x12
    2202:	bb 89       	ldd	r27, Y+19	; 0x13
    2204:	9c 01       	movw	r18, r24
    2206:	0e 94 04 23 	call	0x4608	; 0x4608 <__umulhisi3>
    220a:	24 e6       	ldi	r18, 0x64	; 100
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	0e 94 be 22 	call	0x457c	; 0x457c <__udivmodsi4>
    2216:	c9 01       	movw	r24, r18
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	08 95       	ret

0000221e <_ZN9INA_Class18getShuntMicroVoltsEh>:
    221e:	cf 92       	push	r12
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ec 01       	movw	r28, r24
    222c:	f6 2e       	mov	r15, r22
    222e:	c8 d0       	rcall	.+400    	; 0x23c0 <_ZN9INA_Class11getShuntRawEh>
    2230:	dc 01       	movw	r26, r24
    2232:	98 85       	ldd	r25, Y+8	; 0x08
    2234:	9f 70       	andi	r25, 0x0F	; 15
    2236:	94 30       	cpi	r25, 0x04	; 4
    2238:	41 f4       	brne	.+16     	; 0x224a <_ZN9INA_Class18getShuntMicroVoltsEh+0x2c>
    223a:	6f 2d       	mov	r22, r15
    223c:	ce 01       	movw	r24, r28
    223e:	2c d0       	rcall	.+88     	; 0x2298 <_ZN9INA_Class15getBusMicroAmpsEh>
    2240:	28 ec       	ldi	r18, 0xC8	; 200
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	08 c0       	rjmp	.+16     	; 0x225a <_ZN9INA_Class18getShuntMicroVoltsEh+0x3c>
    224a:	28 89       	ldd	r18, Y+16	; 0x10
    224c:	39 89       	ldd	r19, Y+17	; 0x11
    224e:	0e 94 13 23 	call	0x4626	; 0x4626 <__usmulhisi3>
    2252:	2a e0       	ldi	r18, 0x0A	; 10
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__divmodsi4>
    225e:	69 01       	movw	r12, r18
    2260:	7a 01       	movw	r14, r20
    2262:	88 85       	ldd	r24, Y+8	; 0x08
    2264:	82 95       	swap	r24
    2266:	8f 70       	andi	r24, 0x0F	; 15
    2268:	82 fd       	sbrc	r24, 2
    226a:	0d c0       	rjmp	.+26     	; 0x2286 <_ZN9INA_Class18getShuntMicroVoltsEh+0x68>
    226c:	80 ff       	sbrs	r24, 0
    226e:	0b c0       	rjmp	.+22     	; 0x2286 <_ZN9INA_Class18getShuntMicroVoltsEh+0x68>
    2270:	49 85       	ldd	r20, Y+9	; 0x09
    2272:	4f 77       	andi	r20, 0x7F	; 127
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	ce 01       	movw	r24, r28
    2278:	2b dc       	rcall	.-1962   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    227a:	29 85       	ldd	r18, Y+9	; 0x09
    227c:	2f 77       	andi	r18, 0x7F	; 127
    227e:	ac 01       	movw	r20, r24
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	ce 01       	movw	r24, r28
    2284:	e3 da       	rcall	.-2618   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    2286:	c7 01       	movw	r24, r14
    2288:	b6 01       	movw	r22, r12
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	08 95       	ret

00002298 <_ZN9INA_Class15getBusMicroAmpsEh>:
    2298:	2f 92       	push	r2
    229a:	3f 92       	push	r3
    229c:	4f 92       	push	r4
    229e:	5f 92       	push	r5
    22a0:	6f 92       	push	r6
    22a2:	7f 92       	push	r7
    22a4:	8f 92       	push	r8
    22a6:	9f 92       	push	r9
    22a8:	af 92       	push	r10
    22aa:	bf 92       	push	r11
    22ac:	cf 92       	push	r12
    22ae:	df 92       	push	r13
    22b0:	ef 92       	push	r14
    22b2:	ff 92       	push	r15
    22b4:	0f 93       	push	r16
    22b6:	1f 93       	push	r17
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	ec 01       	movw	r28, r24
    22be:	16 2f       	mov	r17, r22
    22c0:	34 da       	rcall	.-2968   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    22c2:	88 85       	ldd	r24, Y+8	; 0x08
    22c4:	8f 70       	andi	r24, 0x0F	; 15
    22c6:	85 50       	subi	r24, 0x05	; 5
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	90 f5       	brcc	.+100    	; 0x2330 <_ZN9INA_Class15getBusMicroAmpsEh+0x98>
    22cc:	61 2f       	mov	r22, r17
    22ce:	ce 01       	movw	r24, r28
    22d0:	a6 df       	rcall	.-180    	; 0x221e <_ZN9INA_Class18getShuntMicroVoltsEh>
    22d2:	2b 01       	movw	r4, r22
    22d4:	3c 01       	movw	r6, r24
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	92 95       	swap	r25
    22da:	96 95       	lsr	r25
    22dc:	96 95       	lsr	r25
    22de:	93 70       	andi	r25, 0x03	; 3
    22e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e2:	58 2f       	mov	r21, r24
    22e4:	55 0f       	add	r21, r21
    22e6:	55 0f       	add	r21, r21
    22e8:	25 2f       	mov	r18, r21
    22ea:	29 2b       	or	r18, r25
    22ec:	98 2f       	mov	r25, r24
    22ee:	92 95       	swap	r25
    22f0:	96 95       	lsr	r25
    22f2:	96 95       	lsr	r25
    22f4:	93 70       	andi	r25, 0x03	; 3
    22f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    22f8:	58 2f       	mov	r21, r24
    22fa:	55 0f       	add	r21, r21
    22fc:	55 0f       	add	r21, r21
    22fe:	35 2f       	mov	r19, r21
    2300:	39 2b       	or	r19, r25
    2302:	98 2f       	mov	r25, r24
    2304:	92 95       	swap	r25
    2306:	96 95       	lsr	r25
    2308:	96 95       	lsr	r25
    230a:	93 70       	andi	r25, 0x03	; 3
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	83 70       	andi	r24, 0x03	; 3
    2310:	88 0f       	add	r24, r24
    2312:	88 0f       	add	r24, r24
    2314:	48 2f       	mov	r20, r24
    2316:	49 2b       	or	r20, r25
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	60 e4       	ldi	r22, 0x40	; 64
    231c:	72 e4       	ldi	r23, 0x42	; 66
    231e:	8f e0       	ldi	r24, 0x0F	; 15
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__divmodsi4>
    2326:	c3 01       	movw	r24, r6
    2328:	b2 01       	movw	r22, r4
    232a:	0e 94 8f 22 	call	0x451e	; 0x451e <__mulsi3>
    232e:	35 c0       	rjmp	.+106    	; 0x239a <_ZN9INA_Class15getBusMicroAmpsEh+0x102>
    2330:	49 85       	ldd	r20, Y+9	; 0x09
    2332:	4f 77       	andi	r20, 0x7F	; 127
    2334:	6e 85       	ldd	r22, Y+14	; 0x0e
    2336:	86 2f       	mov	r24, r22
    2338:	82 95       	swap	r24
    233a:	86 95       	lsr	r24
    233c:	86 95       	lsr	r24
    233e:	83 70       	andi	r24, 0x03	; 3
    2340:	6f 85       	ldd	r22, Y+15	; 0x0f
    2342:	61 70       	andi	r22, 0x01	; 1
    2344:	66 0f       	add	r22, r22
    2346:	66 0f       	add	r22, r22
    2348:	68 2b       	or	r22, r24
    234a:	ce 01       	movw	r24, r28
    234c:	c1 db       	rcall	.-2174   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    234e:	4c 89       	ldd	r20, Y+20	; 0x14
    2350:	5d 89       	ldd	r21, Y+21	; 0x15
    2352:	6e 89       	ldd	r22, Y+22	; 0x16
    2354:	7f 89       	ldd	r23, Y+23	; 0x17
    2356:	1a 01       	movw	r2, r20
    2358:	2b 01       	movw	r4, r22
    235a:	a8 2e       	mov	r10, r24
    235c:	19 2f       	mov	r17, r25
    235e:	11 0f       	add	r17, r17
    2360:	11 0b       	sbc	r17, r17
    2362:	b9 2e       	mov	r11, r25
    2364:	c1 2e       	mov	r12, r17
    2366:	d1 2e       	mov	r13, r17
    2368:	e1 2e       	mov	r14, r17
    236a:	f1 2e       	mov	r15, r17
    236c:	01 2f       	mov	r16, r17
    236e:	9a 01       	movw	r18, r20
    2370:	a2 01       	movw	r20, r4
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 23 23 	call	0x4646	; 0x4646 <__muldi3>
    237e:	e8 ee       	ldi	r30, 0xE8	; 232
    2380:	ae 2e       	mov	r10, r30
    2382:	f3 e0       	ldi	r31, 0x03	; 3
    2384:	bf 2e       	mov	r11, r31
    2386:	c1 2c       	mov	r12, r1
    2388:	d1 2c       	mov	r13, r1
    238a:	e1 2c       	mov	r14, r1
    238c:	f1 2c       	mov	r15, r1
    238e:	00 e0       	ldi	r16, 0x00	; 0
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	0e 94 9d 23 	call	0x473a	; 0x473a <__divdi3>
    2396:	b9 01       	movw	r22, r18
    2398:	ca 01       	movw	r24, r20
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	df 90       	pop	r13
    23a8:	cf 90       	pop	r12
    23aa:	bf 90       	pop	r11
    23ac:	af 90       	pop	r10
    23ae:	9f 90       	pop	r9
    23b0:	8f 90       	pop	r8
    23b2:	7f 90       	pop	r7
    23b4:	6f 90       	pop	r6
    23b6:	5f 90       	pop	r5
    23b8:	4f 90       	pop	r4
    23ba:	3f 90       	pop	r3
    23bc:	2f 90       	pop	r2
    23be:	08 95       	ret

000023c0 <_ZN9INA_Class11getShuntRawEh>:
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	ec 01       	movw	r28, r24
    23ca:	16 2f       	mov	r17, r22
    23cc:	ae d9       	rcall	.-3236   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    23ce:	88 85       	ldd	r24, Y+8	; 0x08
    23d0:	8f 70       	andi	r24, 0x0F	; 15
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	59 f4       	brne	.+22     	; 0x23ec <_ZN9INA_Class11getShuntRawEh+0x2c>
    23d6:	61 2f       	mov	r22, r17
    23d8:	ce 01       	movw	r24, r28
    23da:	5e df       	rcall	.-324    	; 0x2298 <_ZN9INA_Class15getBusMicroAmpsEh>
    23dc:	20 e4       	ldi	r18, 0x40	; 64
    23de:	3d e0       	ldi	r19, 0x0D	; 13
    23e0:	43 e0       	ldi	r20, 0x03	; 3
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__divmodsi4>
    23e8:	89 01       	movw	r16, r18
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <_ZN9INA_Class11getShuntRawEh+0x54>
    23ec:	49 85       	ldd	r20, Y+9	; 0x09
    23ee:	4f 77       	andi	r20, 0x7F	; 127
    23f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    23f2:	66 95       	lsr	r22
    23f4:	66 95       	lsr	r22
    23f6:	66 95       	lsr	r22
    23f8:	67 70       	andi	r22, 0x07	; 7
    23fa:	ce 01       	movw	r24, r28
    23fc:	69 db       	rcall	.-2350   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    23fe:	8c 01       	movw	r16, r24
    2400:	88 85       	ldd	r24, Y+8	; 0x08
    2402:	8f 70       	andi	r24, 0x0F	; 15
    2404:	85 50       	subi	r24, 0x05	; 5
    2406:	83 30       	cpi	r24, 0x03	; 3
    2408:	28 f4       	brcc	.+10     	; 0x2414 <_ZN9INA_Class11getShuntRawEh+0x54>
    240a:	83 e0       	ldi	r24, 0x03	; 3
    240c:	15 95       	asr	r17
    240e:	07 95       	ror	r16
    2410:	8a 95       	dec	r24
    2412:	e1 f7       	brne	.-8      	; 0x240c <_ZN9INA_Class11getShuntRawEh+0x4c>
    2414:	88 85       	ldd	r24, Y+8	; 0x08
    2416:	82 95       	swap	r24
    2418:	8f 70       	andi	r24, 0x0F	; 15
    241a:	82 fd       	sbrc	r24, 2
    241c:	0d c0       	rjmp	.+26     	; 0x2438 <_ZN9INA_Class11getShuntRawEh+0x78>
    241e:	80 ff       	sbrs	r24, 0
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <_ZN9INA_Class11getShuntRawEh+0x78>
    2422:	49 85       	ldd	r20, Y+9	; 0x09
    2424:	4f 77       	andi	r20, 0x7F	; 127
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	ce 01       	movw	r24, r28
    242a:	52 db       	rcall	.-2396   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    242c:	29 85       	ldd	r18, Y+9	; 0x09
    242e:	2f 77       	andi	r18, 0x7F	; 127
    2430:	ac 01       	movw	r20, r24
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	ce 01       	movw	r24, r28
    2436:	0a da       	rcall	.-3052   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    2438:	c8 01       	movw	r24, r16
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	08 95       	ret

00002444 <_ZN9INA_Class7setModeEhh>:
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	ec 01       	movw	r28, r24
    2454:	d4 2e       	mov	r13, r20
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	67 70       	andi	r22, 0x07	; 7
    245a:	06 2f       	mov	r16, r22
    245c:	02 95       	swap	r16
    245e:	00 7f       	andi	r16, 0xF0	; 240
    2460:	68 81       	ld	r22, Y
    2462:	16 17       	cp	r17, r22
    2464:	28 f5       	brcc	.+74     	; 0x24b0 <_ZN9INA_Class7setModeEhh+0x6c>
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	d8 16       	cp	r13, r24
    246a:	29 f0       	breq	.+10     	; 0x2476 <_ZN9INA_Class7setModeEhh+0x32>
    246c:	8d 2d       	mov	r24, r13
    246e:	0e 94 9e 22 	call	0x453c	; 0x453c <__udivmodqi4>
    2472:	19 13       	cpse	r17, r25
    2474:	1b c0       	rjmp	.+54     	; 0x24ac <_ZN9INA_Class7setModeEhh+0x68>
    2476:	61 2f       	mov	r22, r17
    2478:	ce 01       	movw	r24, r28
    247a:	57 d9       	rcall	.-3410   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
    247c:	49 85       	ldd	r20, Y+9	; 0x09
    247e:	4f 77       	andi	r20, 0x7F	; 127
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	ce 01       	movw	r24, r28
    2484:	25 db       	rcall	.-2486   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    2486:	88 7f       	andi	r24, 0xF8	; 248
    2488:	7c 01       	movw	r14, r24
    248a:	88 85       	ldd	r24, Y+8	; 0x08
    248c:	8f 70       	andi	r24, 0x0F	; 15
    248e:	80 2b       	or	r24, r16
    2490:	88 87       	std	Y+8, r24	; 0x08
    2492:	61 2f       	mov	r22, r17
    2494:	ce 01       	movw	r24, r28
    2496:	a3 d9       	rcall	.-3258   	; 0x17de <_ZN9INA_Class16writeInatoEEPROMEh>
    2498:	29 85       	ldd	r18, Y+9	; 0x09
    249a:	2f 77       	andi	r18, 0x7F	; 127
    249c:	88 85       	ldd	r24, Y+8	; 0x08
    249e:	82 95       	swap	r24
    24a0:	8f 70       	andi	r24, 0x0F	; 15
    24a2:	a7 01       	movw	r20, r14
    24a4:	48 2b       	or	r20, r24
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	ce 01       	movw	r24, r28
    24aa:	d0 d9       	rcall	.-3168   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
    24ac:	1f 5f       	subi	r17, 0xFF	; 255
    24ae:	d8 cf       	rjmp	.-80     	; 0x2460 <_ZN9INA_Class7setModeEhh+0x1c>
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	08 95       	ret

000024c0 <_ZN9INA_Class12setAveragingEjh>:
* @details   Out-of-Range averaging is brought down to the highest allowed value
* @param[in] averages Number of  averages to set (0-128)
* @param[in] deviceNumber to reset (Optional, when not set then all devices have their averaging changed)
*******************************************************************************************************************/
void INA_Class::setAveraging(const uint16_t averages, const uint8_t deviceNumber)
{
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	8c 01       	movw	r16, r24
    24d2:	eb 01       	movw	r28, r22
    24d4:	c4 2e       	mov	r12, r20
  uint16_t averageIndex;
  int16_t  configRegister;
  for(uint8_t i=0;i<_DeviceCount;i++) // Loop for each device found
    24d6:	d1 2c       	mov	r13, r1
    24d8:	f8 01       	movw	r30, r16
    24da:	60 81       	ld	r22, Z
    24dc:	d6 16       	cp	r13, r22
    24de:	08 f0       	brcs	.+2      	; 0x24e2 <_ZN9INA_Class12setAveragingEjh+0x22>
    24e0:	8c c0       	rjmp	.+280    	; 0x25fa <_ZN9INA_Class12setAveragingEjh+0x13a>
  {
    if(deviceNumber==UINT8_MAX || deviceNumber%_DeviceCount==i ) // If this device needs setting
    24e2:	ff ef       	ldi	r31, 0xFF	; 255
    24e4:	cf 16       	cp	r12, r31
    24e6:	29 f0       	breq	.+10     	; 0x24f2 <_ZN9INA_Class12setAveragingEjh+0x32>
    24e8:	8c 2d       	mov	r24, r12
    24ea:	0e 94 9e 22 	call	0x453c	; 0x453c <__udivmodqi4>
    24ee:	d9 12       	cpse	r13, r25
    24f0:	82 c0       	rjmp	.+260    	; 0x25f6 <_ZN9INA_Class12setAveragingEjh+0x136>
    {
      readInafromEEPROM(i);                                             // Load EEPROM to ina structure
    24f2:	6d 2d       	mov	r22, r13
    24f4:	c8 01       	movw	r24, r16
    24f6:	19 d9       	rcall	.-3534   	; 0x172a <_ZN9INA_Class17readInafromEEPROMEh>
      configRegister = readWord(INA_CONFIGURATION_REGISTER,ina.address);// Get current register from device
    24f8:	f8 01       	movw	r30, r16
    24fa:	41 85       	ldd	r20, Z+9	; 0x09
    24fc:	4f 77       	andi	r20, 0x7F	; 127
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	c8 01       	movw	r24, r16
    2502:	e6 da       	rcall	.-2612   	; 0x1ad0 <_ZN9INA_Class8readWordEhh>
    2504:	ac 01       	movw	r20, r24
      switch (ina.type)
    2506:	f8 01       	movw	r30, r16
    2508:	80 85       	ldd	r24, Z+8	; 0x08
    250a:	8f 70       	andi	r24, 0x0F	; 15
    250c:	21 f0       	breq	.+8      	; 0x2516 <_ZN9INA_Class12setAveragingEjh+0x56>
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	08 f0       	brcs	.+2      	; 0x2514 <_ZN9INA_Class12setAveragingEjh+0x54>
    2512:	6b c0       	rjmp	.+214    	; 0x25ea <_ZN9INA_Class12setAveragingEjh+0x12a>
    2514:	3e c0       	rjmp	.+124    	; 0x2592 <_ZN9INA_Class12setAveragingEjh+0xd2>
      {
        case INA219 : if      (averages>= 128) averageIndex = 15;
    2516:	c0 38       	cpi	r28, 0x80	; 128
    2518:	d1 05       	cpc	r29, r1
    251a:	a8 f4       	brcc	.+42     	; 0x2546 <_ZN9INA_Class12setAveragingEjh+0x86>
                      else if (averages>=  64) averageIndex = 14;
    251c:	c0 34       	cpi	r28, 0x40	; 64
    251e:	d1 05       	cpc	r29, r1
    2520:	a8 f4       	brcc	.+42     	; 0x254c <_ZN9INA_Class12setAveragingEjh+0x8c>
                      else if (averages>=  32) averageIndex = 13;
    2522:	c0 32       	cpi	r28, 0x20	; 32
    2524:	d1 05       	cpc	r29, r1
    2526:	a8 f4       	brcc	.+42     	; 0x2552 <_ZN9INA_Class12setAveragingEjh+0x92>
                      else if (averages>=  16) averageIndex = 12;
    2528:	c0 31       	cpi	r28, 0x10	; 16
    252a:	d1 05       	cpc	r29, r1
    252c:	a8 f4       	brcc	.+42     	; 0x2558 <_ZN9INA_Class12setAveragingEjh+0x98>
                      else if (averages>=   8) averageIndex = 11;
    252e:	c8 30       	cpi	r28, 0x08	; 8
    2530:	d1 05       	cpc	r29, r1
    2532:	a8 f4       	brcc	.+42     	; 0x255e <_ZN9INA_Class12setAveragingEjh+0x9e>
                      else if (averages>=   4) averageIndex = 10;
    2534:	c4 30       	cpi	r28, 0x04	; 4
    2536:	d1 05       	cpc	r29, r1
    2538:	a8 f4       	brcc	.+42     	; 0x2564 <_ZN9INA_Class12setAveragingEjh+0xa4>
                      else if (averages>=   2) averageIndex =  9;
    253a:	c2 30       	cpi	r28, 0x02	; 2
    253c:	d1 05       	cpc	r29, r1
    253e:	a8 f4       	brcc	.+42     	; 0x256a <_ZN9INA_Class12setAveragingEjh+0xaa>
                      else                     averageIndex =  8;
    2540:	28 e0       	ldi	r18, 0x08	; 8
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	14 c0       	rjmp	.+40     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
    {
      readInafromEEPROM(i);                                             // Load EEPROM to ina structure
      configRegister = readWord(INA_CONFIGURATION_REGISTER,ina.address);// Get current register from device
      switch (ina.type)
      {
        case INA219 : if      (averages>= 128) averageIndex = 15;
    2546:	2f e0       	ldi	r18, 0x0F	; 15
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	11 c0       	rjmp	.+34     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  64) averageIndex = 14;
    254c:	2e e0       	ldi	r18, 0x0E	; 14
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	0e c0       	rjmp	.+28     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  32) averageIndex = 13;
    2552:	2d e0       	ldi	r18, 0x0D	; 13
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	0b c0       	rjmp	.+22     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  16) averageIndex = 12;
    2558:	2c e0       	ldi	r18, 0x0C	; 12
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	08 c0       	rjmp	.+16     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   8) averageIndex = 11;
    255e:	2b e0       	ldi	r18, 0x0B	; 11
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	05 c0       	rjmp	.+10     	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   4) averageIndex = 10;
    2564:	2a e0       	ldi	r18, 0x0A	; 10
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	02 c0       	rjmp	.+4      	; 0x256e <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   2) averageIndex =  9;
    256a:	29 e0       	ldi	r18, 0x09	; 9
    256c:	30 e0       	ldi	r19, 0x00	; 0
                      else                     averageIndex =  8;
                      configRegister &= ~INA219_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 3;       // shift in the SADC averages
                      configRegister |= averageIndex << 7;       // shift in the BADC averages
    256e:	c9 01       	movw	r24, r18
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	6a 95       	dec	r22
    2578:	e1 f7       	brne	.-8      	; 0x2572 <_ZN9INA_Class12setAveragingEjh+0xb2>
    257a:	36 95       	lsr	r19
    257c:	32 2f       	mov	r19, r18
    257e:	22 27       	eor	r18, r18
    2580:	37 95       	ror	r19
    2582:	27 95       	ror	r18
    2584:	28 2b       	or	r18, r24
    2586:	39 2b       	or	r19, r25
    2588:	47 70       	andi	r20, 0x07	; 7
    258a:	58 7f       	andi	r21, 0xF8	; 248
    258c:	42 2b       	or	r20, r18
    258e:	53 2b       	or	r21, r19
                      break;
    2590:	2c c0       	rjmp	.+88     	; 0x25ea <_ZN9INA_Class12setAveragingEjh+0x12a>
        case INA226 : case INA230 : case INA231 : case INA3221_0: case INA3221_1: case INA3221_2:
        case INA260 : if      (averages>=1024) averageIndex = 7;
    2592:	c1 15       	cp	r28, r1
    2594:	f4 e0       	ldi	r31, 0x04	; 4
    2596:	df 07       	cpc	r29, r31
    2598:	b8 f4       	brcc	.+46     	; 0x25c8 <_ZN9INA_Class12setAveragingEjh+0x108>
                      else if (averages>= 512) averageIndex = 6;
    259a:	c1 15       	cp	r28, r1
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	d8 07       	cpc	r29, r24
    25a0:	a8 f4       	brcc	.+42     	; 0x25cc <_ZN9INA_Class12setAveragingEjh+0x10c>
                      else if (averages>= 256) averageIndex = 5;
    25a2:	cf 3f       	cpi	r28, 0xFF	; 255
    25a4:	d1 05       	cpc	r29, r1
    25a6:	09 f0       	breq	.+2      	; 0x25aa <_ZN9INA_Class12setAveragingEjh+0xea>
    25a8:	98 f4       	brcc	.+38     	; 0x25d0 <_ZN9INA_Class12setAveragingEjh+0x110>
                      else if (averages>= 128) averageIndex = 4;
    25aa:	c0 38       	cpi	r28, 0x80	; 128
    25ac:	d1 05       	cpc	r29, r1
    25ae:	90 f4       	brcc	.+36     	; 0x25d4 <_ZN9INA_Class12setAveragingEjh+0x114>
                      else if (averages>=  64) averageIndex = 3;
    25b0:	c0 34       	cpi	r28, 0x40	; 64
    25b2:	d1 05       	cpc	r29, r1
    25b4:	88 f4       	brcc	.+34     	; 0x25d8 <_ZN9INA_Class12setAveragingEjh+0x118>
                      else if (averages>=  16) averageIndex = 2;
    25b6:	c0 31       	cpi	r28, 0x10	; 16
    25b8:	d1 05       	cpc	r29, r1
    25ba:	80 f4       	brcc	.+32     	; 0x25dc <_ZN9INA_Class12setAveragingEjh+0x11c>
                      configRegister &= ~INA219_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 3;       // shift in the SADC averages
                      configRegister |= averageIndex << 7;       // shift in the BADC averages
                      break;
        case INA226 : case INA230 : case INA231 : case INA3221_0: case INA3221_1: case INA3221_2:
        case INA260 : if      (averages>=1024) averageIndex = 7;
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	c4 30       	cpi	r28, 0x04	; 4
    25c0:	d1 05       	cpc	r29, r1
    25c2:	68 f4       	brcc	.+26     	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0b c0       	rjmp	.+22     	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
    25c8:	97 e0       	ldi	r25, 0x07	; 7
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 512) averageIndex = 6;
    25cc:	96 e0       	ldi	r25, 0x06	; 6
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 256) averageIndex = 5;
    25d0:	95 e0       	ldi	r25, 0x05	; 5
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 128) averageIndex = 4;
    25d4:	94 e0       	ldi	r25, 0x04	; 4
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>=  64) averageIndex = 3;
    25d8:	93 e0       	ldi	r25, 0x03	; 3
    25da:	01 c0       	rjmp	.+2      	; 0x25de <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>=  16) averageIndex = 2;
    25dc:	92 e0       	ldi	r25, 0x02	; 2
                      else if (averages>=   4) averageIndex = 1;
                      else                     averageIndex = 0;
                      configRegister &= ~INA226_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 9;       // shift in the averages to register
    25de:	f9 2e       	mov	r15, r25
    25e0:	ff 0c       	add	r15, r15
    25e2:	e1 2c       	mov	r14, r1
    25e4:	51 7f       	andi	r21, 0xF1	; 241
    25e6:	4e 29       	or	r20, r14
    25e8:	5f 29       	or	r21, r15
                      break;
      } // of switch type
      writeWord(INA_CONFIGURATION_REGISTER,configRegister,ina.address); // Save new value back to device
    25ea:	f8 01       	movw	r30, r16
    25ec:	21 85       	ldd	r18, Z+9	; 0x09
    25ee:	2f 77       	andi	r18, 0x7F	; 127
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	c8 01       	movw	r24, r16
    25f4:	2b d9       	rcall	.-3498   	; 0x184c <_ZN9INA_Class9writeWordEhjh>
*******************************************************************************************************************/
void INA_Class::setAveraging(const uint16_t averages, const uint8_t deviceNumber)
{
  uint16_t averageIndex;
  int16_t  configRegister;
  for(uint8_t i=0;i<_DeviceCount;i++) // Loop for each device found
    25f6:	d3 94       	inc	r13
    25f8:	6f cf       	rjmp	.-290    	; 0x24d8 <_ZN9INA_Class12setAveragingEjh+0x18>
                      break;
      } // of switch type
      writeWord(INA_CONFIGURATION_REGISTER,configRegister,ina.address); // Save new value back to device
    } // of if this device needs to be set
  } // for-next each device loop
} // of method setAveraging()
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	08 95       	ret

0000260c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    260c:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <twi_state>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <twi_sendStop>
    2616:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <twi_inRepStart>
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	84 e1       	ldi	r24, 0x14	; 20
    261e:	44 d7       	rcall	.+3720   	; 0x34a8 <digitalWrite>
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	85 e1       	ldi	r24, 0x15	; 21
    2624:	41 d7       	rcall	.+3714   	; 0x34a8 <digitalWrite>
    2626:	e9 eb       	ldi	r30, 0xB9	; 185
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8e 7f       	andi	r24, 0xFE	; 254
    262e:	80 83       	st	Z, r24
    2630:	80 81       	ld	r24, Z
    2632:	8d 7f       	andi	r24, 0xFD	; 253
    2634:	80 83       	st	Z, r24
    2636:	88 e4       	ldi	r24, 0x48	; 72
    2638:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    263c:	85 e4       	ldi	r24, 0x45	; 69
    263e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2642:	08 95       	ret

00002644 <twi_setFrequency>:
    2644:	9b 01       	movw	r18, r22
    2646:	ac 01       	movw	r20, r24
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	74 e2       	ldi	r23, 0x24	; 36
    264c:	84 ef       	ldi	r24, 0xF4	; 244
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 be 22 	call	0x457c	; 0x457c <__udivmodsi4>
    2654:	da 01       	movw	r26, r20
    2656:	c9 01       	movw	r24, r18
    2658:	40 97       	sbiw	r24, 0x10	; 16
    265a:	a1 09       	sbc	r26, r1
    265c:	b1 09       	sbc	r27, r1
    265e:	b6 95       	lsr	r27
    2660:	a7 95       	ror	r26
    2662:	97 95       	ror	r25
    2664:	87 95       	ror	r24
    2666:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    266a:	08 95       	ret

0000266c <twi_readFrom>:
    266c:	41 32       	cpi	r20, 0x21	; 33
    266e:	08 f0       	brcs	.+2      	; 0x2672 <twi_readFrom+0x6>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <twi_readFrom+0x8c>
    2672:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <twi_state>
    2676:	91 11       	cpse	r25, r1
    2678:	fc cf       	rjmp	.-8      	; 0x2672 <twi_readFrom+0x6>
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <twi_state>
    2680:	20 93 fa 09 	sts	0x09FA, r18	; 0x8009fa <twi_sendStop>
    2684:	2f ef       	ldi	r18, 0xFF	; 255
    2686:	20 93 8f 09 	sts	0x098F, r18	; 0x80098f <twi_error>
    268a:	10 92 d4 09 	sts	0x09D4, r1	; 0x8009d4 <twi_masterBufferIndex>
    268e:	24 0f       	add	r18, r20
    2690:	20 93 d3 09 	sts	0x09D3, r18	; 0x8009d3 <twi_masterBufferLength>
    2694:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <twi_slarw>
    2698:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <twi_slarw>
    269c:	88 0f       	add	r24, r24
    269e:	89 2b       	or	r24, r25
    26a0:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <twi_slarw>
    26a4:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <twi_inRepStart>
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	61 f4       	brne	.+24     	; 0x26c4 <twi_readFrom+0x58>
    26ac:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <twi_inRepStart>
    26b0:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <twi_slarw>
    26b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    26b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26bc:	83 fd       	sbrc	r24, 3
    26be:	f8 cf       	rjmp	.-16     	; 0x26b0 <twi_readFrom+0x44>
    26c0:	85 ec       	ldi	r24, 0xC5	; 197
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <twi_readFrom+0x5a>
    26c4:	85 ee       	ldi	r24, 0xE5	; 229
    26c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26ca:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <twi_state>
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	e1 f3       	breq	.-8      	; 0x26ca <twi_readFrom+0x5e>
    26d2:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    26d6:	84 17       	cp	r24, r20
    26d8:	10 f4       	brcc	.+4      	; 0x26de <twi_readFrom+0x72>
    26da:	40 91 d4 09 	lds	r20, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    26de:	a5 ed       	ldi	r26, 0xD5	; 213
    26e0:	b9 e0       	ldi	r27, 0x09	; 9
    26e2:	96 2f       	mov	r25, r22
    26e4:	fb 01       	movw	r30, r22
    26e6:	8e 2f       	mov	r24, r30
    26e8:	89 1b       	sub	r24, r25
    26ea:	84 17       	cp	r24, r20
    26ec:	18 f4       	brcc	.+6      	; 0x26f4 <twi_readFrom+0x88>
    26ee:	8d 91       	ld	r24, X+
    26f0:	81 93       	st	Z+, r24
    26f2:	f9 cf       	rjmp	.-14     	; 0x26e6 <twi_readFrom+0x7a>
    26f4:	84 2f       	mov	r24, r20
    26f6:	08 95       	ret
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	08 95       	ret

000026fc <twi_writeTo>:
    26fc:	0f 93       	push	r16
    26fe:	41 32       	cpi	r20, 0x21	; 33
    2700:	08 f0       	brcs	.+2      	; 0x2704 <twi_writeTo+0x8>
    2702:	4a c0       	rjmp	.+148    	; 0x2798 <twi_writeTo+0x9c>
    2704:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <twi_state>
    2708:	91 11       	cpse	r25, r1
    270a:	fc cf       	rjmp	.-8      	; 0x2704 <twi_writeTo+0x8>
    270c:	32 e0       	ldi	r19, 0x02	; 2
    270e:	30 93 fc 09 	sts	0x09FC, r19	; 0x8009fc <twi_state>
    2712:	00 93 fa 09 	sts	0x09FA, r16	; 0x8009fa <twi_sendStop>
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	30 93 8f 09 	sts	0x098F, r19	; 0x80098f <twi_error>
    271c:	10 92 d4 09 	sts	0x09D4, r1	; 0x8009d4 <twi_masterBufferIndex>
    2720:	40 93 d3 09 	sts	0x09D3, r20	; 0x8009d3 <twi_masterBufferLength>
    2724:	56 2f       	mov	r21, r22
    2726:	a5 ed       	ldi	r26, 0xD5	; 213
    2728:	b9 e0       	ldi	r27, 0x09	; 9
    272a:	fb 01       	movw	r30, r22
    272c:	3e 2f       	mov	r19, r30
    272e:	35 1b       	sub	r19, r21
    2730:	34 17       	cp	r19, r20
    2732:	18 f4       	brcc	.+6      	; 0x273a <twi_writeTo+0x3e>
    2734:	31 91       	ld	r19, Z+
    2736:	3d 93       	st	X+, r19
    2738:	f9 cf       	rjmp	.-14     	; 0x272c <twi_writeTo+0x30>
    273a:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <twi_slarw>
    273e:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <twi_slarw>
    2742:	88 0f       	add	r24, r24
    2744:	83 2b       	or	r24, r19
    2746:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <twi_slarw>
    274a:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <twi_inRepStart>
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	61 f4       	brne	.+24     	; 0x276a <twi_writeTo+0x6e>
    2752:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <twi_inRepStart>
    2756:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <twi_slarw>
    275a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    275e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2762:	83 fd       	sbrc	r24, 3
    2764:	f8 cf       	rjmp	.-16     	; 0x2756 <twi_writeTo+0x5a>
    2766:	85 ec       	ldi	r24, 0xC5	; 197
    2768:	01 c0       	rjmp	.+2      	; 0x276c <twi_writeTo+0x70>
    276a:	85 ee       	ldi	r24, 0xE5	; 229
    276c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2770:	22 23       	and	r18, r18
    2772:	21 f0       	breq	.+8      	; 0x277c <twi_writeTo+0x80>
    2774:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <twi_state>
    2778:	82 30       	cpi	r24, 0x02	; 2
    277a:	d1 f3       	breq	.-12     	; 0x2770 <twi_writeTo+0x74>
    277c:	80 91 8f 09 	lds	r24, 0x098F	; 0x80098f <twi_error>
    2780:	8f 3f       	cpi	r24, 0xFF	; 255
    2782:	79 f0       	breq	.+30     	; 0x27a2 <twi_writeTo+0xa6>
    2784:	80 91 8f 09 	lds	r24, 0x098F	; 0x80098f <twi_error>
    2788:	80 32       	cpi	r24, 0x20	; 32
    278a:	41 f0       	breq	.+16     	; 0x279c <twi_writeTo+0xa0>
    278c:	80 91 8f 09 	lds	r24, 0x098F	; 0x80098f <twi_error>
    2790:	80 33       	cpi	r24, 0x30	; 48
    2792:	31 f0       	breq	.+12     	; 0x27a0 <twi_writeTo+0xa4>
    2794:	94 e0       	ldi	r25, 0x04	; 4
    2796:	05 c0       	rjmp	.+10     	; 0x27a2 <twi_writeTo+0xa6>
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <twi_writeTo+0xa6>
    279c:	92 e0       	ldi	r25, 0x02	; 2
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <twi_writeTo+0xa6>
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	89 2f       	mov	r24, r25
    27a4:	0f 91       	pop	r16
    27a6:	08 95       	ret

000027a8 <twi_transmit>:
    27a8:	40 91 b1 09 	lds	r20, 0x09B1	; 0x8009b1 <twi_txBufferLength>
    27ac:	26 2f       	mov	r18, r22
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	24 0f       	add	r18, r20
    27b2:	31 1d       	adc	r19, r1
    27b4:	21 32       	cpi	r18, 0x21	; 33
    27b6:	31 05       	cpc	r19, r1
    27b8:	dc f4       	brge	.+54     	; 0x27f0 <twi_transmit+0x48>
    27ba:	20 91 fc 09 	lds	r18, 0x09FC	; 0x8009fc <twi_state>
    27be:	24 30       	cpi	r18, 0x04	; 4
    27c0:	c9 f4       	brne	.+50     	; 0x27f4 <twi_transmit+0x4c>
    27c2:	fc 01       	movw	r30, r24
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	86 17       	cp	r24, r22
    27ca:	58 f4       	brcc	.+22     	; 0x27e2 <twi_transmit+0x3a>
    27cc:	30 91 b1 09 	lds	r19, 0x09B1	; 0x8009b1 <twi_txBufferLength>
    27d0:	21 91       	ld	r18, Z+
    27d2:	dc 01       	movw	r26, r24
    27d4:	ad 54       	subi	r26, 0x4D	; 77
    27d6:	b6 4f       	sbci	r27, 0xF6	; 246
    27d8:	a3 0f       	add	r26, r19
    27da:	b1 1d       	adc	r27, r1
    27dc:	2c 93       	st	X, r18
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	f3 cf       	rjmp	.-26     	; 0x27c8 <twi_transmit+0x20>
    27e2:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <twi_txBufferLength>
    27e6:	68 0f       	add	r22, r24
    27e8:	60 93 b1 09 	sts	0x09B1, r22	; 0x8009b1 <twi_txBufferLength>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	08 95       	ret
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	08 95       	ret
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	08 95       	ret

000027f8 <twi_attachSlaveRxEvent>:
    27f8:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <twi_onSlaveReceive+0x1>
    27fc:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <twi_onSlaveReceive>
    2800:	08 95       	ret

00002802 <twi_attachSlaveTxEvent>:
    2802:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <twi_onSlaveTransmit+0x1>
    2806:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <twi_onSlaveTransmit>
    280a:	08 95       	ret

0000280c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    280c:	85 ed       	ldi	r24, 0xD5	; 213
    280e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2812:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2816:	84 fd       	sbrc	r24, 4
    2818:	fc cf       	rjmp	.-8      	; 0x2812 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    281a:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <twi_state>
    281e:	08 95       	ret

00002820 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2820:	85 ec       	ldi	r24, 0xC5	; 197
    2822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    2826:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <twi_state>
    282a:	08 95       	ret

0000282c <__vector_39>:
}

ISR(TWI_vect)
{
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	0b b6       	in	r0, 0x3b	; 59
    2838:	0f 92       	push	r0
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
  switch(TW_STATUS){
    2852:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2856:	88 7f       	andi	r24, 0xF8	; 248
    2858:	80 36       	cpi	r24, 0x60	; 96
    285a:	09 f4       	brne	.+2      	; 0x285e <__vector_39+0x32>
    285c:	9d c0       	rjmp	.+314    	; 0x2998 <__vector_39+0x16c>
    285e:	70 f5       	brcc	.+92     	; 0x28bc <__vector_39+0x90>
    2860:	88 32       	cpi	r24, 0x28	; 40
    2862:	09 f4       	brne	.+2      	; 0x2866 <__vector_39+0x3a>
    2864:	5c c0       	rjmp	.+184    	; 0x291e <__vector_39+0xf2>
    2866:	90 f4       	brcc	.+36     	; 0x288c <__vector_39+0x60>
    2868:	80 31       	cpi	r24, 0x10	; 16
    286a:	09 f4       	brne	.+2      	; 0x286e <__vector_39+0x42>
    286c:	55 c0       	rjmp	.+170    	; 0x2918 <__vector_39+0xec>
    286e:	38 f4       	brcc	.+14     	; 0x287e <__vector_39+0x52>
    2870:	88 23       	and	r24, r24
    2872:	09 f4       	brne	.+2      	; 0x2876 <__vector_39+0x4a>
    2874:	f3 c0       	rjmp	.+486    	; 0x2a5c <__vector_39+0x230>
    2876:	88 30       	cpi	r24, 0x08	; 8
    2878:	09 f4       	brne	.+2      	; 0x287c <__vector_39+0x50>
    287a:	4e c0       	rjmp	.+156    	; 0x2918 <__vector_39+0xec>
    287c:	f2 c0       	rjmp	.+484    	; 0x2a62 <__vector_39+0x236>
    287e:	88 31       	cpi	r24, 0x18	; 24
    2880:	09 f4       	brne	.+2      	; 0x2884 <__vector_39+0x58>
    2882:	4d c0       	rjmp	.+154    	; 0x291e <__vector_39+0xf2>
    2884:	80 32       	cpi	r24, 0x20	; 32
    2886:	09 f4       	brne	.+2      	; 0x288a <__vector_39+0x5e>
    2888:	5e c0       	rjmp	.+188    	; 0x2946 <__vector_39+0x11a>
    288a:	eb c0       	rjmp	.+470    	; 0x2a62 <__vector_39+0x236>
    288c:	80 34       	cpi	r24, 0x40	; 64
    288e:	09 f4       	brne	.+2      	; 0x2892 <__vector_39+0x66>
    2890:	69 c0       	rjmp	.+210    	; 0x2964 <__vector_39+0x138>
    2892:	50 f4       	brcc	.+20     	; 0x28a8 <__vector_39+0x7c>
    2894:	80 33       	cpi	r24, 0x30	; 48
    2896:	09 f4       	brne	.+2      	; 0x289a <__vector_39+0x6e>
    2898:	56 c0       	rjmp	.+172    	; 0x2946 <__vector_39+0x11a>
    289a:	88 33       	cpi	r24, 0x38	; 56
    289c:	09 f0       	breq	.+2      	; 0x28a0 <__vector_39+0x74>
    289e:	e1 c0       	rjmp	.+450    	; 0x2a62 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    28a0:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <twi_error>
      twi_releaseBus();
    28a4:	bd df       	rcall	.-134    	; 0x2820 <twi_releaseBus>
      break;
    28a6:	dd c0       	rjmp	.+442    	; 0x2a62 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    28a8:	80 35       	cpi	r24, 0x50	; 80
    28aa:	09 f4       	brne	.+2      	; 0x28ae <__vector_39+0x82>
    28ac:	4f c0       	rjmp	.+158    	; 0x294c <__vector_39+0x120>
    28ae:	88 35       	cpi	r24, 0x58	; 88
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <__vector_39+0x88>
    28b2:	5d c0       	rjmp	.+186    	; 0x296e <__vector_39+0x142>
    28b4:	88 34       	cpi	r24, 0x48	; 72
    28b6:	09 f0       	breq	.+2      	; 0x28ba <__vector_39+0x8e>
    28b8:	d4 c0       	rjmp	.+424    	; 0x2a62 <__vector_39+0x236>
    28ba:	d2 c0       	rjmp	.+420    	; 0x2a60 <__vector_39+0x234>
    28bc:	88 39       	cpi	r24, 0x98	; 152
    28be:	09 f4       	brne	.+2      	; 0x28c2 <__vector_39+0x96>
    28c0:	c3 c0       	rjmp	.+390    	; 0x2a48 <__vector_39+0x21c>
    28c2:	a8 f4       	brcc	.+42     	; 0x28ee <__vector_39+0xc2>
    28c4:	88 37       	cpi	r24, 0x78	; 120
    28c6:	09 f4       	brne	.+2      	; 0x28ca <__vector_39+0x9e>
    28c8:	67 c0       	rjmp	.+206    	; 0x2998 <__vector_39+0x16c>
    28ca:	38 f4       	brcc	.+14     	; 0x28da <__vector_39+0xae>
    28cc:	88 36       	cpi	r24, 0x68	; 104
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <__vector_39+0xa6>
    28d0:	63 c0       	rjmp	.+198    	; 0x2998 <__vector_39+0x16c>
    28d2:	80 37       	cpi	r24, 0x70	; 112
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <__vector_39+0xac>
    28d6:	60 c0       	rjmp	.+192    	; 0x2998 <__vector_39+0x16c>
    28d8:	c4 c0       	rjmp	.+392    	; 0x2a62 <__vector_39+0x236>
    28da:	88 38       	cpi	r24, 0x88	; 136
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <__vector_39+0xb4>
    28de:	b4 c0       	rjmp	.+360    	; 0x2a48 <__vector_39+0x21c>
    28e0:	80 39       	cpi	r24, 0x90	; 144
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <__vector_39+0xba>
    28e4:	5f c0       	rjmp	.+190    	; 0x29a4 <__vector_39+0x178>
    28e6:	80 38       	cpi	r24, 0x80	; 128
    28e8:	09 f0       	breq	.+2      	; 0x28ec <__vector_39+0xc0>
    28ea:	bb c0       	rjmp	.+374    	; 0x2a62 <__vector_39+0x236>
    28ec:	5b c0       	rjmp	.+182    	; 0x29a4 <__vector_39+0x178>
    28ee:	80 3b       	cpi	r24, 0xB0	; 176
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <__vector_39+0xc8>
    28f2:	82 c0       	rjmp	.+260    	; 0x29f8 <__vector_39+0x1cc>
    28f4:	38 f4       	brcc	.+14     	; 0x2904 <__vector_39+0xd8>
    28f6:	80 3a       	cpi	r24, 0xA0	; 160
    28f8:	09 f4       	brne	.+2      	; 0x28fc <__vector_39+0xd0>
    28fa:	66 c0       	rjmp	.+204    	; 0x29c8 <__vector_39+0x19c>
    28fc:	88 3a       	cpi	r24, 0xA8	; 168
    28fe:	09 f4       	brne	.+2      	; 0x2902 <__vector_39+0xd6>
    2900:	7b c0       	rjmp	.+246    	; 0x29f8 <__vector_39+0x1cc>
    2902:	af c0       	rjmp	.+350    	; 0x2a62 <__vector_39+0x236>
    2904:	80 3c       	cpi	r24, 0xC0	; 192
    2906:	09 f4       	brne	.+2      	; 0x290a <__vector_39+0xde>
    2908:	a3 c0       	rjmp	.+326    	; 0x2a50 <__vector_39+0x224>
    290a:	88 3c       	cpi	r24, 0xC8	; 200
    290c:	09 f4       	brne	.+2      	; 0x2910 <__vector_39+0xe4>
    290e:	a0 c0       	rjmp	.+320    	; 0x2a50 <__vector_39+0x224>
    2910:	88 3b       	cpi	r24, 0xB8	; 184
    2912:	09 f4       	brne	.+2      	; 0x2916 <__vector_39+0xea>
    2914:	86 c0       	rjmp	.+268    	; 0x2a22 <__vector_39+0x1f6>
    2916:	a5 c0       	rjmp	.+330    	; 0x2a62 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2918:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <twi_slarw>
    291c:	10 c0       	rjmp	.+32     	; 0x293e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    291e:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    2922:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <twi_masterBufferLength>
    2926:	98 17       	cp	r25, r24
    2928:	70 f5       	brcc	.+92     	; 0x2986 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    292a:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	8e 0f       	add	r24, r30
    2932:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <twi_masterBufferIndex>
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	eb 52       	subi	r30, 0x2B	; 43
    293a:	f6 4f       	sbci	r31, 0xF6	; 246
    293c:	80 81       	ld	r24, Z
    293e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2942:	85 ec       	ldi	r24, 0xC5	; 197
    2944:	82 c0       	rjmp	.+260    	; 0x2a4a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2946:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <twi_error>
    294a:	8a c0       	rjmp	.+276    	; 0x2a60 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    294c:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	8e 0f       	add	r24, r30
    2954:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <twi_masterBufferIndex>
    2958:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	eb 52       	subi	r30, 0x2B	; 43
    2960:	f6 4f       	sbci	r31, 0xF6	; 246
    2962:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2964:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    2968:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <twi_masterBufferLength>
    296c:	6a c0       	rjmp	.+212    	; 0x2a42 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    296e:	e0 91 d4 09 	lds	r30, 0x09D4	; 0x8009d4 <twi_masterBufferIndex>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8e 0f       	add	r24, r30
    2976:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <twi_masterBufferIndex>
    297a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	eb 52       	subi	r30, 0x2B	; 43
    2982:	f6 4f       	sbci	r31, 0xF6	; 246
    2984:	80 83       	st	Z, r24
	if (twi_sendStop)
    2986:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <twi_sendStop>
    298a:	81 11       	cpse	r24, r1
    298c:	69 c0       	rjmp	.+210    	; 0x2a60 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2994:	84 ea       	ldi	r24, 0xA4	; 164
    2996:	5d c0       	rjmp	.+186    	; 0x2a52 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    299e:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <twi_rxBufferIndex>
    29a2:	cf cf       	rjmp	.-98     	; 0x2942 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    29a4:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <twi_rxBufferIndex>
    29a8:	80 32       	cpi	r24, 0x20	; 32
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <__vector_39+0x182>
    29ac:	4d c0       	rjmp	.+154    	; 0x2a48 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    29ae:	e0 91 90 09 	lds	r30, 0x0990	; 0x800990 <twi_rxBufferIndex>
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	8e 0f       	add	r24, r30
    29b6:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <twi_rxBufferIndex>
    29ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	ef 56       	subi	r30, 0x6F	; 111
    29c2:	f6 4f       	sbci	r31, 0xF6	; 246
    29c4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    29c6:	bd cf       	rjmp	.-134    	; 0x2942 <__vector_39+0x116>
    29c8:	2b df       	rcall	.-426    	; 0x2820 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    29ca:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <twi_rxBufferIndex>
    29ce:	80 32       	cpi	r24, 0x20	; 32
    29d0:	30 f4       	brcc	.+12     	; 0x29de <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    29d2:	e0 91 90 09 	lds	r30, 0x0990	; 0x800990 <twi_rxBufferIndex>
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	ef 56       	subi	r30, 0x6F	; 111
    29da:	f6 4f       	sbci	r31, 0xF6	; 246
    29dc:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    29de:	60 91 90 09 	lds	r22, 0x0990	; 0x800990 <twi_rxBufferIndex>
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	e0 91 f5 09 	lds	r30, 0x09F5	; 0x8009f5 <twi_onSlaveReceive>
    29e8:	f0 91 f6 09 	lds	r31, 0x09F6	; 0x8009f6 <twi_onSlaveReceive+0x1>
    29ec:	81 e9       	ldi	r24, 0x91	; 145
    29ee:	99 e0       	ldi	r25, 0x09	; 9
    29f0:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    29f2:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <twi_rxBufferIndex>
      break;
    29f6:	35 c0       	rjmp	.+106    	; 0x2a62 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    29f8:	84 e0       	ldi	r24, 0x04	; 4
    29fa:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    29fe:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2a02:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2a06:	e0 91 f7 09 	lds	r30, 0x09F7	; 0x8009f7 <twi_onSlaveTransmit>
    2a0a:	f0 91 f8 09 	lds	r31, 0x09F8	; 0x8009f8 <twi_onSlaveTransmit+0x1>
    2a0e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2a10:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <twi_txBufferLength>
    2a14:	81 11       	cpse	r24, r1
    2a16:	05 c0       	rjmp	.+10     	; 0x2a22 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2a1e:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2a22:	e0 91 b2 09 	lds	r30, 0x09B2	; 0x8009b2 <twi_txBufferIndex>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	8e 0f       	add	r24, r30
    2a2a:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <twi_txBufferIndex>
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	ed 54       	subi	r30, 0x4D	; 77
    2a32:	f6 4f       	sbci	r31, 0xF6	; 246
    2a34:	80 81       	ld	r24, Z
    2a36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2a3a:	90 91 b2 09 	lds	r25, 0x09B2	; 0x8009b2 <twi_txBufferIndex>
    2a3e:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <twi_txBufferLength>
    2a42:	98 17       	cp	r25, r24
    2a44:	08 f4       	brcc	.+2      	; 0x2a48 <__vector_39+0x21c>
    2a46:	7d cf       	rjmp	.-262    	; 0x2942 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2a48:	85 e8       	ldi	r24, 0x85	; 133
    2a4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a4e:	09 c0       	rjmp	.+18     	; 0x2a62 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2a50:	85 ec       	ldi	r24, 0xC5	; 197
    2a52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2a56:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <twi_state>
      break;
    2a5a:	03 c0       	rjmp	.+6      	; 0x2a62 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2a5c:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <twi_error>
      twi_stop();
    2a60:	d5 de       	rcall	.-598    	; 0x280c <twi_stop>
      break;
  }
}
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	bf 91       	pop	r27
    2a68:	af 91       	pop	r26
    2a6a:	9f 91       	pop	r25
    2a6c:	8f 91       	pop	r24
    2a6e:	7f 91       	pop	r23
    2a70:	6f 91       	pop	r22
    2a72:	5f 91       	pop	r21
    2a74:	4f 91       	pop	r20
    2a76:	3f 91       	pop	r19
    2a78:	2f 91       	pop	r18
    2a7a:	0f 90       	pop	r0
    2a7c:	0b be       	out	0x3b, r0	; 59
    2a7e:	0f 90       	pop	r0
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	0f 90       	pop	r0
    2a84:	1f 90       	pop	r1
    2a86:	18 95       	reti

00002a88 <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	08 95       	ret

00002a8e <_ZN5Print5flushEv>:
    2a8e:	08 95       	ret

00002a90 <_ZN7TwoWire9availableEv>:
    2a90:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	20 91 32 0a 	lds	r18, 0x0A32	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2a9a:	82 1b       	sub	r24, r18
    2a9c:	91 09       	sbc	r25, r1
    2a9e:	08 95       	ret

00002aa0 <_ZN7TwoWire4readEv>:
    2aa0:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2aa4:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2aa8:	98 17       	cp	r25, r24
    2aaa:	50 f4       	brcc	.+20     	; 0x2ac0 <_ZN7TwoWire4readEv+0x20>
    2aac:	e9 2f       	mov	r30, r25
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	ed 5c       	subi	r30, 0xCD	; 205
    2ab2:	f5 4f       	sbci	r31, 0xF5	; 245
    2ab4:	20 81       	ld	r18, Z
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	9f 5f       	subi	r25, 0xFF	; 255
    2aba:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <_ZN7TwoWire4readEv+0x24>
    2ac0:	2f ef       	ldi	r18, 0xFF	; 255
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	c9 01       	movw	r24, r18
    2ac6:	08 95       	ret

00002ac8 <_ZN7TwoWire4peekEv>:
    2ac8:	e0 91 32 0a 	lds	r30, 0x0A32	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2acc:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2ad0:	e8 17       	cp	r30, r24
    2ad2:	30 f4       	brcc	.+12     	; 0x2ae0 <_ZN7TwoWire4peekEv+0x18>
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	ed 5c       	subi	r30, 0xCD	; 205
    2ad8:	f5 4f       	sbci	r31, 0xF5	; 245
    2ada:	80 81       	ld	r24, Z
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	08 95       	ret
    2ae0:	8f ef       	ldi	r24, 0xFF	; 255
    2ae2:	9f ef       	ldi	r25, 0xFF	; 255
    2ae4:	08 95       	ret

00002ae6 <_ZN7TwoWire5flushEv>:
    2ae6:	08 95       	ret

00002ae8 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	ec 01       	movw	r28, r24
    2aee:	e0 91 09 0a 	lds	r30, 0x0A09	; 0x800a09 <_ZN7TwoWire14user_onReceiveE>
    2af2:	f0 91 0a 0a 	lds	r31, 0x0A0A	; 0x800a0a <_ZN7TwoWire14user_onReceiveE+0x1>
    2af6:	30 97       	sbiw	r30, 0x00	; 0
    2af8:	f1 f0       	breq	.+60     	; 0x2b36 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2afa:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2afe:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2b02:	98 17       	cp	r25, r24
    2b04:	c0 f0       	brcs	.+48     	; 0x2b36 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	29 2f       	mov	r18, r25
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	26 17       	cp	r18, r22
    2b0e:	37 07       	cpc	r19, r23
    2b10:	54 f4       	brge	.+20     	; 0x2b26 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2b12:	de 01       	movw	r26, r28
    2b14:	a2 0f       	add	r26, r18
    2b16:	b3 1f       	adc	r27, r19
    2b18:	4c 91       	ld	r20, X
    2b1a:	d9 01       	movw	r26, r18
    2b1c:	ad 5c       	subi	r26, 0xCD	; 205
    2b1e:	b5 4f       	sbci	r27, 0xF5	; 245
    2b20:	4c 93       	st	X, r20
    2b22:	9f 5f       	subi	r25, 0xFF	; 255
    2b24:	f1 cf       	rjmp	.-30     	; 0x2b08 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2b26:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2b2a:	60 93 31 0a 	sts	0x0A31, r22	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2b2e:	cb 01       	movw	r24, r22
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	19 94       	eijmp
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <_ZN7TwoWire16onRequestServiceEv>:
    2b3c:	e0 91 0b 0a 	lds	r30, 0x0A0B	; 0x800a0b <_ZN7TwoWire14user_onRequestE>
    2b40:	f0 91 0c 0a 	lds	r31, 0x0A0C	; 0x800a0c <_ZN7TwoWire14user_onRequestE+0x1>
    2b44:	30 97       	sbiw	r30, 0x00	; 0
    2b46:	29 f0       	breq	.+10     	; 0x2b52 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2b48:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2b4c:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2b50:	19 94       	eijmp
    2b52:	08 95       	ret

00002b54 <_ZN7TwoWire5writeEPKhj>:
    2b54:	cf 92       	push	r12
    2b56:	df 92       	push	r13
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	7c 01       	movw	r14, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8a 01       	movw	r16, r20
    2b6a:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <_ZN7TwoWire12transmittingE>
    2b6e:	22 23       	and	r18, r18
    2b70:	89 f0       	breq	.+34     	; 0x2b94 <_ZN7TwoWire5writeEPKhj+0x40>
    2b72:	eb 01       	movw	r28, r22
    2b74:	6b 01       	movw	r12, r22
    2b76:	c4 0e       	add	r12, r20
    2b78:	d5 1e       	adc	r13, r21
    2b7a:	cc 15       	cp	r28, r12
    2b7c:	dd 05       	cpc	r29, r13
    2b7e:	61 f0       	breq	.+24     	; 0x2b98 <_ZN7TwoWire5writeEPKhj+0x44>
    2b80:	69 91       	ld	r22, Y+
    2b82:	d7 01       	movw	r26, r14
    2b84:	ed 91       	ld	r30, X+
    2b86:	fc 91       	ld	r31, X
    2b88:	01 90       	ld	r0, Z+
    2b8a:	f0 81       	ld	r31, Z
    2b8c:	e0 2d       	mov	r30, r0
    2b8e:	c7 01       	movw	r24, r14
    2b90:	19 95       	eicall
    2b92:	f3 cf       	rjmp	.-26     	; 0x2b7a <_ZN7TwoWire5writeEPKhj+0x26>
    2b94:	64 2f       	mov	r22, r20
    2b96:	08 de       	rcall	.-1008   	; 0x27a8 <twi_transmit>
    2b98:	c8 01       	movw	r24, r16
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	ff 90       	pop	r15
    2ba4:	ef 90       	pop	r14
    2ba6:	df 90       	pop	r13
    2ba8:	cf 90       	pop	r12
    2baa:	08 95       	ret

00002bac <_ZN7TwoWire5writeEh>:
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	1f 92       	push	r1
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	69 83       	std	Y+1, r22	; 0x01
    2bb8:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <_ZN7TwoWire12transmittingE>
    2bbc:	22 23       	and	r18, r18
    2bbe:	d1 f0       	breq	.+52     	; 0x2bf4 <_ZN7TwoWire5writeEh+0x48>
    2bc0:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2bc4:	20 32       	cpi	r18, 0x20	; 32
    2bc6:	40 f0       	brcs	.+16     	; 0x2bd8 <_ZN7TwoWire5writeEh+0x2c>
    2bc8:	21 e0       	ldi	r18, 0x01	; 1
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	33 83       	std	Z+3, r19	; 0x03
    2bd0:	22 83       	std	Z+2, r18	; 0x02
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <_ZN7TwoWire5writeEh+0x54>
    2bd8:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2bdc:	e8 2f       	mov	r30, r24
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	e0 5f       	subi	r30, 0xF0	; 240
    2be2:	f5 4f       	sbci	r31, 0xF5	; 245
    2be4:	99 81       	ldd	r25, Y+1	; 0x01
    2be6:	90 83       	st	Z, r25
    2be8:	8f 5f       	subi	r24, 0xFF	; 255
    2bea:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2bee:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2bf2:	04 c0       	rjmp	.+8      	; 0x2bfc <_ZN7TwoWire5writeEh+0x50>
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	d6 dd       	rcall	.-1108   	; 0x27a8 <twi_transmit>
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	0f 90       	pop	r0
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	08 95       	ret

00002c08 <_ZN7TwoWireC1Ev>:
    2c08:	fc 01       	movw	r30, r24
    2c0a:	13 82       	std	Z+3, r1	; 0x03
    2c0c:	12 82       	std	Z+2, r1	; 0x02
    2c0e:	88 ee       	ldi	r24, 0xE8	; 232
    2c10:	93 e0       	ldi	r25, 0x03	; 3
    2c12:	a0 e0       	ldi	r26, 0x00	; 0
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	84 83       	std	Z+4, r24	; 0x04
    2c18:	95 83       	std	Z+5, r25	; 0x05
    2c1a:	a6 83       	std	Z+6, r26	; 0x06
    2c1c:	b7 83       	std	Z+7, r27	; 0x07
    2c1e:	85 e4       	ldi	r24, 0x45	; 69
    2c20:	92 e0       	ldi	r25, 0x02	; 2
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
    2c26:	08 95       	ret

00002c28 <_ZN7TwoWire5beginEv>:
    2c28:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2c2c:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2c30:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2c34:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2c38:	e9 dc       	rcall	.-1582   	; 0x260c <twi_init>
    2c3a:	8e e9       	ldi	r24, 0x9E	; 158
    2c3c:	95 e1       	ldi	r25, 0x15	; 21
    2c3e:	e1 dd       	rcall	.-1086   	; 0x2802 <twi_attachSlaveTxEvent>
    2c40:	84 e7       	ldi	r24, 0x74	; 116
    2c42:	95 e1       	ldi	r25, 0x15	; 21
    2c44:	d9 cd       	rjmp	.-1102   	; 0x27f8 <twi_attachSlaveRxEvent>

00002c46 <_ZN7TwoWire8setClockEm>:
    2c46:	cb 01       	movw	r24, r22
    2c48:	ba 01       	movw	r22, r20
    2c4a:	fc cc       	rjmp	.-1544   	; 0x2644 <twi_setFrequency>

00002c4c <_ZN7TwoWire17beginTransmissionEh>:
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <_ZN7TwoWire12transmittingE>
    2c52:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <_ZN7TwoWire9txAddressE>
    2c56:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2c5a:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2c5e:	08 95       	ret

00002c60 <_ZN7TwoWire15endTransmissionEh>:
    2c60:	0f 93       	push	r16
    2c62:	06 2f       	mov	r16, r22
    2c64:	21 e0       	ldi	r18, 0x01	; 1
    2c66:	40 91 0e 0a 	lds	r20, 0x0A0E	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2c6a:	60 e1       	ldi	r22, 0x10	; 16
    2c6c:	7a e0       	ldi	r23, 0x0A	; 10
    2c6e:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <_ZN7TwoWire9txAddressE>
    2c72:	44 dd       	rcall	.-1400   	; 0x26fc <twi_writeTo>
    2c74:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <_ZN7TwoWire13txBufferIndexE>
    2c78:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <_ZN7TwoWire14txBufferLengthE>
    2c7c:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <_ZN7TwoWire12transmittingE>
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <_ZN7TwoWire11requestFromEhhmhh>:
    2c84:	4f 92       	push	r4
    2c86:	5f 92       	push	r5
    2c88:	6f 92       	push	r6
    2c8a:	7f 92       	push	r7
    2c8c:	af 92       	push	r10
    2c8e:	bf 92       	push	r11
    2c90:	cf 92       	push	r12
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	5c 01       	movw	r10, r24
    2ca0:	f6 2e       	mov	r15, r22
    2ca2:	d4 2f       	mov	r29, r20
    2ca4:	28 01       	movw	r4, r16
    2ca6:	39 01       	movw	r6, r18
    2ca8:	ee 20       	and	r14, r14
    2caa:	11 f1       	breq	.+68     	; 0x2cf0 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    2cac:	cf df       	rcall	.-98     	; 0x2c4c <_ZN7TwoWire17beginTransmissionEh>
    2cae:	ce 2d       	mov	r28, r14
    2cb0:	c4 30       	cpi	r28, 0x04	; 4
    2cb2:	08 f0       	brcs	.+2      	; 0x2cb6 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2cb4:	c3 e0       	ldi	r28, 0x03	; 3
    2cb6:	c1 50       	subi	r28, 0x01	; 1
    2cb8:	c0 f0       	brcs	.+48     	; 0x2cea <_ZN7TwoWire11requestFromEhhmhh+0x66>
    2cba:	28 e0       	ldi	r18, 0x08	; 8
    2cbc:	c2 9f       	mul	r28, r18
    2cbe:	c0 01       	movw	r24, r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	a3 01       	movw	r20, r6
    2cc4:	92 01       	movw	r18, r4
    2cc6:	04 c0       	rjmp	.+8      	; 0x2cd0 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2cc8:	56 95       	lsr	r21
    2cca:	47 95       	ror	r20
    2ccc:	37 95       	ror	r19
    2cce:	27 95       	ror	r18
    2cd0:	8a 95       	dec	r24
    2cd2:	d2 f7       	brpl	.-12     	; 0x2cc8 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    2cd4:	ca 01       	movw	r24, r20
    2cd6:	b9 01       	movw	r22, r18
    2cd8:	d5 01       	movw	r26, r10
    2cda:	ed 91       	ld	r30, X+
    2cdc:	fc 91       	ld	r31, X
    2cde:	01 90       	ld	r0, Z+
    2ce0:	f0 81       	ld	r31, Z
    2ce2:	e0 2d       	mov	r30, r0
    2ce4:	c5 01       	movw	r24, r10
    2ce6:	19 95       	eicall
    2ce8:	e6 cf       	rjmp	.-52     	; 0x2cb6 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	c5 01       	movw	r24, r10
    2cee:	b8 df       	rcall	.-144    	; 0x2c60 <_ZN7TwoWire15endTransmissionEh>
    2cf0:	4d 2f       	mov	r20, r29
    2cf2:	d1 32       	cpi	r29, 0x21	; 33
    2cf4:	08 f0       	brcs	.+2      	; 0x2cf8 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	2c 2d       	mov	r18, r12
    2cfa:	63 e3       	ldi	r22, 0x33	; 51
    2cfc:	7a e0       	ldi	r23, 0x0A	; 10
    2cfe:	8f 2d       	mov	r24, r15
    2d00:	b5 dc       	rcall	.-1686   	; 0x266c <twi_readFrom>
    2d02:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <_ZN7TwoWire13rxBufferIndexE>
    2d06:	80 93 31 0a 	sts	0x0A31, r24	; 0x800a31 <_ZN7TwoWire14rxBufferLengthE>
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	cf 90       	pop	r12
    2d18:	bf 90       	pop	r11
    2d1a:	af 90       	pop	r10
    2d1c:	7f 90       	pop	r7
    2d1e:	6f 90       	pop	r6
    2d20:	5f 90       	pop	r5
    2d22:	4f 90       	pop	r4
    2d24:	08 95       	ret

00002d26 <_ZN7TwoWire11requestFromEhhh>:
    2d26:	cf 92       	push	r12
    2d28:	ef 92       	push	r14
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	c2 2e       	mov	r12, r18
    2d30:	e1 2c       	mov	r14, r1
    2d32:	00 e0       	ldi	r16, 0x00	; 0
    2d34:	10 e0       	ldi	r17, 0x00	; 0
    2d36:	98 01       	movw	r18, r16
    2d38:	a5 df       	rcall	.-182    	; 0x2c84 <_ZN7TwoWire11requestFromEhhmhh>
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ef 90       	pop	r14
    2d40:	cf 90       	pop	r12
    2d42:	08 95       	ret

00002d44 <_ZN7TwoWire11requestFromEhh>:
    2d44:	21 e0       	ldi	r18, 0x01	; 1
    2d46:	ef cf       	rjmp	.-34     	; 0x2d26 <_ZN7TwoWire11requestFromEhhh>

00002d48 <_ZN7TwoWire15endTransmissionEv>:
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	8a cf       	rjmp	.-236    	; 0x2c60 <_ZN7TwoWire15endTransmissionEh>

00002d4c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d4c:	8d ef       	ldi	r24, 0xFD	; 253
    2d4e:	99 e0       	ldi	r25, 0x09	; 9
    2d50:	5b cf       	rjmp	.-330    	; 0x2c08 <_ZN7TwoWireC1Ev>

00002d52 <__subsf3>:
    2d52:	50 58       	subi	r21, 0x80	; 128

00002d54 <__addsf3>:
    2d54:	bb 27       	eor	r27, r27
    2d56:	aa 27       	eor	r26, r26
    2d58:	0e d0       	rcall	.+28     	; 0x2d76 <__addsf3x>
    2d5a:	48 c1       	rjmp	.+656    	; 0x2fec <__fp_round>
    2d5c:	39 d1       	rcall	.+626    	; 0x2fd0 <__fp_pscA>
    2d5e:	30 f0       	brcs	.+12     	; 0x2d6c <__addsf3+0x18>
    2d60:	3e d1       	rcall	.+636    	; 0x2fde <__fp_pscB>
    2d62:	20 f0       	brcs	.+8      	; 0x2d6c <__addsf3+0x18>
    2d64:	31 f4       	brne	.+12     	; 0x2d72 <__addsf3+0x1e>
    2d66:	9f 3f       	cpi	r25, 0xFF	; 255
    2d68:	11 f4       	brne	.+4      	; 0x2d6e <__addsf3+0x1a>
    2d6a:	1e f4       	brtc	.+6      	; 0x2d72 <__addsf3+0x1e>
    2d6c:	2e c1       	rjmp	.+604    	; 0x2fca <__fp_nan>
    2d6e:	0e f4       	brtc	.+2      	; 0x2d72 <__addsf3+0x1e>
    2d70:	e0 95       	com	r30
    2d72:	e7 fb       	bst	r30, 7
    2d74:	24 c1       	rjmp	.+584    	; 0x2fbe <__fp_inf>

00002d76 <__addsf3x>:
    2d76:	e9 2f       	mov	r30, r25
    2d78:	4a d1       	rcall	.+660    	; 0x300e <__fp_split3>
    2d7a:	80 f3       	brcs	.-32     	; 0x2d5c <__addsf3+0x8>
    2d7c:	ba 17       	cp	r27, r26
    2d7e:	62 07       	cpc	r22, r18
    2d80:	73 07       	cpc	r23, r19
    2d82:	84 07       	cpc	r24, r20
    2d84:	95 07       	cpc	r25, r21
    2d86:	18 f0       	brcs	.+6      	; 0x2d8e <__addsf3x+0x18>
    2d88:	71 f4       	brne	.+28     	; 0x2da6 <__addsf3x+0x30>
    2d8a:	9e f5       	brtc	.+102    	; 0x2df2 <__addsf3x+0x7c>
    2d8c:	62 c1       	rjmp	.+708    	; 0x3052 <__fp_zero>
    2d8e:	0e f4       	brtc	.+2      	; 0x2d92 <__addsf3x+0x1c>
    2d90:	e0 95       	com	r30
    2d92:	0b 2e       	mov	r0, r27
    2d94:	ba 2f       	mov	r27, r26
    2d96:	a0 2d       	mov	r26, r0
    2d98:	0b 01       	movw	r0, r22
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	90 01       	movw	r18, r0
    2d9e:	0c 01       	movw	r0, r24
    2da0:	ca 01       	movw	r24, r20
    2da2:	a0 01       	movw	r20, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	ff 27       	eor	r31, r31
    2da8:	59 1b       	sub	r21, r25
    2daa:	99 f0       	breq	.+38     	; 0x2dd2 <__addsf3x+0x5c>
    2dac:	59 3f       	cpi	r21, 0xF9	; 249
    2dae:	50 f4       	brcc	.+20     	; 0x2dc4 <__addsf3x+0x4e>
    2db0:	50 3e       	cpi	r21, 0xE0	; 224
    2db2:	68 f1       	brcs	.+90     	; 0x2e0e <__addsf3x+0x98>
    2db4:	1a 16       	cp	r1, r26
    2db6:	f0 40       	sbci	r31, 0x00	; 0
    2db8:	a2 2f       	mov	r26, r18
    2dba:	23 2f       	mov	r18, r19
    2dbc:	34 2f       	mov	r19, r20
    2dbe:	44 27       	eor	r20, r20
    2dc0:	58 5f       	subi	r21, 0xF8	; 248
    2dc2:	f3 cf       	rjmp	.-26     	; 0x2daa <__addsf3x+0x34>
    2dc4:	46 95       	lsr	r20
    2dc6:	37 95       	ror	r19
    2dc8:	27 95       	ror	r18
    2dca:	a7 95       	ror	r26
    2dcc:	f0 40       	sbci	r31, 0x00	; 0
    2dce:	53 95       	inc	r21
    2dd0:	c9 f7       	brne	.-14     	; 0x2dc4 <__addsf3x+0x4e>
    2dd2:	7e f4       	brtc	.+30     	; 0x2df2 <__addsf3x+0x7c>
    2dd4:	1f 16       	cp	r1, r31
    2dd6:	ba 0b       	sbc	r27, r26
    2dd8:	62 0b       	sbc	r22, r18
    2dda:	73 0b       	sbc	r23, r19
    2ddc:	84 0b       	sbc	r24, r20
    2dde:	ba f0       	brmi	.+46     	; 0x2e0e <__addsf3x+0x98>
    2de0:	91 50       	subi	r25, 0x01	; 1
    2de2:	a1 f0       	breq	.+40     	; 0x2e0c <__addsf3x+0x96>
    2de4:	ff 0f       	add	r31, r31
    2de6:	bb 1f       	adc	r27, r27
    2de8:	66 1f       	adc	r22, r22
    2dea:	77 1f       	adc	r23, r23
    2dec:	88 1f       	adc	r24, r24
    2dee:	c2 f7       	brpl	.-16     	; 0x2de0 <__addsf3x+0x6a>
    2df0:	0e c0       	rjmp	.+28     	; 0x2e0e <__addsf3x+0x98>
    2df2:	ba 0f       	add	r27, r26
    2df4:	62 1f       	adc	r22, r18
    2df6:	73 1f       	adc	r23, r19
    2df8:	84 1f       	adc	r24, r20
    2dfa:	48 f4       	brcc	.+18     	; 0x2e0e <__addsf3x+0x98>
    2dfc:	87 95       	ror	r24
    2dfe:	77 95       	ror	r23
    2e00:	67 95       	ror	r22
    2e02:	b7 95       	ror	r27
    2e04:	f7 95       	ror	r31
    2e06:	9e 3f       	cpi	r25, 0xFE	; 254
    2e08:	08 f0       	brcs	.+2      	; 0x2e0c <__addsf3x+0x96>
    2e0a:	b3 cf       	rjmp	.-154    	; 0x2d72 <__addsf3+0x1e>
    2e0c:	93 95       	inc	r25
    2e0e:	88 0f       	add	r24, r24
    2e10:	08 f0       	brcs	.+2      	; 0x2e14 <__addsf3x+0x9e>
    2e12:	99 27       	eor	r25, r25
    2e14:	ee 0f       	add	r30, r30
    2e16:	97 95       	ror	r25
    2e18:	87 95       	ror	r24
    2e1a:	08 95       	ret

00002e1c <__divsf3>:
    2e1c:	0c d0       	rcall	.+24     	; 0x2e36 <__divsf3x>
    2e1e:	e6 c0       	rjmp	.+460    	; 0x2fec <__fp_round>
    2e20:	de d0       	rcall	.+444    	; 0x2fde <__fp_pscB>
    2e22:	40 f0       	brcs	.+16     	; 0x2e34 <__divsf3+0x18>
    2e24:	d5 d0       	rcall	.+426    	; 0x2fd0 <__fp_pscA>
    2e26:	30 f0       	brcs	.+12     	; 0x2e34 <__divsf3+0x18>
    2e28:	21 f4       	brne	.+8      	; 0x2e32 <__divsf3+0x16>
    2e2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e2c:	19 f0       	breq	.+6      	; 0x2e34 <__divsf3+0x18>
    2e2e:	c7 c0       	rjmp	.+398    	; 0x2fbe <__fp_inf>
    2e30:	51 11       	cpse	r21, r1
    2e32:	10 c1       	rjmp	.+544    	; 0x3054 <__fp_szero>
    2e34:	ca c0       	rjmp	.+404    	; 0x2fca <__fp_nan>

00002e36 <__divsf3x>:
    2e36:	eb d0       	rcall	.+470    	; 0x300e <__fp_split3>
    2e38:	98 f3       	brcs	.-26     	; 0x2e20 <__divsf3+0x4>

00002e3a <__divsf3_pse>:
    2e3a:	99 23       	and	r25, r25
    2e3c:	c9 f3       	breq	.-14     	; 0x2e30 <__divsf3+0x14>
    2e3e:	55 23       	and	r21, r21
    2e40:	b1 f3       	breq	.-20     	; 0x2e2e <__divsf3+0x12>
    2e42:	95 1b       	sub	r25, r21
    2e44:	55 0b       	sbc	r21, r21
    2e46:	bb 27       	eor	r27, r27
    2e48:	aa 27       	eor	r26, r26
    2e4a:	62 17       	cp	r22, r18
    2e4c:	73 07       	cpc	r23, r19
    2e4e:	84 07       	cpc	r24, r20
    2e50:	38 f0       	brcs	.+14     	; 0x2e60 <__divsf3_pse+0x26>
    2e52:	9f 5f       	subi	r25, 0xFF	; 255
    2e54:	5f 4f       	sbci	r21, 0xFF	; 255
    2e56:	22 0f       	add	r18, r18
    2e58:	33 1f       	adc	r19, r19
    2e5a:	44 1f       	adc	r20, r20
    2e5c:	aa 1f       	adc	r26, r26
    2e5e:	a9 f3       	breq	.-22     	; 0x2e4a <__divsf3_pse+0x10>
    2e60:	33 d0       	rcall	.+102    	; 0x2ec8 <__divsf3_pse+0x8e>
    2e62:	0e 2e       	mov	r0, r30
    2e64:	3a f0       	brmi	.+14     	; 0x2e74 <__divsf3_pse+0x3a>
    2e66:	e0 e8       	ldi	r30, 0x80	; 128
    2e68:	30 d0       	rcall	.+96     	; 0x2eca <__divsf3_pse+0x90>
    2e6a:	91 50       	subi	r25, 0x01	; 1
    2e6c:	50 40       	sbci	r21, 0x00	; 0
    2e6e:	e6 95       	lsr	r30
    2e70:	00 1c       	adc	r0, r0
    2e72:	ca f7       	brpl	.-14     	; 0x2e66 <__divsf3_pse+0x2c>
    2e74:	29 d0       	rcall	.+82     	; 0x2ec8 <__divsf3_pse+0x8e>
    2e76:	fe 2f       	mov	r31, r30
    2e78:	27 d0       	rcall	.+78     	; 0x2ec8 <__divsf3_pse+0x8e>
    2e7a:	66 0f       	add	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	bb 1f       	adc	r27, r27
    2e82:	26 17       	cp	r18, r22
    2e84:	37 07       	cpc	r19, r23
    2e86:	48 07       	cpc	r20, r24
    2e88:	ab 07       	cpc	r26, r27
    2e8a:	b0 e8       	ldi	r27, 0x80	; 128
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <__divsf3_pse+0x56>
    2e8e:	bb 0b       	sbc	r27, r27
    2e90:	80 2d       	mov	r24, r0
    2e92:	bf 01       	movw	r22, r30
    2e94:	ff 27       	eor	r31, r31
    2e96:	93 58       	subi	r25, 0x83	; 131
    2e98:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9a:	2a f0       	brmi	.+10     	; 0x2ea6 <__divsf3_pse+0x6c>
    2e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e9e:	51 05       	cpc	r21, r1
    2ea0:	68 f0       	brcs	.+26     	; 0x2ebc <__divsf3_pse+0x82>
    2ea2:	8d c0       	rjmp	.+282    	; 0x2fbe <__fp_inf>
    2ea4:	d7 c0       	rjmp	.+430    	; 0x3054 <__fp_szero>
    2ea6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ea8:	ec f3       	brlt	.-6      	; 0x2ea4 <__divsf3_pse+0x6a>
    2eaa:	98 3e       	cpi	r25, 0xE8	; 232
    2eac:	dc f3       	brlt	.-10     	; 0x2ea4 <__divsf3_pse+0x6a>
    2eae:	86 95       	lsr	r24
    2eb0:	77 95       	ror	r23
    2eb2:	67 95       	ror	r22
    2eb4:	b7 95       	ror	r27
    2eb6:	f7 95       	ror	r31
    2eb8:	9f 5f       	subi	r25, 0xFF	; 255
    2eba:	c9 f7       	brne	.-14     	; 0x2eae <__divsf3_pse+0x74>
    2ebc:	88 0f       	add	r24, r24
    2ebe:	91 1d       	adc	r25, r1
    2ec0:	96 95       	lsr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	97 f9       	bld	r25, 7
    2ec6:	08 95       	ret
    2ec8:	e1 e0       	ldi	r30, 0x01	; 1
    2eca:	66 0f       	add	r22, r22
    2ecc:	77 1f       	adc	r23, r23
    2ece:	88 1f       	adc	r24, r24
    2ed0:	bb 1f       	adc	r27, r27
    2ed2:	62 17       	cp	r22, r18
    2ed4:	73 07       	cpc	r23, r19
    2ed6:	84 07       	cpc	r24, r20
    2ed8:	ba 07       	cpc	r27, r26
    2eda:	20 f0       	brcs	.+8      	; 0x2ee4 <__divsf3_pse+0xaa>
    2edc:	62 1b       	sub	r22, r18
    2ede:	73 0b       	sbc	r23, r19
    2ee0:	84 0b       	sbc	r24, r20
    2ee2:	ba 0b       	sbc	r27, r26
    2ee4:	ee 1f       	adc	r30, r30
    2ee6:	88 f7       	brcc	.-30     	; 0x2eca <__divsf3_pse+0x90>
    2ee8:	e0 95       	com	r30
    2eea:	08 95       	ret

00002eec <__fixunssfsi>:
    2eec:	98 d0       	rcall	.+304    	; 0x301e <__fp_splitA>
    2eee:	88 f0       	brcs	.+34     	; 0x2f12 <__fixunssfsi+0x26>
    2ef0:	9f 57       	subi	r25, 0x7F	; 127
    2ef2:	90 f0       	brcs	.+36     	; 0x2f18 <__fixunssfsi+0x2c>
    2ef4:	b9 2f       	mov	r27, r25
    2ef6:	99 27       	eor	r25, r25
    2ef8:	b7 51       	subi	r27, 0x17	; 23
    2efa:	a0 f0       	brcs	.+40     	; 0x2f24 <__fixunssfsi+0x38>
    2efc:	d1 f0       	breq	.+52     	; 0x2f32 <__fixunssfsi+0x46>
    2efe:	66 0f       	add	r22, r22
    2f00:	77 1f       	adc	r23, r23
    2f02:	88 1f       	adc	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	1a f0       	brmi	.+6      	; 0x2f0e <__fixunssfsi+0x22>
    2f08:	ba 95       	dec	r27
    2f0a:	c9 f7       	brne	.-14     	; 0x2efe <__fixunssfsi+0x12>
    2f0c:	12 c0       	rjmp	.+36     	; 0x2f32 <__fixunssfsi+0x46>
    2f0e:	b1 30       	cpi	r27, 0x01	; 1
    2f10:	81 f0       	breq	.+32     	; 0x2f32 <__fixunssfsi+0x46>
    2f12:	9f d0       	rcall	.+318    	; 0x3052 <__fp_zero>
    2f14:	b1 e0       	ldi	r27, 0x01	; 1
    2f16:	08 95       	ret
    2f18:	9c c0       	rjmp	.+312    	; 0x3052 <__fp_zero>
    2f1a:	67 2f       	mov	r22, r23
    2f1c:	78 2f       	mov	r23, r24
    2f1e:	88 27       	eor	r24, r24
    2f20:	b8 5f       	subi	r27, 0xF8	; 248
    2f22:	39 f0       	breq	.+14     	; 0x2f32 <__fixunssfsi+0x46>
    2f24:	b9 3f       	cpi	r27, 0xF9	; 249
    2f26:	cc f3       	brlt	.-14     	; 0x2f1a <__fixunssfsi+0x2e>
    2f28:	86 95       	lsr	r24
    2f2a:	77 95       	ror	r23
    2f2c:	67 95       	ror	r22
    2f2e:	b3 95       	inc	r27
    2f30:	d9 f7       	brne	.-10     	; 0x2f28 <__fixunssfsi+0x3c>
    2f32:	3e f4       	brtc	.+14     	; 0x2f42 <__fixunssfsi+0x56>
    2f34:	90 95       	com	r25
    2f36:	80 95       	com	r24
    2f38:	70 95       	com	r23
    2f3a:	61 95       	neg	r22
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f40:	9f 4f       	sbci	r25, 0xFF	; 255
    2f42:	08 95       	ret

00002f44 <__floatunsisf>:
    2f44:	e8 94       	clt
    2f46:	09 c0       	rjmp	.+18     	; 0x2f5a <__floatsisf+0x12>

00002f48 <__floatsisf>:
    2f48:	97 fb       	bst	r25, 7
    2f4a:	3e f4       	brtc	.+14     	; 0x2f5a <__floatsisf+0x12>
    2f4c:	90 95       	com	r25
    2f4e:	80 95       	com	r24
    2f50:	70 95       	com	r23
    2f52:	61 95       	neg	r22
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	8f 4f       	sbci	r24, 0xFF	; 255
    2f58:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5a:	99 23       	and	r25, r25
    2f5c:	a9 f0       	breq	.+42     	; 0x2f88 <__floatsisf+0x40>
    2f5e:	f9 2f       	mov	r31, r25
    2f60:	96 e9       	ldi	r25, 0x96	; 150
    2f62:	bb 27       	eor	r27, r27
    2f64:	93 95       	inc	r25
    2f66:	f6 95       	lsr	r31
    2f68:	87 95       	ror	r24
    2f6a:	77 95       	ror	r23
    2f6c:	67 95       	ror	r22
    2f6e:	b7 95       	ror	r27
    2f70:	f1 11       	cpse	r31, r1
    2f72:	f8 cf       	rjmp	.-16     	; 0x2f64 <__floatsisf+0x1c>
    2f74:	fa f4       	brpl	.+62     	; 0x2fb4 <__floatsisf+0x6c>
    2f76:	bb 0f       	add	r27, r27
    2f78:	11 f4       	brne	.+4      	; 0x2f7e <__floatsisf+0x36>
    2f7a:	60 ff       	sbrs	r22, 0
    2f7c:	1b c0       	rjmp	.+54     	; 0x2fb4 <__floatsisf+0x6c>
    2f7e:	6f 5f       	subi	r22, 0xFF	; 255
    2f80:	7f 4f       	sbci	r23, 0xFF	; 255
    2f82:	8f 4f       	sbci	r24, 0xFF	; 255
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	16 c0       	rjmp	.+44     	; 0x2fb4 <__floatsisf+0x6c>
    2f88:	88 23       	and	r24, r24
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <__floatsisf+0x48>
    2f8c:	96 e9       	ldi	r25, 0x96	; 150
    2f8e:	11 c0       	rjmp	.+34     	; 0x2fb2 <__floatsisf+0x6a>
    2f90:	77 23       	and	r23, r23
    2f92:	21 f0       	breq	.+8      	; 0x2f9c <__floatsisf+0x54>
    2f94:	9e e8       	ldi	r25, 0x8E	; 142
    2f96:	87 2f       	mov	r24, r23
    2f98:	76 2f       	mov	r23, r22
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <__floatsisf+0x5e>
    2f9c:	66 23       	and	r22, r22
    2f9e:	71 f0       	breq	.+28     	; 0x2fbc <__floatsisf+0x74>
    2fa0:	96 e8       	ldi	r25, 0x86	; 134
    2fa2:	86 2f       	mov	r24, r22
    2fa4:	70 e0       	ldi	r23, 0x00	; 0
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	2a f0       	brmi	.+10     	; 0x2fb4 <__floatsisf+0x6c>
    2faa:	9a 95       	dec	r25
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	da f7       	brpl	.-10     	; 0x2faa <__floatsisf+0x62>
    2fb4:	88 0f       	add	r24, r24
    2fb6:	96 95       	lsr	r25
    2fb8:	87 95       	ror	r24
    2fba:	97 f9       	bld	r25, 7
    2fbc:	08 95       	ret

00002fbe <__fp_inf>:
    2fbe:	97 f9       	bld	r25, 7
    2fc0:	9f 67       	ori	r25, 0x7F	; 127
    2fc2:	80 e8       	ldi	r24, 0x80	; 128
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	08 95       	ret

00002fca <__fp_nan>:
    2fca:	9f ef       	ldi	r25, 0xFF	; 255
    2fcc:	80 ec       	ldi	r24, 0xC0	; 192
    2fce:	08 95       	ret

00002fd0 <__fp_pscA>:
    2fd0:	00 24       	eor	r0, r0
    2fd2:	0a 94       	dec	r0
    2fd4:	16 16       	cp	r1, r22
    2fd6:	17 06       	cpc	r1, r23
    2fd8:	18 06       	cpc	r1, r24
    2fda:	09 06       	cpc	r0, r25
    2fdc:	08 95       	ret

00002fde <__fp_pscB>:
    2fde:	00 24       	eor	r0, r0
    2fe0:	0a 94       	dec	r0
    2fe2:	12 16       	cp	r1, r18
    2fe4:	13 06       	cpc	r1, r19
    2fe6:	14 06       	cpc	r1, r20
    2fe8:	05 06       	cpc	r0, r21
    2fea:	08 95       	ret

00002fec <__fp_round>:
    2fec:	09 2e       	mov	r0, r25
    2fee:	03 94       	inc	r0
    2ff0:	00 0c       	add	r0, r0
    2ff2:	11 f4       	brne	.+4      	; 0x2ff8 <__fp_round+0xc>
    2ff4:	88 23       	and	r24, r24
    2ff6:	52 f0       	brmi	.+20     	; 0x300c <__fp_round+0x20>
    2ff8:	bb 0f       	add	r27, r27
    2ffa:	40 f4       	brcc	.+16     	; 0x300c <__fp_round+0x20>
    2ffc:	bf 2b       	or	r27, r31
    2ffe:	11 f4       	brne	.+4      	; 0x3004 <__fp_round+0x18>
    3000:	60 ff       	sbrs	r22, 0
    3002:	04 c0       	rjmp	.+8      	; 0x300c <__fp_round+0x20>
    3004:	6f 5f       	subi	r22, 0xFF	; 255
    3006:	7f 4f       	sbci	r23, 0xFF	; 255
    3008:	8f 4f       	sbci	r24, 0xFF	; 255
    300a:	9f 4f       	sbci	r25, 0xFF	; 255
    300c:	08 95       	ret

0000300e <__fp_split3>:
    300e:	57 fd       	sbrc	r21, 7
    3010:	90 58       	subi	r25, 0x80	; 128
    3012:	44 0f       	add	r20, r20
    3014:	55 1f       	adc	r21, r21
    3016:	59 f0       	breq	.+22     	; 0x302e <__fp_splitA+0x10>
    3018:	5f 3f       	cpi	r21, 0xFF	; 255
    301a:	71 f0       	breq	.+28     	; 0x3038 <__fp_splitA+0x1a>
    301c:	47 95       	ror	r20

0000301e <__fp_splitA>:
    301e:	88 0f       	add	r24, r24
    3020:	97 fb       	bst	r25, 7
    3022:	99 1f       	adc	r25, r25
    3024:	61 f0       	breq	.+24     	; 0x303e <__fp_splitA+0x20>
    3026:	9f 3f       	cpi	r25, 0xFF	; 255
    3028:	79 f0       	breq	.+30     	; 0x3048 <__fp_splitA+0x2a>
    302a:	87 95       	ror	r24
    302c:	08 95       	ret
    302e:	12 16       	cp	r1, r18
    3030:	13 06       	cpc	r1, r19
    3032:	14 06       	cpc	r1, r20
    3034:	55 1f       	adc	r21, r21
    3036:	f2 cf       	rjmp	.-28     	; 0x301c <__fp_split3+0xe>
    3038:	46 95       	lsr	r20
    303a:	f1 df       	rcall	.-30     	; 0x301e <__fp_splitA>
    303c:	08 c0       	rjmp	.+16     	; 0x304e <__fp_splitA+0x30>
    303e:	16 16       	cp	r1, r22
    3040:	17 06       	cpc	r1, r23
    3042:	18 06       	cpc	r1, r24
    3044:	99 1f       	adc	r25, r25
    3046:	f1 cf       	rjmp	.-30     	; 0x302a <__fp_splitA+0xc>
    3048:	86 95       	lsr	r24
    304a:	71 05       	cpc	r23, r1
    304c:	61 05       	cpc	r22, r1
    304e:	08 94       	sec
    3050:	08 95       	ret

00003052 <__fp_zero>:
    3052:	e8 94       	clt

00003054 <__fp_szero>:
    3054:	bb 27       	eor	r27, r27
    3056:	66 27       	eor	r22, r22
    3058:	77 27       	eor	r23, r23
    305a:	cb 01       	movw	r24, r22
    305c:	97 f9       	bld	r25, 7
    305e:	08 95       	ret

00003060 <__mulsf3>:
    3060:	0b d0       	rcall	.+22     	; 0x3078 <__mulsf3x>
    3062:	c4 cf       	rjmp	.-120    	; 0x2fec <__fp_round>
    3064:	b5 df       	rcall	.-150    	; 0x2fd0 <__fp_pscA>
    3066:	28 f0       	brcs	.+10     	; 0x3072 <__mulsf3+0x12>
    3068:	ba df       	rcall	.-140    	; 0x2fde <__fp_pscB>
    306a:	18 f0       	brcs	.+6      	; 0x3072 <__mulsf3+0x12>
    306c:	95 23       	and	r25, r21
    306e:	09 f0       	breq	.+2      	; 0x3072 <__mulsf3+0x12>
    3070:	a6 cf       	rjmp	.-180    	; 0x2fbe <__fp_inf>
    3072:	ab cf       	rjmp	.-170    	; 0x2fca <__fp_nan>
    3074:	11 24       	eor	r1, r1
    3076:	ee cf       	rjmp	.-36     	; 0x3054 <__fp_szero>

00003078 <__mulsf3x>:
    3078:	ca df       	rcall	.-108    	; 0x300e <__fp_split3>
    307a:	a0 f3       	brcs	.-24     	; 0x3064 <__mulsf3+0x4>

0000307c <__mulsf3_pse>:
    307c:	95 9f       	mul	r25, r21
    307e:	d1 f3       	breq	.-12     	; 0x3074 <__mulsf3+0x14>
    3080:	95 0f       	add	r25, r21
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	55 1f       	adc	r21, r21
    3086:	62 9f       	mul	r22, r18
    3088:	f0 01       	movw	r30, r0
    308a:	72 9f       	mul	r23, r18
    308c:	bb 27       	eor	r27, r27
    308e:	f0 0d       	add	r31, r0
    3090:	b1 1d       	adc	r27, r1
    3092:	63 9f       	mul	r22, r19
    3094:	aa 27       	eor	r26, r26
    3096:	f0 0d       	add	r31, r0
    3098:	b1 1d       	adc	r27, r1
    309a:	aa 1f       	adc	r26, r26
    309c:	64 9f       	mul	r22, r20
    309e:	66 27       	eor	r22, r22
    30a0:	b0 0d       	add	r27, r0
    30a2:	a1 1d       	adc	r26, r1
    30a4:	66 1f       	adc	r22, r22
    30a6:	82 9f       	mul	r24, r18
    30a8:	22 27       	eor	r18, r18
    30aa:	b0 0d       	add	r27, r0
    30ac:	a1 1d       	adc	r26, r1
    30ae:	62 1f       	adc	r22, r18
    30b0:	73 9f       	mul	r23, r19
    30b2:	b0 0d       	add	r27, r0
    30b4:	a1 1d       	adc	r26, r1
    30b6:	62 1f       	adc	r22, r18
    30b8:	83 9f       	mul	r24, r19
    30ba:	a0 0d       	add	r26, r0
    30bc:	61 1d       	adc	r22, r1
    30be:	22 1f       	adc	r18, r18
    30c0:	74 9f       	mul	r23, r20
    30c2:	33 27       	eor	r19, r19
    30c4:	a0 0d       	add	r26, r0
    30c6:	61 1d       	adc	r22, r1
    30c8:	23 1f       	adc	r18, r19
    30ca:	84 9f       	mul	r24, r20
    30cc:	60 0d       	add	r22, r0
    30ce:	21 1d       	adc	r18, r1
    30d0:	82 2f       	mov	r24, r18
    30d2:	76 2f       	mov	r23, r22
    30d4:	6a 2f       	mov	r22, r26
    30d6:	11 24       	eor	r1, r1
    30d8:	9f 57       	subi	r25, 0x7F	; 127
    30da:	50 40       	sbci	r21, 0x00	; 0
    30dc:	8a f0       	brmi	.+34     	; 0x3100 <__mulsf3_pse+0x84>
    30de:	e1 f0       	breq	.+56     	; 0x3118 <__mulsf3_pse+0x9c>
    30e0:	88 23       	and	r24, r24
    30e2:	4a f0       	brmi	.+18     	; 0x30f6 <__mulsf3_pse+0x7a>
    30e4:	ee 0f       	add	r30, r30
    30e6:	ff 1f       	adc	r31, r31
    30e8:	bb 1f       	adc	r27, r27
    30ea:	66 1f       	adc	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	88 1f       	adc	r24, r24
    30f0:	91 50       	subi	r25, 0x01	; 1
    30f2:	50 40       	sbci	r21, 0x00	; 0
    30f4:	a9 f7       	brne	.-22     	; 0x30e0 <__mulsf3_pse+0x64>
    30f6:	9e 3f       	cpi	r25, 0xFE	; 254
    30f8:	51 05       	cpc	r21, r1
    30fa:	70 f0       	brcs	.+28     	; 0x3118 <__mulsf3_pse+0x9c>
    30fc:	60 cf       	rjmp	.-320    	; 0x2fbe <__fp_inf>
    30fe:	aa cf       	rjmp	.-172    	; 0x3054 <__fp_szero>
    3100:	5f 3f       	cpi	r21, 0xFF	; 255
    3102:	ec f3       	brlt	.-6      	; 0x30fe <__mulsf3_pse+0x82>
    3104:	98 3e       	cpi	r25, 0xE8	; 232
    3106:	dc f3       	brlt	.-10     	; 0x30fe <__mulsf3_pse+0x82>
    3108:	86 95       	lsr	r24
    310a:	77 95       	ror	r23
    310c:	67 95       	ror	r22
    310e:	b7 95       	ror	r27
    3110:	f7 95       	ror	r31
    3112:	e7 95       	ror	r30
    3114:	9f 5f       	subi	r25, 0xFF	; 255
    3116:	c1 f7       	brne	.-16     	; 0x3108 <__mulsf3_pse+0x8c>
    3118:	fe 2b       	or	r31, r30
    311a:	88 0f       	add	r24, r24
    311c:	91 1d       	adc	r25, r1
    311e:	96 95       	lsr	r25
    3120:	87 95       	ror	r24
    3122:	97 f9       	bld	r25, 7
    3124:	08 95       	ret

00003126 <initVariant>:
    3126:	08 95       	ret

00003128 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3128:	cb d0       	rcall	.+406    	; 0x32c0 <init>

	initVariant();
    312a:	fd df       	rcall	.-6      	; 0x3126 <initVariant>
    312c:	0e 94 1a 09 	call	0x1234	; 0x1234 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3130:	c0 e0       	ldi	r28, 0x00	; 0
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3132:	d0 e0       	ldi	r29, 0x00	; 0
    3134:	0e 94 2e 0a 	call	0x145c	; 0x145c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    3138:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    313a:	e1 f3       	breq	.-8      	; 0x3134 <main+0xc>
    313c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3140:	f9 cf       	rjmp	.-14     	; 0x3134 <main+0xc>

00003142 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3142:	1f 92       	push	r1
    3144:	0f 92       	push	r0
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	0f 92       	push	r0
    314a:	11 24       	eor	r1, r1
    314c:	2f 93       	push	r18
    314e:	3f 93       	push	r19
    3150:	8f 93       	push	r24
    3152:	9f 93       	push	r25
    3154:	af 93       	push	r26
    3156:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3158:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <timer0_millis>
    315c:	90 91 55 0a 	lds	r25, 0x0A55	; 0x800a55 <timer0_millis+0x1>
    3160:	a0 91 56 0a 	lds	r26, 0x0A56	; 0x800a56 <timer0_millis+0x2>
    3164:	b0 91 57 0a 	lds	r27, 0x0A57	; 0x800a57 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3168:	30 91 53 0a 	lds	r19, 0x0A53	; 0x800a53 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    316c:	23 e0       	ldi	r18, 0x03	; 3
    316e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3170:	2d 37       	cpi	r18, 0x7D	; 125
    3172:	20 f4       	brcc	.+8      	; 0x317c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	a1 1d       	adc	r26, r1
    3178:	b1 1d       	adc	r27, r1
    317a:	05 c0       	rjmp	.+10     	; 0x3186 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    317c:	26 e8       	ldi	r18, 0x86	; 134
    317e:	23 0f       	add	r18, r19
		m += 1;
    3180:	02 96       	adiw	r24, 0x02	; 2
    3182:	a1 1d       	adc	r26, r1
    3184:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3186:	20 93 53 0a 	sts	0x0A53, r18	; 0x800a53 <timer0_fract>
	timer0_millis = m;
    318a:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <timer0_millis>
    318e:	90 93 55 0a 	sts	0x0A55, r25	; 0x800a55 <timer0_millis+0x1>
    3192:	a0 93 56 0a 	sts	0x0A56, r26	; 0x800a56 <timer0_millis+0x2>
    3196:	b0 93 57 0a 	sts	0x0A57, r27	; 0x800a57 <timer0_millis+0x3>
	timer0_overflow_count++;
    319a:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <timer0_overflow_count>
    319e:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <timer0_overflow_count+0x1>
    31a2:	a0 91 5a 0a 	lds	r26, 0x0A5A	; 0x800a5a <timer0_overflow_count+0x2>
    31a6:	b0 91 5b 0a 	lds	r27, 0x0A5B	; 0x800a5b <timer0_overflow_count+0x3>
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	a1 1d       	adc	r26, r1
    31ae:	b1 1d       	adc	r27, r1
    31b0:	80 93 58 0a 	sts	0x0A58, r24	; 0x800a58 <timer0_overflow_count>
    31b4:	90 93 59 0a 	sts	0x0A59, r25	; 0x800a59 <timer0_overflow_count+0x1>
    31b8:	a0 93 5a 0a 	sts	0x0A5A, r26	; 0x800a5a <timer0_overflow_count+0x2>
    31bc:	b0 93 5b 0a 	sts	0x0A5B, r27	; 0x800a5b <timer0_overflow_count+0x3>
}
    31c0:	bf 91       	pop	r27
    31c2:	af 91       	pop	r26
    31c4:	9f 91       	pop	r25
    31c6:	8f 91       	pop	r24
    31c8:	3f 91       	pop	r19
    31ca:	2f 91       	pop	r18
    31cc:	0f 90       	pop	r0
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	0f 90       	pop	r0
    31d2:	1f 90       	pop	r1
    31d4:	18 95       	reti

000031d6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    31d6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    31d8:	f8 94       	cli
	m = timer0_millis;
    31da:	60 91 54 0a 	lds	r22, 0x0A54	; 0x800a54 <timer0_millis>
    31de:	70 91 55 0a 	lds	r23, 0x0A55	; 0x800a55 <timer0_millis+0x1>
    31e2:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <timer0_millis+0x2>
    31e6:	90 91 57 0a 	lds	r25, 0x0A57	; 0x800a57 <timer0_millis+0x3>
	SREG = oldSREG;
    31ea:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    31ec:	08 95       	ret

000031ee <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    31ee:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    31f0:	f8 94       	cli
	m = timer0_overflow_count;
    31f2:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <timer0_overflow_count>
    31f6:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <timer0_overflow_count+0x1>
    31fa:	a0 91 5a 0a 	lds	r26, 0x0A5A	; 0x800a5a <timer0_overflow_count+0x2>
    31fe:	b0 91 5b 0a 	lds	r27, 0x0A5B	; 0x800a5b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3202:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3204:	a8 9b       	sbis	0x15, 0	; 21
    3206:	05 c0       	rjmp	.+10     	; 0x3212 <micros+0x24>
    3208:	2f 3f       	cpi	r18, 0xFF	; 255
    320a:	19 f0       	breq	.+6      	; 0x3212 <micros+0x24>
		m++;
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	a1 1d       	adc	r26, r1
    3210:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3212:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3214:	ba 2f       	mov	r27, r26
    3216:	a9 2f       	mov	r26, r25
    3218:	98 2f       	mov	r25, r24
    321a:	88 27       	eor	r24, r24
    321c:	82 0f       	add	r24, r18
    321e:	91 1d       	adc	r25, r1
    3220:	a1 1d       	adc	r26, r1
    3222:	b1 1d       	adc	r27, r1
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	42 e0       	ldi	r20, 0x02	; 2
    322a:	66 0f       	add	r22, r22
    322c:	77 1f       	adc	r23, r23
    322e:	88 1f       	adc	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	4a 95       	dec	r20
    3234:	d1 f7       	brne	.-12     	; 0x322a <micros+0x3c>
}
    3236:	08 95       	ret

00003238 <delay>:

void delay(unsigned long ms)
{
    3238:	8f 92       	push	r8
    323a:	9f 92       	push	r9
    323c:	af 92       	push	r10
    323e:	bf 92       	push	r11
    3240:	cf 92       	push	r12
    3242:	df 92       	push	r13
    3244:	ef 92       	push	r14
    3246:	ff 92       	push	r15
    3248:	6b 01       	movw	r12, r22
    324a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    324c:	d0 df       	rcall	.-96     	; 0x31ee <micros>
    324e:	4b 01       	movw	r8, r22
    3250:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3252:	c1 14       	cp	r12, r1
    3254:	d1 04       	cpc	r13, r1
    3256:	e1 04       	cpc	r14, r1
    3258:	f1 04       	cpc	r15, r1
		yield();
    325a:	f1 f0       	breq	.+60     	; 0x3298 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    325c:	6e d7       	rcall	.+3804   	; 0x413a <yield>
    325e:	c7 df       	rcall	.-114    	; 0x31ee <micros>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	88 19       	sub	r24, r8
    3266:	99 09       	sbc	r25, r9
    3268:	aa 09       	sbc	r26, r10
    326a:	bb 09       	sbc	r27, r11
    326c:	88 3e       	cpi	r24, 0xE8	; 232
    326e:	93 40       	sbci	r25, 0x03	; 3
    3270:	a1 05       	cpc	r26, r1
    3272:	b1 05       	cpc	r27, r1
    3274:	70 f3       	brcs	.-36     	; 0x3252 <delay+0x1a>
			ms--;
    3276:	21 e0       	ldi	r18, 0x01	; 1
    3278:	c2 1a       	sub	r12, r18
    327a:	d1 08       	sbc	r13, r1
    327c:	e1 08       	sbc	r14, r1
    327e:	f1 08       	sbc	r15, r1
			start += 1000;
    3280:	88 ee       	ldi	r24, 0xE8	; 232
    3282:	88 0e       	add	r8, r24
    3284:	83 e0       	ldi	r24, 0x03	; 3
    3286:	98 1e       	adc	r9, r24
    3288:	a1 1c       	adc	r10, r1
    328a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    328c:	c1 14       	cp	r12, r1
    328e:	d1 04       	cpc	r13, r1
    3290:	e1 04       	cpc	r14, r1
    3292:	f1 04       	cpc	r15, r1
    3294:	21 f7       	brne	.-56     	; 0x325e <delay+0x26>
    3296:	dd cf       	rjmp	.-70     	; 0x3252 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	df 90       	pop	r13
    329e:	cf 90       	pop	r12
    32a0:	bf 90       	pop	r11
    32a2:	af 90       	pop	r10
    32a4:	9f 90       	pop	r9
    32a6:	8f 90       	pop	r8
    32a8:	08 95       	ret

000032aa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    32aa:	82 30       	cpi	r24, 0x02	; 2
    32ac:	91 05       	cpc	r25, r1
    32ae:	38 f0       	brcs	.+14     	; 0x32be <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    32b8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <delayMicroseconds+0x10>
    32be:	08 95       	ret

000032c0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    32c0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    32c2:	84 b5       	in	r24, 0x24	; 36
    32c4:	82 60       	ori	r24, 0x02	; 2
    32c6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    32c8:	84 b5       	in	r24, 0x24	; 36
    32ca:	81 60       	ori	r24, 0x01	; 1
    32cc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    32ce:	85 b5       	in	r24, 0x25	; 37
    32d0:	82 60       	ori	r24, 0x02	; 2
    32d2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    32d4:	85 b5       	in	r24, 0x25	; 37
    32d6:	81 60       	ori	r24, 0x01	; 1
    32d8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    32da:	ee e6       	ldi	r30, 0x6E	; 110
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	81 60       	ori	r24, 0x01	; 1
    32e2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    32e4:	e1 e8       	ldi	r30, 0x81	; 129
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    32ea:	80 81       	ld	r24, Z
    32ec:	82 60       	ori	r24, 0x02	; 2
    32ee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    32f0:	80 81       	ld	r24, Z
    32f2:	81 60       	ori	r24, 0x01	; 1
    32f4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    32f6:	e0 e8       	ldi	r30, 0x80	; 128
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	81 60       	ori	r24, 0x01	; 1
    32fe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3300:	e1 eb       	ldi	r30, 0xB1	; 177
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	84 60       	ori	r24, 0x04	; 4
    3308:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    330a:	e0 eb       	ldi	r30, 0xB0	; 176
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	81 60       	ori	r24, 0x01	; 1
    3312:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3314:	e1 e9       	ldi	r30, 0x91	; 145
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	82 60       	ori	r24, 0x02	; 2
    331c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    331e:	80 81       	ld	r24, Z
    3320:	81 60       	ori	r24, 0x01	; 1
    3322:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3324:	e0 e9       	ldi	r30, 0x90	; 144
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	81 60       	ori	r24, 0x01	; 1
    332c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    332e:	e1 ea       	ldi	r30, 0xA1	; 161
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	82 60       	ori	r24, 0x02	; 2
    3336:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3338:	80 81       	ld	r24, Z
    333a:	81 60       	ori	r24, 0x01	; 1
    333c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    333e:	e0 ea       	ldi	r30, 0xA0	; 160
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	81 60       	ori	r24, 0x01	; 1
    3346:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    3348:	e1 e2       	ldi	r30, 0x21	; 33
    334a:	f1 e0       	ldi	r31, 0x01	; 1
    334c:	80 81       	ld	r24, Z
    334e:	82 60       	ori	r24, 0x02	; 2
    3350:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3352:	80 81       	ld	r24, Z
    3354:	81 60       	ori	r24, 0x01	; 1
    3356:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    3358:	e0 e2       	ldi	r30, 0x20	; 32
    335a:	f1 e0       	ldi	r31, 0x01	; 1
    335c:	80 81       	ld	r24, Z
    335e:	81 60       	ori	r24, 0x01	; 1
    3360:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3362:	ea e7       	ldi	r30, 0x7A	; 122
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	84 60       	ori	r24, 0x04	; 4
    336a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    336c:	80 81       	ld	r24, Z
    336e:	82 60       	ori	r24, 0x02	; 2
    3370:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3372:	80 81       	ld	r24, Z
    3374:	81 60       	ori	r24, 0x01	; 1
    3376:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3378:	80 81       	ld	r24, Z
    337a:	80 68       	ori	r24, 0x80	; 128
    337c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    337e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3382:	08 95       	ret

00003384 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	fc 01       	movw	r30, r24
    3388:	31 97       	sbiw	r30, 0x01	; 1
    338a:	e2 31       	cpi	r30, 0x12	; 18
    338c:	f1 05       	cpc	r31, r1
    338e:	08 f0       	brcs	.+2      	; 0x3392 <turnOffPWM+0xe>
    3390:	4e c0       	rjmp	.+156    	; 0x342e <turnOffPWM+0xaa>
    3392:	88 27       	eor	r24, r24
    3394:	ee 58       	subi	r30, 0x8E	; 142
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	8f 4f       	sbci	r24, 0xFF	; 255
    339a:	0c 94 fc 22 	jmp	0x45f8	; 0x45f8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    339e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    33a2:	8f 77       	andi	r24, 0x7F	; 127
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    33a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    33aa:	8f 7d       	andi	r24, 0xDF	; 223
    33ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    33b0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    33b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    33b6:	87 7f       	andi	r24, 0xF7	; 247
    33b8:	f9 cf       	rjmp	.-14     	; 0x33ac <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    33ba:	84 b5       	in	r24, 0x24	; 36
    33bc:	8f 77       	andi	r24, 0x7F	; 127
    33be:	02 c0       	rjmp	.+4      	; 0x33c4 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    33c0:	84 b5       	in	r24, 0x24	; 36
    33c2:	8f 7d       	andi	r24, 0xDF	; 223
    33c4:	84 bd       	out	0x24, r24	; 36
    33c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    33c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    33cc:	8f 77       	andi	r24, 0x7F	; 127
    33ce:	03 c0       	rjmp	.+6      	; 0x33d6 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    33d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    33d4:	8f 7d       	andi	r24, 0xDF	; 223
    33d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    33da:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    33dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33e0:	8f 77       	andi	r24, 0x7F	; 127
    33e2:	07 c0       	rjmp	.+14     	; 0x33f2 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    33e4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33e8:	8f 7d       	andi	r24, 0xDF	; 223
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    33ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33f0:	87 7f       	andi	r24, 0xF7	; 247
    33f2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33f6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    33f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    33fc:	8f 77       	andi	r24, 0x7F	; 127
    33fe:	07 c0       	rjmp	.+14     	; 0x340e <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3400:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3404:	8f 7d       	andi	r24, 0xDF	; 223
    3406:	03 c0       	rjmp	.+6      	; 0x340e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    3408:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    340c:	87 7f       	andi	r24, 0xF7	; 247
    340e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3412:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    3414:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3418:	8f 77       	andi	r24, 0x7F	; 127
    341a:	07 c0       	rjmp	.+14     	; 0x342a <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    341c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3420:	8f 7d       	andi	r24, 0xDF	; 223
    3422:	03 c0       	rjmp	.+6      	; 0x342a <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    3424:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3428:	87 7f       	andi	r24, 0xF7	; 247
    342a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    342e:	08 95       	ret

00003430 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	fc 01       	movw	r30, r24
    3438:	e6 56       	subi	r30, 0x66	; 102
    343a:	fd 4f       	sbci	r31, 0xFD	; 253
    343c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    343e:	fc 01       	movw	r30, r24
    3440:	e0 52       	subi	r30, 0x20	; 32
    3442:	fd 4f       	sbci	r31, 0xFD	; 253
    3444:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3446:	88 23       	and	r24, r24
    3448:	61 f1       	breq	.+88     	; 0x34a2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	88 0f       	add	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	fc 01       	movw	r30, r24
    3452:	e0 5c       	subi	r30, 0xC0	; 192
    3454:	fc 4f       	sbci	r31, 0xFC	; 252
    3456:	c5 91       	lpm	r28, Z+
    3458:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    345a:	fc 01       	movw	r30, r24
    345c:	ea 5d       	subi	r30, 0xDA	; 218
    345e:	fc 4f       	sbci	r31, 0xFC	; 252
    3460:	a5 91       	lpm	r26, Z+
    3462:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3464:	61 11       	cpse	r22, r1
    3466:	09 c0       	rjmp	.+18     	; 0x347a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3468:	9f b7       	in	r25, 0x3f	; 63
                cli();
    346a:	f8 94       	cli
		*reg &= ~bit;
    346c:	88 81       	ld	r24, Y
    346e:	20 95       	com	r18
    3470:	82 23       	and	r24, r18
    3472:	88 83       	st	Y, r24
		*out &= ~bit;
    3474:	ec 91       	ld	r30, X
    3476:	2e 23       	and	r18, r30
    3478:	0b c0       	rjmp	.+22     	; 0x3490 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    347a:	62 30       	cpi	r22, 0x02	; 2
    347c:	61 f4       	brne	.+24     	; 0x3496 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    347e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3480:	f8 94       	cli
		*reg &= ~bit;
    3482:	88 81       	ld	r24, Y
    3484:	32 2f       	mov	r19, r18
    3486:	30 95       	com	r19
    3488:	83 23       	and	r24, r19
    348a:	88 83       	st	Y, r24
		*out |= bit;
    348c:	ec 91       	ld	r30, X
    348e:	2e 2b       	or	r18, r30
    3490:	2c 93       	st	X, r18
		SREG = oldSREG;
    3492:	9f bf       	out	0x3f, r25	; 63
    3494:	06 c0       	rjmp	.+12     	; 0x34a2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3496:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3498:	f8 94       	cli
		*reg |= bit;
    349a:	e8 81       	ld	r30, Y
    349c:	2e 2b       	or	r18, r30
    349e:	28 83       	st	Y, r18
		SREG = oldSREG;
    34a0:	8f bf       	out	0x3f, r24	; 63
	}
}
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

000034a8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    34a8:	1f 93       	push	r17
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	f9 01       	movw	r30, r18
    34b4:	ec 5a       	subi	r30, 0xAC	; 172
    34b6:	fd 4f       	sbci	r31, 0xFD	; 253
    34b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    34ba:	f9 01       	movw	r30, r18
    34bc:	e6 56       	subi	r30, 0x66	; 102
    34be:	fd 4f       	sbci	r31, 0xFD	; 253
    34c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    34c2:	f9 01       	movw	r30, r18
    34c4:	e0 52       	subi	r30, 0x20	; 32
    34c6:	fd 4f       	sbci	r31, 0xFD	; 253
    34c8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34ca:	cc 23       	and	r28, r28
    34cc:	b9 f0       	breq	.+46     	; 0x34fc <digitalWrite+0x54>
    34ce:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34d0:	81 11       	cpse	r24, r1
    34d2:	58 df       	rcall	.-336    	; 0x3384 <turnOffPWM>

	out = portOutputRegister(port);
    34d4:	ec 2f       	mov	r30, r28
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	ea 5d       	subi	r30, 0xDA	; 218
    34de:	fc 4f       	sbci	r31, 0xFC	; 252
    34e0:	a5 91       	lpm	r26, Z+
    34e2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    34e4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    34e6:	f8 94       	cli

	if (val == LOW) {
    34e8:	11 11       	cpse	r17, r1
    34ea:	04 c0       	rjmp	.+8      	; 0x34f4 <digitalWrite+0x4c>
		*out &= ~bit;
    34ec:	8c 91       	ld	r24, X
    34ee:	d0 95       	com	r29
    34f0:	d8 23       	and	r29, r24
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <digitalWrite+0x50>
	} else {
		*out |= bit;
    34f4:	ec 91       	ld	r30, X
    34f6:	de 2b       	or	r29, r30
    34f8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    34fa:	9f bf       	out	0x3f, r25	; 63
}
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	1f 91       	pop	r17
    3502:	08 95       	ret

00003504 <_ZN13LiquidCrystal11pulseEnableEv>:
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ec 01       	movw	r28, r24
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	8e 81       	ldd	r24, Y+6	; 0x06
    350e:	cc df       	rcall	.-104    	; 0x34a8 <digitalWrite>
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	ca de       	rcall	.-620    	; 0x32aa <delayMicroseconds>
    3516:	61 e0       	ldi	r22, 0x01	; 1
    3518:	8e 81       	ldd	r24, Y+6	; 0x06
    351a:	c6 df       	rcall	.-116    	; 0x34a8 <digitalWrite>
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	c4 de       	rcall	.-632    	; 0x32aa <delayMicroseconds>
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	8e 81       	ldd	r24, Y+6	; 0x06
    3526:	c0 df       	rcall	.-128    	; 0x34a8 <digitalWrite>
    3528:	84 e6       	ldi	r24, 0x64	; 100
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	bc ce       	rjmp	.-648    	; 0x32aa <delayMicroseconds>

00003532 <_ZN13LiquidCrystal10write4bitsEh>:
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	6c 01       	movw	r12, r24
    3544:	7c 01       	movw	r14, r24
    3546:	87 e0       	ldi	r24, 0x07	; 7
    3548:	e8 0e       	add	r14, r24
    354a:	f1 1c       	adc	r15, r1
    354c:	c0 e0       	ldi	r28, 0x00	; 0
    354e:	d0 e0       	ldi	r29, 0x00	; 0
    3550:	06 2f       	mov	r16, r22
    3552:	10 e0       	ldi	r17, 0x00	; 0
    3554:	b8 01       	movw	r22, r16
    3556:	0c 2e       	mov	r0, r28
    3558:	02 c0       	rjmp	.+4      	; 0x355e <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    355a:	75 95       	asr	r23
    355c:	67 95       	ror	r22
    355e:	0a 94       	dec	r0
    3560:	e2 f7       	brpl	.-8      	; 0x355a <_ZN13LiquidCrystal10write4bitsEh+0x28>
    3562:	61 70       	andi	r22, 0x01	; 1
    3564:	f7 01       	movw	r30, r14
    3566:	81 91       	ld	r24, Z+
    3568:	7f 01       	movw	r14, r30
    356a:	9e df       	rcall	.-196    	; 0x34a8 <digitalWrite>
    356c:	21 96       	adiw	r28, 0x01	; 1
    356e:	c4 30       	cpi	r28, 0x04	; 4
    3570:	d1 05       	cpc	r29, r1
    3572:	81 f7       	brne	.-32     	; 0x3554 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    3574:	c6 01       	movw	r24, r12
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	1f 91       	pop	r17
    357c:	0f 91       	pop	r16
    357e:	ff 90       	pop	r15
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	be cf       	rjmp	.-132    	; 0x3504 <_ZN13LiquidCrystal11pulseEnableEv>

00003588 <_ZN13LiquidCrystal10write8bitsEh>:
    3588:	cf 92       	push	r12
    358a:	df 92       	push	r13
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	6c 01       	movw	r12, r24
    359a:	7c 01       	movw	r14, r24
    359c:	87 e0       	ldi	r24, 0x07	; 7
    359e:	e8 0e       	add	r14, r24
    35a0:	f1 1c       	adc	r15, r1
    35a2:	c0 e0       	ldi	r28, 0x00	; 0
    35a4:	d0 e0       	ldi	r29, 0x00	; 0
    35a6:	06 2f       	mov	r16, r22
    35a8:	10 e0       	ldi	r17, 0x00	; 0
    35aa:	b8 01       	movw	r22, r16
    35ac:	0c 2e       	mov	r0, r28
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    35b0:	75 95       	asr	r23
    35b2:	67 95       	ror	r22
    35b4:	0a 94       	dec	r0
    35b6:	e2 f7       	brpl	.-8      	; 0x35b0 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    35b8:	61 70       	andi	r22, 0x01	; 1
    35ba:	f7 01       	movw	r30, r14
    35bc:	81 91       	ld	r24, Z+
    35be:	7f 01       	movw	r14, r30
    35c0:	73 df       	rcall	.-282    	; 0x34a8 <digitalWrite>
    35c2:	21 96       	adiw	r28, 0x01	; 1
    35c4:	c8 30       	cpi	r28, 0x08	; 8
    35c6:	d1 05       	cpc	r29, r1
    35c8:	81 f7       	brne	.-32     	; 0x35aa <_ZN13LiquidCrystal10write8bitsEh+0x22>
    35ca:	c6 01       	movw	r24, r12
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	cf 90       	pop	r12
    35dc:	93 cf       	rjmp	.-218    	; 0x3504 <_ZN13LiquidCrystal11pulseEnableEv>

000035de <_ZN13LiquidCrystal4sendEhh>:
    35de:	1f 93       	push	r17
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	ec 01       	movw	r28, r24
    35e6:	16 2f       	mov	r17, r22
    35e8:	64 2f       	mov	r22, r20
    35ea:	8c 81       	ldd	r24, Y+4	; 0x04
    35ec:	5d df       	rcall	.-326    	; 0x34a8 <digitalWrite>
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	8f 3f       	cpi	r24, 0xFF	; 255
    35f2:	11 f0       	breq	.+4      	; 0x35f8 <_ZN13LiquidCrystal4sendEhh+0x1a>
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	58 df       	rcall	.-336    	; 0x34a8 <digitalWrite>
    35f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35fa:	61 2f       	mov	r22, r17
    35fc:	84 ff       	sbrs	r24, 4
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <_ZN13LiquidCrystal4sendEhh+0x2c>
    3600:	ce 01       	movw	r24, r28
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	bf cf       	rjmp	.-130    	; 0x3588 <_ZN13LiquidCrystal10write8bitsEh>
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	84 e0       	ldi	r24, 0x04	; 4
    360e:	75 95       	asr	r23
    3610:	67 95       	ror	r22
    3612:	8a 95       	dec	r24
    3614:	e1 f7       	brne	.-8      	; 0x360e <_ZN13LiquidCrystal4sendEhh+0x30>
    3616:	ce 01       	movw	r24, r28
    3618:	8c df       	rcall	.-232    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>
    361a:	61 2f       	mov	r22, r17
    361c:	ce 01       	movw	r24, r28
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	86 cf       	rjmp	.-244    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>

00003626 <_ZN13LiquidCrystal7commandEh>:
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	da cf       	rjmp	.-76     	; 0x35de <_ZN13LiquidCrystal4sendEhh>

0000362a <_ZN13LiquidCrystal5clearEv>:
    362a:	61 e0       	ldi	r22, 0x01	; 1
    362c:	fc df       	rcall	.-8      	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    362e:	80 ed       	ldi	r24, 0xD0	; 208
    3630:	97 e0       	ldi	r25, 0x07	; 7
    3632:	3b ce       	rjmp	.-906    	; 0x32aa <delayMicroseconds>

00003634 <_ZN13LiquidCrystal9setCursorEhh>:
    3634:	fc 01       	movw	r30, r24
    3636:	44 30       	cpi	r20, 0x04	; 4
    3638:	08 f0       	brcs	.+2      	; 0x363c <_ZN13LiquidCrystal9setCursorEhh+0x8>
    363a:	43 e0       	ldi	r20, 0x03	; 3
    363c:	83 89       	ldd	r24, Z+19	; 0x13
    363e:	48 17       	cp	r20, r24
    3640:	10 f0       	brcs	.+4      	; 0x3646 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    3642:	4f ef       	ldi	r20, 0xFF	; 255
    3644:	48 0f       	add	r20, r24
    3646:	df 01       	movw	r26, r30
    3648:	a4 0f       	add	r26, r20
    364a:	b1 1d       	adc	r27, r1
    364c:	54 96       	adiw	r26, 0x14	; 20
    364e:	9c 91       	ld	r25, X
    3650:	69 0f       	add	r22, r25
    3652:	60 68       	ori	r22, 0x80	; 128
    3654:	cf 01       	movw	r24, r30
    3656:	e7 cf       	rjmp	.-50     	; 0x3626 <_ZN13LiquidCrystal7commandEh>

00003658 <_ZN13LiquidCrystal7displayEv>:
    3658:	fc 01       	movw	r30, r24
    365a:	60 89       	ldd	r22, Z+16	; 0x10
    365c:	26 2f       	mov	r18, r22
    365e:	24 60       	ori	r18, 0x04	; 4
    3660:	20 8b       	std	Z+16, r18	; 0x10
    3662:	6c 60       	ori	r22, 0x0C	; 12
    3664:	e0 cf       	rjmp	.-64     	; 0x3626 <_ZN13LiquidCrystal7commandEh>

00003666 <_ZN13LiquidCrystal5beginEhhh>:
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	ec 01       	movw	r28, r24
    3674:	42 30       	cpi	r20, 0x02	; 2
    3676:	18 f0       	brcs	.+6      	; 0x367e <_ZN13LiquidCrystal5beginEhhh+0x18>
    3678:	8f 85       	ldd	r24, Y+15	; 0x0f
    367a:	88 60       	ori	r24, 0x08	; 8
    367c:	8f 87       	std	Y+15, r24	; 0x0f
    367e:	4b 8b       	std	Y+19, r20	; 0x13
    3680:	1c 8a       	std	Y+20, r1	; 0x14
    3682:	80 e4       	ldi	r24, 0x40	; 64
    3684:	8d 8b       	std	Y+21, r24	; 0x15
    3686:	6e 8b       	std	Y+22, r22	; 0x16
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	60 5c       	subi	r22, 0xC0	; 192
    368c:	7f 4f       	sbci	r23, 0xFF	; 255
    368e:	6f 8b       	std	Y+23, r22	; 0x17
    3690:	22 23       	and	r18, r18
    3692:	29 f0       	breq	.+10     	; 0x369e <_ZN13LiquidCrystal5beginEhhh+0x38>
    3694:	41 30       	cpi	r20, 0x01	; 1
    3696:	19 f4       	brne	.+6      	; 0x369e <_ZN13LiquidCrystal5beginEhhh+0x38>
    3698:	8f 85       	ldd	r24, Y+15	; 0x0f
    369a:	84 60       	ori	r24, 0x04	; 4
    369c:	8f 87       	std	Y+15, r24	; 0x0f
    369e:	61 e0       	ldi	r22, 0x01	; 1
    36a0:	8c 81       	ldd	r24, Y+4	; 0x04
    36a2:	c6 de       	rcall	.-628    	; 0x3430 <pinMode>
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	8f 3f       	cpi	r24, 0xFF	; 255
    36a8:	11 f0       	breq	.+4      	; 0x36ae <_ZN13LiquidCrystal5beginEhhh+0x48>
    36aa:	61 e0       	ldi	r22, 0x01	; 1
    36ac:	c1 de       	rcall	.-638    	; 0x3430 <pinMode>
    36ae:	61 e0       	ldi	r22, 0x01	; 1
    36b0:	8e 81       	ldd	r24, Y+6	; 0x06
    36b2:	be de       	rcall	.-644    	; 0x3430 <pinMode>
    36b4:	7e 01       	movw	r14, r28
    36b6:	87 e0       	ldi	r24, 0x07	; 7
    36b8:	e8 0e       	add	r14, r24
    36ba:	f1 1c       	adc	r15, r1
    36bc:	00 e0       	ldi	r16, 0x00	; 0
    36be:	10 e0       	ldi	r17, 0x00	; 0
    36c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c2:	84 fd       	sbrc	r24, 4
    36c4:	03 c0       	rjmp	.+6      	; 0x36cc <_ZN13LiquidCrystal5beginEhhh+0x66>
    36c6:	84 e0       	ldi	r24, 0x04	; 4
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    36cc:	88 e0       	ldi	r24, 0x08	; 8
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	08 17       	cp	r16, r24
    36d2:	19 07       	cpc	r17, r25
    36d4:	44 f4       	brge	.+16     	; 0x36e6 <_ZN13LiquidCrystal5beginEhhh+0x80>
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	f7 01       	movw	r30, r14
    36da:	81 91       	ld	r24, Z+
    36dc:	7f 01       	movw	r14, r30
    36de:	a8 de       	rcall	.-688    	; 0x3430 <pinMode>
    36e0:	0f 5f       	subi	r16, 0xFF	; 255
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	ed cf       	rjmp	.-38     	; 0x36c0 <_ZN13LiquidCrystal5beginEhhh+0x5a>
    36e6:	80 e5       	ldi	r24, 0x50	; 80
    36e8:	93 ec       	ldi	r25, 0xC3	; 195
    36ea:	df dd       	rcall	.-1090   	; 0x32aa <delayMicroseconds>
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	db de       	rcall	.-586    	; 0x34a8 <digitalWrite>
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	8e 81       	ldd	r24, Y+6	; 0x06
    36f6:	d8 de       	rcall	.-592    	; 0x34a8 <digitalWrite>
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	8f 3f       	cpi	r24, 0xFF	; 255
    36fc:	11 f0       	breq	.+4      	; 0x3702 <_ZN13LiquidCrystal5beginEhhh+0x9c>
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	d3 de       	rcall	.-602    	; 0x34a8 <digitalWrite>
    3702:	6f 85       	ldd	r22, Y+15	; 0x0f
    3704:	64 fd       	sbrc	r22, 4
    3706:	16 c0       	rjmp	.+44     	; 0x3734 <_ZN13LiquidCrystal5beginEhhh+0xce>
    3708:	63 e0       	ldi	r22, 0x03	; 3
    370a:	ce 01       	movw	r24, r28
    370c:	12 df       	rcall	.-476    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>
    370e:	84 e9       	ldi	r24, 0x94	; 148
    3710:	91 e1       	ldi	r25, 0x11	; 17
    3712:	cb dd       	rcall	.-1130   	; 0x32aa <delayMicroseconds>
    3714:	63 e0       	ldi	r22, 0x03	; 3
    3716:	ce 01       	movw	r24, r28
    3718:	0c df       	rcall	.-488    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>
    371a:	84 e9       	ldi	r24, 0x94	; 148
    371c:	91 e1       	ldi	r25, 0x11	; 17
    371e:	c5 dd       	rcall	.-1142   	; 0x32aa <delayMicroseconds>
    3720:	63 e0       	ldi	r22, 0x03	; 3
    3722:	ce 01       	movw	r24, r28
    3724:	06 df       	rcall	.-500    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>
    3726:	86 e9       	ldi	r24, 0x96	; 150
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	bf dd       	rcall	.-1154   	; 0x32aa <delayMicroseconds>
    372c:	62 e0       	ldi	r22, 0x02	; 2
    372e:	ce 01       	movw	r24, r28
    3730:	00 df       	rcall	.-512    	; 0x3532 <_ZN13LiquidCrystal10write4bitsEh>
    3732:	11 c0       	rjmp	.+34     	; 0x3756 <_ZN13LiquidCrystal5beginEhhh+0xf0>
    3734:	60 62       	ori	r22, 0x20	; 32
    3736:	ce 01       	movw	r24, r28
    3738:	76 df       	rcall	.-276    	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    373a:	84 e9       	ldi	r24, 0x94	; 148
    373c:	91 e1       	ldi	r25, 0x11	; 17
    373e:	b5 dd       	rcall	.-1174   	; 0x32aa <delayMicroseconds>
    3740:	6f 85       	ldd	r22, Y+15	; 0x0f
    3742:	60 62       	ori	r22, 0x20	; 32
    3744:	ce 01       	movw	r24, r28
    3746:	6f df       	rcall	.-290    	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    3748:	86 e9       	ldi	r24, 0x96	; 150
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	ae dd       	rcall	.-1188   	; 0x32aa <delayMicroseconds>
    374e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3750:	60 62       	ori	r22, 0x20	; 32
    3752:	ce 01       	movw	r24, r28
    3754:	68 df       	rcall	.-304    	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    3756:	6f 85       	ldd	r22, Y+15	; 0x0f
    3758:	60 62       	ori	r22, 0x20	; 32
    375a:	ce 01       	movw	r24, r28
    375c:	64 df       	rcall	.-312    	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    375e:	84 e0       	ldi	r24, 0x04	; 4
    3760:	88 8b       	std	Y+16, r24	; 0x10
    3762:	ce 01       	movw	r24, r28
    3764:	79 df       	rcall	.-270    	; 0x3658 <_ZN13LiquidCrystal7displayEv>
    3766:	ce 01       	movw	r24, r28
    3768:	60 df       	rcall	.-320    	; 0x362a <_ZN13LiquidCrystal5clearEv>
    376a:	82 e0       	ldi	r24, 0x02	; 2
    376c:	89 8b       	std	Y+17, r24	; 0x11
    376e:	66 e0       	ldi	r22, 0x06	; 6
    3770:	ce 01       	movw	r24, r28
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    377a:	ff 90       	pop	r15
    377c:	ef 90       	pop	r14
    377e:	53 cf       	rjmp	.-346    	; 0x3626 <_ZN13LiquidCrystal7commandEh>

00003780 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    3780:	8f 92       	push	r8
    3782:	af 92       	push	r10
    3784:	cf 92       	push	r12
    3786:	ef 92       	push	r14
    3788:	0f 93       	push	r16
    378a:	cf 93       	push	r28
    378c:	df 93       	push	r29
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	fc 01       	movw	r30, r24
    3794:	3b 85       	ldd	r19, Y+11	; 0x0b
    3796:	9c 85       	ldd	r25, Y+12	; 0x0c
    3798:	8d 85       	ldd	r24, Y+13	; 0x0d
    379a:	13 82       	std	Z+3, r1	; 0x03
    379c:	12 82       	std	Z+2, r1	; 0x02
    379e:	a7 e5       	ldi	r26, 0x57	; 87
    37a0:	b2 e0       	ldi	r27, 0x02	; 2
    37a2:	b1 83       	std	Z+1, r27	; 0x01
    37a4:	a0 83       	st	Z, r26
    37a6:	64 83       	std	Z+4, r22	; 0x04
    37a8:	45 83       	std	Z+5, r20	; 0x05
    37aa:	26 83       	std	Z+6, r18	; 0x06
    37ac:	07 83       	std	Z+7, r16	; 0x07
    37ae:	e0 86       	std	Z+8, r14	; 0x08
    37b0:	c1 86       	std	Z+9, r12	; 0x09
    37b2:	a2 86       	std	Z+10, r10	; 0x0a
    37b4:	83 86       	std	Z+11, r8	; 0x0b
    37b6:	34 87       	std	Z+12, r19	; 0x0c
    37b8:	95 87       	std	Z+13, r25	; 0x0d
    37ba:	86 87       	std	Z+14, r24	; 0x0e
    37bc:	80 e1       	ldi	r24, 0x10	; 16
    37be:	87 87       	std	Z+15, r24	; 0x0f
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	60 e1       	ldi	r22, 0x10	; 16
    37c6:	cf 01       	movw	r24, r30
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	0f 91       	pop	r16
    37ce:	ef 90       	pop	r14
    37d0:	cf 90       	pop	r12
    37d2:	af 90       	pop	r10
    37d4:	8f 90       	pop	r8
    37d6:	47 cf       	rjmp	.-370    	; 0x3666 <_ZN13LiquidCrystal5beginEhhh>

000037d8 <_ZN13LiquidCrystal10createCharEhPh>:
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	cf 93       	push	r28
    37e2:	df 93       	push	r29
    37e4:	8c 01       	movw	r16, r24
    37e6:	7a 01       	movw	r14, r20
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
    37e8:	67 70       	andi	r22, 0x07	; 7
    37ea:	88 e0       	ldi	r24, 0x08	; 8
    37ec:	68 9f       	mul	r22, r24
    37ee:	b0 01       	movw	r22, r0
    37f0:	11 24       	eor	r1, r1
    37f2:	60 64       	ori	r22, 0x40	; 64
    37f4:	c8 01       	movw	r24, r16
    37f6:	17 df       	rcall	.-466    	; 0x3626 <_ZN13LiquidCrystal7commandEh>
    37f8:	e7 01       	movw	r28, r14
    37fa:	a8 e0       	ldi	r26, 0x08	; 8
    37fc:	ea 0e       	add	r14, r26
    37fe:	f1 1c       	adc	r15, r1
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    3800:	69 91       	ld	r22, Y+
    3802:	d8 01       	movw	r26, r16
    3804:	ed 91       	ld	r30, X+
    3806:	fc 91       	ld	r31, X
    3808:	01 90       	ld	r0, Z+
    380a:	f0 81       	ld	r31, Z
    380c:	e0 2d       	mov	r30, r0
    380e:	c8 01       	movw	r24, r16
    3810:	19 95       	eicall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    3812:	ce 15       	cp	r28, r14
    3814:	df 05       	cpc	r29, r15
    3816:	a1 f7       	brne	.-24     	; 0x3800 <_ZN13LiquidCrystal10createCharEhPh+0x28>
    write(charmap[i]);
  }
}
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	ff 90       	pop	r15
    3822:	ef 90       	pop	r14
    3824:	08 95       	ret

00003826 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	da de       	rcall	.-588    	; 0x35de <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	08 95       	ret

00003830 <_Z8print_mej>:
	} else {
		DEBUG(F("Setting variable ")); DEBUG(number);
		DEBUGLN(F(" as glyph failed, the variable must be of 'byte' data type"));
		return false;
	}
}
    3830:	08 95       	ret

00003832 <_ZN10LiquidLine15attach_functionEhPFvvE>:
    3832:	69 30       	cpi	r22, 0x09	; 9
    3834:	60 f4       	brcc	.+24     	; 0x384e <_ZN10LiquidLine15attach_functionEhPFvvE+0x1c>
    3836:	fc 01       	movw	r30, r24
    3838:	e6 0f       	add	r30, r22
    383a:	f1 1d       	adc	r31, r1
    383c:	e6 0f       	add	r30, r22
    383e:	f1 1d       	adc	r31, r1
    3840:	56 83       	std	Z+6, r21	; 0x06
    3842:	45 83       	std	Z+5, r20	; 0x05
    3844:	21 e0       	ldi	r18, 0x01	; 1
    3846:	fc 01       	movw	r30, r24
    3848:	26 a3       	std	Z+38, r18	; 0x26
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	08 95       	ret
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	08 95       	ret

00003852 <_ZN10LiquidLine17set_focusPositionE8Positionhh>:
    3852:	fc 01       	movw	r30, r24
    3854:	64 30       	cpi	r22, 0x04	; 4
    3856:	28 f4       	brcc	.+10     	; 0x3862 <_ZN10LiquidLine17set_focusPositionE8Positionhh+0x10>
    3858:	64 83       	std	Z+4, r22	; 0x04
    385a:	43 83       	std	Z+3, r20	; 0x03
    385c:	22 83       	std	Z+2, r18	; 0x02
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	08 95       	ret
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	08 95       	ret

00003866 <_ZN10LiquidLine13set_asProgmemEh>:

bool LiquidLine::set_asProgmem(uint8_t number) {
	uint8_t index = number - 1;
    3866:	61 50       	subi	r22, 0x01	; 1
	if ((index < MAX_VARIABLES) && (_variableType[index] == DataType::CONST_CHAR_PTR)) {
    3868:	65 30       	cpi	r22, 0x05	; 5
    386a:	50 f4       	brcc	.+20     	; 0x3880 <_ZN10LiquidLine13set_asProgmemEh+0x1a>
    386c:	fc 01       	movw	r30, r24
    386e:	e6 0f       	add	r30, r22
    3870:	f1 1d       	adc	r31, r1
    3872:	81 a1       	ldd	r24, Z+33	; 0x21
    3874:	8e 33       	cpi	r24, 0x3E	; 62
    3876:	21 f4       	brne	.+8      	; 0x3880 <_ZN10LiquidLine13set_asProgmemEh+0x1a>
		_variableType[index] = DataType::PROG_CONST_CHAR_PTR;
    3878:	81 e4       	ldi	r24, 0x41	; 65
    387a:	81 a3       	std	Z+33, r24	; 0x21
		return true;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	08 95       	ret
	}
	else {
		DEBUG(F("Setting variable ")); DEBUG(number);
		DEBUGLN(F(" as PROG_CONST_CHAR failed, the variable must be of 'const char[]' data type"))
		return false;
    3880:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3882:	08 95       	ret

00003884 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh>:
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
    3884:	af 92       	push	r10
    3886:	bf 92       	push	r11
    3888:	cf 92       	push	r12
    388a:	df 92       	push	r13
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	1f 92       	push	r1
    389a:	1f 92       	push	r1
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	fc 01       	movw	r30, r24
    38a2:	8b 01       	movw	r16, r22

	default: { break; }

	} //switch (_variableType)
	DEBUG(F(" "));
}
    38a4:	ed b6       	in	r14, 0x3d	; 61
    38a6:	fe b6       	in	r15, 0x3e	; 62
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	dc 01       	movw	r26, r24
    38ac:	a4 0f       	add	r26, r20
    38ae:	b5 1f       	adc	r27, r21
    38b0:	91 96       	adiw	r26, 0x21	; 33
    38b2:	8c 91       	ld	r24, X
    38b4:	81 34       	cpi	r24, 0x41	; 65
    38b6:	09 f4       	brne	.+2      	; 0x38ba <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x36>
    38b8:	d9 c0       	rjmp	.+434    	; 0x3a6c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1e8>
    38ba:	08 f0       	brcs	.+2      	; 0x38be <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a>
    38bc:	50 c0       	rjmp	.+160    	; 0x395e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xda>
    38be:	80 32       	cpi	r24, 0x20	; 32
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x40>
    38c2:	a2 c0       	rjmp	.+324    	; 0x3a08 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x184>
    38c4:	40 f5       	brcc	.+80     	; 0x3916 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x92>
    38c6:	89 30       	cpi	r24, 0x09	; 9
    38c8:	09 f4       	brne	.+2      	; 0x38cc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x48>
    38ca:	89 c0       	rjmp	.+274    	; 0x39de <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x15a>
    38cc:	90 f4       	brcc	.+36     	; 0x38f2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x6e>
    38ce:	81 30       	cpi	r24, 0x01	; 1
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x50>
    38d2:	b2 c0       	rjmp	.+356    	; 0x3a38 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1b4>
    38d4:	88 30       	cpi	r24, 0x08	; 8
    38d6:	09 f0       	breq	.+2      	; 0x38da <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x56>
    38d8:	a7 c1       	rjmp	.+846    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		p_liquidCrystal->print(variable);
		break;
	} //case CHAR

	case DataType::INT8_T: {
		const int8_t variable = *static_cast<const int8_t*>(_variable[number]);
    38da:	44 0f       	add	r20, r20
    38dc:	55 1f       	adc	r21, r21
    38de:	e4 0f       	add	r30, r20
    38e0:	f5 1f       	adc	r31, r21
    38e2:	07 88       	ldd	r0, Z+23	; 0x17
    38e4:	f0 8d       	ldd	r31, Z+24	; 0x18
    38e6:	e0 2d       	mov	r30, r0
		DEBUG(F("(int8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    38e8:	60 81       	ld	r22, Z
    38ea:	06 2e       	mov	r0, r22
    38ec:	00 0c       	add	r0, r0
    38ee:	77 0b       	sbc	r23, r23
    38f0:	97 c1       	rjmp	.+814    	; 0x3c20 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    38f2:	80 31       	cpi	r24, 0x10	; 16
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x74>
    38f6:	7e c0       	rjmp	.+252    	; 0x39f4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x170>
    38f8:	81 31       	cpi	r24, 0x11	; 17
    38fa:	09 f0       	breq	.+2      	; 0x38fe <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x7a>
    38fc:	95 c1       	rjmp	.+810    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		DEBUG(F("(int16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case INT16_T
	case DataType::UINT16_T: {
		const uint16_t variable = *static_cast<const uint16_t*>(_variable[number]);
    38fe:	44 0f       	add	r20, r20
    3900:	55 1f       	adc	r21, r21
    3902:	e4 0f       	add	r30, r20
    3904:	f5 1f       	adc	r31, r21
    3906:	07 88       	ldd	r0, Z+23	; 0x17
    3908:	f0 8d       	ldd	r31, Z+24	; 0x18
    390a:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	4a e0       	ldi	r20, 0x0A	; 10
    3912:	50 e0       	ldi	r21, 0x00	; 0
    3914:	3e c1       	rjmp	.+636    	; 0x3b92 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x30e>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    3916:	8c 33       	cpi	r24, 0x3C	; 60
    3918:	09 f4       	brne	.+2      	; 0x391c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x98>
    391a:	58 c0       	rjmp	.+176    	; 0x39cc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x148>
    391c:	a0 f4       	brcc	.+40     	; 0x3946 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xc2>
    391e:	81 32       	cpi	r24, 0x21	; 33
    3920:	09 f4       	brne	.+2      	; 0x3924 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xa0>
    3922:	7e c0       	rjmp	.+252    	; 0x3a20 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x19c>
    3924:	82 33       	cpi	r24, 0x32	; 50
    3926:	09 f0       	breq	.+2      	; 0x392a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xa6>
    3928:	7f c1       	rjmp	.+766    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
	} //case UINT32_T

	case DataType::FLOAT: {
		const float variable = *static_cast<const float*>(_variable[number]);
		DEBUG(F("(float)")); DEBUG(variable);
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
    392a:	25 81       	ldd	r18, Z+5	; 0x05
    392c:	30 e0       	ldi	r19, 0x00	; 0
		p_liquidCrystal->print(variable);
		break;
	} //case UINT32_T

	case DataType::FLOAT: {
		const float variable = *static_cast<const float*>(_variable[number]);
    392e:	44 0f       	add	r20, r20
    3930:	55 1f       	adc	r21, r21
    3932:	e4 0f       	add	r30, r20
    3934:	f5 1f       	adc	r31, r21
    3936:	07 88       	ldd	r0, Z+23	; 0x17
    3938:	f0 8d       	ldd	r31, Z+24	; 0x18
    393a:	e0 2d       	mov	r30, r0
		DEBUG(F("(float)")); DEBUG(variable);
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
    393c:	40 81       	ld	r20, Z
    393e:	51 81       	ldd	r21, Z+1	; 0x01
    3940:	62 81       	ldd	r22, Z+2	; 0x02
    3942:	73 81       	ldd	r23, Z+3	; 0x03
    3944:	5d c1       	rjmp	.+698    	; 0x3c00 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x37c>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    3946:	8d 33       	cpi	r24, 0x3D	; 61
    3948:	a9 f1       	breq	.+106    	; 0x39b4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x130>
    394a:	8e 33       	cpi	r24, 0x3E	; 62
    394c:	09 f0       	breq	.+2      	; 0x3950 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xcc>
    394e:	6c c1       	rjmp	.+728    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>

    // Variables -----
	case DataType::CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
    3950:	44 0f       	add	r20, r20
    3952:	55 1f       	adc	r21, r21
    3954:	e4 0f       	add	r30, r20
    3956:	f5 1f       	adc	r31, r21
		DEBUG(F("(const char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3958:	67 89       	ldd	r22, Z+23	; 0x17
    395a:	70 8d       	ldd	r23, Z+24	; 0x18
    395c:	34 c0       	rjmp	.+104    	; 0x39c6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x142>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    395e:	89 3d       	cpi	r24, 0xD9	; 217
    3960:	09 f4       	brne	.+2      	; 0x3964 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xe0>
    3962:	09 c1       	rjmp	.+530    	; 0x3b76 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2f2>
    3964:	90 f4       	brcc	.+36     	; 0x398a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x106>
    3966:	80 3d       	cpi	r24, 0xD0	; 208
    3968:	09 f4       	brne	.+2      	; 0x396c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xe8>
    396a:	d6 c0       	rjmp	.+428    	; 0x3b18 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x294>
    396c:	38 f4       	brcc	.+14     	; 0x397c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf8>
    396e:	86 34       	cpi	r24, 0x46	; 70
    3970:	09 f4       	brne	.+2      	; 0x3974 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf0>
    3972:	6b c0       	rjmp	.+214    	; 0x3a4a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1c6>
    3974:	89 3c       	cpi	r24, 0xC9	; 201
    3976:	09 f4       	brne	.+2      	; 0x397a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf6>
    3978:	46 c1       	rjmp	.+652    	; 0x3c06 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x382>
    397a:	56 c1       	rjmp	.+684    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    397c:	81 3d       	cpi	r24, 0xD1	; 209
    397e:	09 f4       	brne	.+2      	; 0x3982 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xfe>
    3980:	da c0       	rjmp	.+436    	; 0x3b36 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2b2>
    3982:	88 3d       	cpi	r24, 0xD8	; 216
    3984:	09 f4       	brne	.+2      	; 0x3988 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x104>
    3986:	e8 c0       	rjmp	.+464    	; 0x3b58 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2d4>
    3988:	4f c1       	rjmp	.+670    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    398a:	80 3f       	cpi	r24, 0xF0	; 240
    398c:	09 f4       	brne	.+2      	; 0x3990 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x10c>
    398e:	29 c1       	rjmp	.+594    	; 0x3be2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x35e>
    3990:	38 f4       	brcc	.+14     	; 0x39a0 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x11c>
    3992:	88 3e       	cpi	r24, 0xE8	; 232
    3994:	09 f4       	brne	.+2      	; 0x3998 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x114>
    3996:	00 c1       	rjmp	.+512    	; 0x3b98 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x314>
    3998:	89 3e       	cpi	r24, 0xE9	; 233
    399a:	09 f4       	brne	.+2      	; 0x399e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x11a>
    399c:	10 c1       	rjmp	.+544    	; 0x3bbe <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x33a>
    399e:	44 c1       	rjmp	.+648    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    39a0:	8b 3f       	cpi	r24, 0xFB	; 251
    39a2:	09 f4       	brne	.+2      	; 0x39a6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x122>
    39a4:	9d c0       	rjmp	.+314    	; 0x3ae0 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x25c>
    39a6:	8c 3f       	cpi	r24, 0xFC	; 252
    39a8:	09 f4       	brne	.+2      	; 0x39ac <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x128>
    39aa:	9a c0       	rjmp	.+308    	; 0x3ae0 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x25c>
    39ac:	8a 3f       	cpi	r24, 0xFA	; 250
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x12e>
    39b0:	3b c1       	rjmp	.+630    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    39b2:	a3 c0       	rjmp	.+326    	; 0x3afa <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x276>
		DEBUG(F("(const char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case CONST_CHAR_PTR
	case DataType::CHAR_PTR: {
		char* variable = *reinterpret_cast<char**>( const_cast<void*>(_variable[number]) );
    39b4:	44 0f       	add	r20, r20
    39b6:	55 1f       	adc	r21, r21
    39b8:	e4 0f       	add	r30, r20
    39ba:	f5 1f       	adc	r31, r21
    39bc:	07 88       	ldd	r0, Z+23	; 0x17
    39be:	f0 8d       	ldd	r31, Z+24	; 0x18
    39c0:	e0 2d       	mov	r30, r0
		// char* variable = const_cast<char*>(reinterpret_cast<const char *>(_variable[number]));
		DEBUG(F("(char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	c8 01       	movw	r24, r16
    39c8:	f8 d3       	rcall	.+2032   	; 0x41ba <_ZN5Print5printEPKc>
		break;
    39ca:	2e c1       	rjmp	.+604    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
	} //case CHAR_PTR
	case DataType::CHAR: {
		const char variable = *static_cast<const char*>(_variable[number]);
    39cc:	44 0f       	add	r20, r20
    39ce:	55 1f       	adc	r21, r21
    39d0:	e4 0f       	add	r30, r20
    39d2:	f5 1f       	adc	r31, r21
    39d4:	07 88       	ldd	r0, Z+23	; 0x17
    39d6:	f0 8d       	ldd	r31, Z+24	; 0x18
    39d8:	e0 2d       	mov	r30, r0
		DEBUG(F("(char)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    39da:	60 81       	ld	r22, Z
    39dc:	9a c0       	rjmp	.+308    	; 0x3b12 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x28e>
		DEBUG(F("(int8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case INT8_T
	case DataType::UINT8_T: {
		const uint8_t variable = *static_cast<const uint8_t*>(_variable[number]);
    39de:	44 0f       	add	r20, r20
    39e0:	55 1f       	adc	r21, r21
    39e2:	e4 0f       	add	r30, r20
    39e4:	f5 1f       	adc	r31, r21
    39e6:	07 88       	ldd	r0, Z+23	; 0x17
    39e8:	f0 8d       	ldd	r31, Z+24	; 0x18
    39ea:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    39ec:	4a e0       	ldi	r20, 0x0A	; 10
    39ee:	50 e0       	ldi	r21, 0x00	; 0
    39f0:	60 81       	ld	r22, Z
    39f2:	af c0       	rjmp	.+350    	; 0x3b52 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2ce>
		break;
	} //case UINT8_T

	case DataType::INT16_T: {
		const int16_t variable = *static_cast<const int16_t*>(_variable[number]);
    39f4:	44 0f       	add	r20, r20
    39f6:	55 1f       	adc	r21, r21
    39f8:	e4 0f       	add	r30, r20
    39fa:	f5 1f       	adc	r31, r21
    39fc:	07 88       	ldd	r0, Z+23	; 0x17
    39fe:	f0 8d       	ldd	r31, Z+24	; 0x18
    3a00:	e0 2d       	mov	r30, r0
		DEBUG(F("(int16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	0c c1       	rjmp	.+536    	; 0x3c20 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		p_liquidCrystal->print(variable);
		break;
	} //case UINT16_T

	case DataType::INT32_T: {
		const int32_t variable = *static_cast<const int32_t*>(_variable[number]);
    3a08:	44 0f       	add	r20, r20
    3a0a:	55 1f       	adc	r21, r21
    3a0c:	e4 0f       	add	r30, r20
    3a0e:	f5 1f       	adc	r31, r21
    3a10:	07 88       	ldd	r0, Z+23	; 0x17
    3a12:	f0 8d       	ldd	r31, Z+24	; 0x18
    3a14:	e0 2d       	mov	r30, r0
		DEBUG(F("(int32_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3a16:	40 81       	ld	r20, Z
    3a18:	51 81       	ldd	r21, Z+1	; 0x01
    3a1a:	62 81       	ldd	r22, Z+2	; 0x02
    3a1c:	73 81       	ldd	r23, Z+3	; 0x03
    3a1e:	ca c0       	rjmp	.+404    	; 0x3bb4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x330>
		break;
	} //case INT32_T
	case DataType::UINT32_T: {
		const uint32_t variable = *static_cast<const uint32_t*>(_variable[number]);
    3a20:	44 0f       	add	r20, r20
    3a22:	55 1f       	adc	r21, r21
    3a24:	e4 0f       	add	r30, r20
    3a26:	f5 1f       	adc	r31, r21
    3a28:	07 88       	ldd	r0, Z+23	; 0x17
    3a2a:	f0 8d       	ldd	r31, Z+24	; 0x18
    3a2c:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint32_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3a2e:	40 81       	ld	r20, Z
    3a30:	51 81       	ldd	r21, Z+1	; 0x01
    3a32:	62 81       	ldd	r22, Z+2	; 0x02
    3a34:	73 81       	ldd	r23, Z+3	; 0x03
    3a36:	d0 c0       	rjmp	.+416    	; 0x3bd8 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x354>
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
		break;
	} //case FLOAT

	case DataType::BOOL: {
		const bool variable = *static_cast<const bool*>(_variable[number]);
    3a38:	44 0f       	add	r20, r20
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	e4 0f       	add	r30, r20
    3a3e:	f5 1f       	adc	r31, r21
    3a40:	07 88       	ldd	r0, Z+23	; 0x17
    3a42:	f0 8d       	ldd	r31, Z+24	; 0x18
    3a44:	e0 2d       	mov	r30, r0
		DEBUG(F("(bool)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3a46:	60 81       	ld	r22, Z
    3a48:	ea c0       	rjmp	.+468    	; 0x3c1e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39a>
		break;
	} //case BOOL

	case DataType::GLYPH: {
		const uint8_t variable = *static_cast<const uint8_t*>(_variable[number]);
    3a4a:	44 0f       	add	r20, r20
    3a4c:	55 1f       	adc	r21, r21
    3a4e:	e4 0f       	add	r30, r20
    3a50:	f5 1f       	adc	r31, r21
    3a52:	a7 89       	ldd	r26, Z+23	; 0x17
    3a54:	b0 8d       	ldd	r27, Z+24	; 0x18
		DEBUG(F("(glyph)")); DEBUG(variable);
		p_liquidCrystal->write((uint8_t)variable);
    3a56:	fb 01       	movw	r30, r22
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	20 81       	ld	r18, Z
    3a60:	31 81       	ldd	r19, Z+1	; 0x01
    3a62:	6c 91       	ld	r22, X
    3a64:	c8 01       	movw	r24, r16
    3a66:	f9 01       	movw	r30, r18
    3a68:	19 95       	eicall
		break;
    3a6a:	de c0       	rjmp	.+444    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			buffer[i] = pgm_read_byte_near(variable + i);
		}
		buffer[len] = '\0';
		DEBUG(F("(const char*)")); DEBUG(buffer);
		p_liquidCrystal->print(buffer);
		break;
    3a6c:	cd b6       	in	r12, 0x3d	; 61
    3a6e:	de b6       	in	r13, 0x3e	; 62
		p_liquidCrystal->write((uint8_t)variable);
		break;
	} //case BOOL

	case DataType::PROG_CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
    3a70:	44 0f       	add	r20, r20
    3a72:	55 1f       	adc	r21, r21
    3a74:	e4 0f       	add	r30, r20
    3a76:	f5 1f       	adc	r31, r21
    3a78:	a7 88       	ldd	r10, Z+23	; 0x17
    3a7a:	b0 8c       	ldd	r11, Z+24	; 0x18
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    3a7c:	c5 01       	movw	r24, r10
    3a7e:	2b d7       	rcall	.+3670   	; 0x48d6 <__strlen_P>
		volatile const int len = strlen_P(variable);
    3a80:	9a 83       	std	Y+2, r25	; 0x02
    3a82:	89 83       	std	Y+1, r24	; 0x01
		char buffer[len];
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	2d b7       	in	r18, 0x3d	; 61
    3a8a:	3e b7       	in	r19, 0x3e	; 62
    3a8c:	28 1b       	sub	r18, r24
    3a8e:	39 0b       	sbc	r19, r25
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	3e bf       	out	0x3e, r19	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	2d bf       	out	0x3d, r18	; 61
    3a9a:	6d b7       	in	r22, 0x3d	; 61
    3a9c:	7e b7       	in	r23, 0x3e	; 62
    3a9e:	6f 5f       	subi	r22, 0xFF	; 255
    3aa0:	7f 4f       	sbci	r23, 0xFF	; 255
		for (uint8_t i = 0; i < len; i++) {
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	82 2f       	mov	r24, r18
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	49 81       	ldd	r20, Y+1	; 0x01
    3aaa:	5a 81       	ldd	r21, Y+2	; 0x02
    3aac:	84 17       	cp	r24, r20
    3aae:	95 07       	cpc	r25, r21
    3ab0:	54 f4       	brge	.+20     	; 0x3ac6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x242>
			buffer[i] = pgm_read_byte_near(variable + i);
    3ab2:	f5 01       	movw	r30, r10
    3ab4:	e8 0f       	add	r30, r24
    3ab6:	f9 1f       	adc	r31, r25
    3ab8:	e4 91       	lpm	r30, Z
    3aba:	db 01       	movw	r26, r22
    3abc:	a8 0f       	add	r26, r24
    3abe:	b9 1f       	adc	r27, r25
    3ac0:	ec 93       	st	X, r30

	case DataType::PROG_CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
		volatile const int len = strlen_P(variable);
		char buffer[len];
		for (uint8_t i = 0; i < len; i++) {
    3ac2:	2f 5f       	subi	r18, 0xFF	; 255
    3ac4:	ef cf       	rjmp	.-34     	; 0x3aa4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x220>
			buffer[i] = pgm_read_byte_near(variable + i);
		}
		buffer[len] = '\0';
    3ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    3aca:	e6 0f       	add	r30, r22
    3acc:	f7 1f       	adc	r31, r23
		DEBUG(F("(const char*)")); DEBUG(buffer);
		p_liquidCrystal->print(buffer);
    3ace:	10 82       	st	Z, r1
    3ad0:	c8 01       	movw	r24, r16
    3ad2:	73 d3       	rcall	.+1766   	; 0x41ba <_ZN5Print5printEPKc>
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de be       	out	0x3e, r13	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd be       	out	0x3d, r12	; 61
    3ade:	a4 c0       	rjmp	.+328    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case CONST_CHAR_PTR_GETTER

	case DataType::CHAR_PTR_GETTER: {
		const charPtrFnPtr getterFunction = reinterpret_cast<charPtrFnPtr>(_variable[number]);
    3ae0:	44 0f       	add	r20, r20
    3ae2:	55 1f       	adc	r21, r21
    3ae4:	e4 0f       	add	r30, r20
    3ae6:	f5 1f       	adc	r31, r21
    3ae8:	07 88       	ldd	r0, Z+23	; 0x17
    3aea:	f0 8d       	ldd	r31, Z+24	; 0x18
    3aec:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3aee:	30 97       	sbiw	r30, 0x00	; 0
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x270>
    3af2:	9a c0       	rjmp	.+308    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			char* variable = (getterFunction)();
    3af4:	19 95       	eicall
			DEBUG(F("(char*)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3af6:	bc 01       	movw	r22, r24
    3af8:	66 cf       	rjmp	.-308    	; 0x39c6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x142>
		} 
		break;
	} // case CHAR_PTR_GETTER

	case DataType::CHAR_GETTER: {
		const charFnPtr getterFunction = reinterpret_cast<charFnPtr>(_variable[number]);
    3afa:	44 0f       	add	r20, r20
    3afc:	55 1f       	adc	r21, r21
    3afe:	e4 0f       	add	r30, r20
    3b00:	f5 1f       	adc	r31, r21
    3b02:	07 88       	ldd	r0, Z+23	; 0x17
    3b04:	f0 8d       	ldd	r31, Z+24	; 0x18
    3b06:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3b08:	30 97       	sbiw	r30, 0x00	; 0
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x28a>
    3b0c:	8d c0       	rjmp	.+282    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			char variable = (getterFunction)();
			DEBUG(F("(char)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3b0e:	19 95       	eicall
    3b10:	68 2f       	mov	r22, r24
    3b12:	c8 01       	movw	r24, r16
    3b14:	53 d3       	rcall	.+1702   	; 0x41bc <_ZN5Print5printEc>
    3b16:	88 c0       	rjmp	.+272    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case CHAR_GETTER

	case DataType::INT8_T_GETTER: {
		const int8tFnPtr getterFunction = reinterpret_cast<int8tFnPtr>(_variable[number]);
    3b18:	44 0f       	add	r20, r20
    3b1a:	55 1f       	adc	r21, r21
    3b1c:	e4 0f       	add	r30, r20
    3b1e:	f5 1f       	adc	r31, r21
    3b20:	07 88       	ldd	r0, Z+23	; 0x17
    3b22:	f0 8d       	ldd	r31, Z+24	; 0x18
    3b24:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3b26:	30 97       	sbiw	r30, 0x00	; 0
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2a8>
    3b2a:	7e c0       	rjmp	.+252    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int8_t variable = (getterFunction)();
    3b2c:	19 95       	eicall
			DEBUG(F("(int8_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3b2e:	68 2f       	mov	r22, r24
    3b30:	88 0f       	add	r24, r24
    3b32:	77 0b       	sbc	r23, r23
    3b34:	75 c0       	rjmp	.+234    	; 0x3c20 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		} 
		break;
	} // case INT8_T_GETTER

	case DataType::UINT8_T_GETTER: {
		const uint8tFnPtr getterFunction = reinterpret_cast<uint8tFnPtr>(_variable[number]);
    3b36:	44 0f       	add	r20, r20
    3b38:	55 1f       	adc	r21, r21
    3b3a:	e4 0f       	add	r30, r20
    3b3c:	f5 1f       	adc	r31, r21
    3b3e:	07 88       	ldd	r0, Z+23	; 0x17
    3b40:	f0 8d       	ldd	r31, Z+24	; 0x18
    3b42:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3b44:	30 97       	sbiw	r30, 0x00	; 0
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2c6>
    3b48:	6f c0       	rjmp	.+222    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			uint8_t variable = (getterFunction)();
    3b4a:	19 95       	eicall
			DEBUG(F("(uint8_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3b4c:	4a e0       	ldi	r20, 0x0A	; 10
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	68 2f       	mov	r22, r24
    3b52:	c8 01       	movw	r24, r16
    3b54:	8d d3       	rcall	.+1818   	; 0x4270 <_ZN5Print5printEhi>
    3b56:	68 c0       	rjmp	.+208    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT8_T_GETTER

	case DataType::INT16_T_GETTER: {
		const int16tFnPtr getterFunction = reinterpret_cast<int16tFnPtr>(_variable[number]);
    3b58:	44 0f       	add	r20, r20
    3b5a:	55 1f       	adc	r21, r21
    3b5c:	e4 0f       	add	r30, r20
    3b5e:	f5 1f       	adc	r31, r21
    3b60:	07 88       	ldd	r0, Z+23	; 0x17
    3b62:	f0 8d       	ldd	r31, Z+24	; 0x18
    3b64:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3b66:	30 97       	sbiw	r30, 0x00	; 0
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2e8>
    3b6a:	5e c0       	rjmp	.+188    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int16_t variable = (getterFunction)();
    3b6c:	19 95       	eicall
			DEBUG(F("(int16_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3b6e:	4a e0       	ldi	r20, 0x0A	; 10
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	bc 01       	movw	r22, r24
    3b74:	57 c0       	rjmp	.+174    	; 0x3c24 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a0>
		} 
		break;
	} // case INT16_T_GETTER

	case DataType::UINT16_T_GETTER: {
		const uint16tFnPtr getterFunction = reinterpret_cast<uint16tFnPtr>(_variable[number]);
    3b76:	44 0f       	add	r20, r20
    3b78:	55 1f       	adc	r21, r21
    3b7a:	e4 0f       	add	r30, r20
    3b7c:	f5 1f       	adc	r31, r21
    3b7e:	07 88       	ldd	r0, Z+23	; 0x17
    3b80:	f0 8d       	ldd	r31, Z+24	; 0x18
    3b82:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3b84:	30 97       	sbiw	r30, 0x00	; 0
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x306>
    3b88:	4f c0       	rjmp	.+158    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			uint16_t variable = (getterFunction)();
			DEBUG(F("(uint16_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3b8a:	19 95       	eicall
    3b8c:	4a e0       	ldi	r20, 0x0A	; 10
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	bc 01       	movw	r22, r24
    3b92:	c8 01       	movw	r24, r16
    3b94:	73 d3       	rcall	.+1766   	; 0x427c <_ZN5Print5printEji>
    3b96:	48 c0       	rjmp	.+144    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT16_T_GETTER

	case DataType::INT32_T_GETTER: {
		const int32tFnPtr getterFunction = reinterpret_cast<int32tFnPtr>(_variable[number]);
    3b98:	9a 01       	movw	r18, r20
    3b9a:	22 0f       	add	r18, r18
    3b9c:	33 1f       	adc	r19, r19
    3b9e:	e2 0f       	add	r30, r18
    3ba0:	f3 1f       	adc	r31, r19
    3ba2:	07 88       	ldd	r0, Z+23	; 0x17
    3ba4:	f0 8d       	ldd	r31, Z+24	; 0x18
    3ba6:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3ba8:	30 97       	sbiw	r30, 0x00	; 0
    3baa:	09 f4       	brne	.+2      	; 0x3bae <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x32a>
    3bac:	3d c0       	rjmp	.+122    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int32_t variable = (getterFunction)();
    3bae:	19 95       	eicall
    3bb0:	ab 01       	movw	r20, r22
			DEBUG(F("(int32_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3bb2:	bc 01       	movw	r22, r24
    3bb4:	2a e0       	ldi	r18, 0x0A	; 10
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	c8 01       	movw	r24, r16
    3bba:	65 d3       	rcall	.+1738   	; 0x4286 <_ZN5Print5printEli>
    3bbc:	35 c0       	rjmp	.+106    	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case INT32_T_GETTER

	case DataType::UINT32_T_GETTER: {
		const uint32tFnPtr getterFunction = reinterpret_cast<uint32tFnPtr>(_variable[number]);
    3bbe:	9a 01       	movw	r18, r20
    3bc0:	22 0f       	add	r18, r18
    3bc2:	33 1f       	adc	r19, r19
    3bc4:	e2 0f       	add	r30, r18
    3bc6:	f3 1f       	adc	r31, r19
    3bc8:	07 88       	ldd	r0, Z+23	; 0x17
    3bca:	f0 8d       	ldd	r31, Z+24	; 0x18
    3bcc:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3bce:	30 97       	sbiw	r30, 0x00	; 0
			uint32_t variable = (getterFunction)();
    3bd0:	59 f1       	breq	.+86     	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    3bd2:	19 95       	eicall
    3bd4:	ab 01       	movw	r20, r22
			DEBUG(F("(uint32_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	2a e0       	ldi	r18, 0x0A	; 10
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	c8 01       	movw	r24, r16
    3bde:	3c d3       	rcall	.+1656   	; 0x4258 <_ZN5Print5printEmi>
    3be0:	23 c0       	rjmp	.+70     	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT32_T_GETTER

	case DataType::FLOAT_GETTER: {
		const floatFnPtr getterFunction = reinterpret_cast<floatFnPtr>(_variable[number]);
    3be2:	9a 01       	movw	r18, r20
    3be4:	22 0f       	add	r18, r18
    3be6:	33 1f       	adc	r19, r19
    3be8:	e2 0f       	add	r30, r18
    3bea:	f3 1f       	adc	r31, r19
    3bec:	07 88       	ldd	r0, Z+23	; 0x17
    3bee:	f0 8d       	ldd	r31, Z+24	; 0x18
    3bf0:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3bf2:	30 97       	sbiw	r30, 0x00	; 0
			const float variable = (getterFunction)();
    3bf4:	c9 f0       	breq	.+50     	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    3bf6:	19 95       	eicall
    3bf8:	ab 01       	movw	r20, r22
			DEBUG(F("(float)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	22 e0       	ldi	r18, 0x02	; 2
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	c8 01       	movw	r24, r16
    3c02:	5c d4       	rcall	.+2232   	; 0x44bc <_ZN5Print5printEdi>
    3c04:	11 c0       	rjmp	.+34     	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case FLOAT_GETTER

	case DataType::BOOL_GETTER: {
		const boolFnPtr getterFunction = reinterpret_cast<boolFnPtr>(_variable[number]);
    3c06:	9a 01       	movw	r18, r20
    3c08:	22 0f       	add	r18, r18
    3c0a:	33 1f       	adc	r19, r19
    3c0c:	e2 0f       	add	r30, r18
    3c0e:	f3 1f       	adc	r31, r19
    3c10:	07 88       	ldd	r0, Z+23	; 0x17
    3c12:	f0 8d       	ldd	r31, Z+24	; 0x18
		if (getterFunction != nullptr) {
    3c14:	e0 2d       	mov	r30, r0
    3c16:	30 97       	sbiw	r30, 0x00	; 0
			bool variable = (getterFunction)();
    3c18:	39 f0       	breq	.+14     	; 0x3c28 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			DEBUG(F("(bool)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3c1a:	19 95       	eicall
    3c1c:	68 2f       	mov	r22, r24
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	4a e0       	ldi	r20, 0x0A	; 10
    3c22:	50 e0       	ldi	r21, 0x00	; 0
    3c24:	c8 01       	movw	r24, r16
    3c26:	74 d3       	rcall	.+1768   	; 0x4310 <_ZN5Print5printEii>

	default: { break; }

	} //switch (_variableType)
	DEBUG(F(" "));
}
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	fe be       	out	0x3e, r15	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	ed be       	out	0x3d, r14	; 61
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	ff 90       	pop	r15
    3c40:	ef 90       	pop	r14
    3c42:	df 90       	pop	r13
    3c44:	cf 90       	pop	r12
    3c46:	bf 90       	pop	r11
    3c48:	af 90       	pop	r10
    3c4a:	08 95       	ret

00003c4c <_ZN10LiquidLine5printEP13LiquidCrystalb>:
		DEBUGLN(F(" as PROG_CONST_CHAR failed, the variable must be of 'const char[]' data type"))
		return false;
	}
}

void LiquidLine::print(DisplayClass *p_liquidCrystal, bool isFocused) {
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	8c 01       	movw	r16, r24
    3c5a:	eb 01       	movw	r28, r22
    3c5c:	e4 2e       	mov	r14, r20
	p_liquidCrystal->setCursor(_column, _row);
    3c5e:	dc 01       	movw	r26, r24
    3c60:	4c 91       	ld	r20, X
    3c62:	11 96       	adiw	r26, 0x01	; 1
    3c64:	6c 91       	ld	r22, X
    3c66:	ce 01       	movw	r24, r28
    3c68:	e5 dc       	rcall	.-1590   	; 0x3634 <_ZN13LiquidCrystal9setCursorEhh>
	DEBUG(F(" (")); DEBUG(_column); DEBUG(F(", ")); DEBUG(_row); DEBUGLN(F(")"));

	DEBUG(F("|\t"));
	for (uint8_t v = 0; v < MAX_VARIABLES; v++) {
    3c6a:	f1 2c       	mov	r15, r1
		print_variable(p_liquidCrystal, v);
    3c6c:	4f 2d       	mov	r20, r15
    3c6e:	be 01       	movw	r22, r28
    3c70:	c8 01       	movw	r24, r16
    3c72:	08 de       	rcall	.-1008   	; 0x3884 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh>
void LiquidLine::print(DisplayClass *p_liquidCrystal, bool isFocused) {
	p_liquidCrystal->setCursor(_column, _row);
	DEBUG(F(" (")); DEBUG(_column); DEBUG(F(", ")); DEBUG(_row); DEBUGLN(F(")"));

	DEBUG(F("|\t"));
	for (uint8_t v = 0; v < MAX_VARIABLES; v++) {
    3c74:	f3 94       	inc	r15
    3c76:	b5 e0       	ldi	r27, 0x05	; 5
    3c78:	fb 12       	cpse	r15, r27
    3c7a:	f8 cf       	rjmp	.-16     	; 0x3c6c <_ZN10LiquidLine5printEP13LiquidCrystalb+0x20>
		print_variable(p_liquidCrystal, v);
	}
	DEBUGLN();

	if (isFocused) {
    3c7c:	ee 20       	and	r14, r14
    3c7e:	99 f1       	breq	.+102    	; 0x3ce6 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x9a>
		DEBUG(F("\t\t<Focus position: "));
		switch (_focusPosition) {
    3c80:	f8 01       	movw	r30, r16
    3c82:	84 81       	ldd	r24, Z+4	; 0x04
    3c84:	82 30       	cpi	r24, 0x02	; 2
    3c86:	59 f0       	breq	.+22     	; 0x3c9e <_ZN10LiquidLine5printEP13LiquidCrystalb+0x52>
    3c88:	83 30       	cpi	r24, 0x03	; 3
    3c8a:	a9 f0       	breq	.+42     	; 0x3cb6 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x6a>
    3c8c:	e8 81       	ld	r30, Y
    3c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	e9 f0       	breq	.+58     	; 0x3cce <_ZN10LiquidLine5printEP13LiquidCrystalb+0x82>
			break;
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	d8 01       	movw	r26, r16
    3c98:	14 96       	adiw	r26, 0x04	; 4
    3c9a:	8c 93       	st	X, r24
    3c9c:	18 c0       	rjmp	.+48     	; 0x3cce <_ZN10LiquidLine5printEP13LiquidCrystalb+0x82>
			//p_liquidCrystal->print(NOTHING);
			break;
		} //case RIGHT
		case Position::LEFT: {
			//p_liquidCrystal->print(NOTHING);
			p_liquidCrystal->setCursor(_column - 1, _row);
    3c9e:	61 81       	ldd	r22, Z+1	; 0x01
    3ca0:	61 50       	subi	r22, 0x01	; 1
    3ca2:	40 81       	ld	r20, Z
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	c6 dc       	rcall	.-1652   	; 0x3634 <_ZN13LiquidCrystal9setCursorEhh>
			p_liquidCrystal->write((uint8_t)14);
    3ca8:	e8 81       	ld	r30, Y
    3caa:	f9 81       	ldd	r31, Y+1	; 0x01
    3cac:	01 90       	ld	r0, Z+
    3cae:	f0 81       	ld	r31, Z
    3cb0:	e0 2d       	mov	r30, r0
    3cb2:	6e e0       	ldi	r22, 0x0E	; 14
    3cb4:	10 c0       	rjmp	.+32     	; 0x3cd6 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x8a>
			DEBUGLN(F("left>"));
			break;
		} //case LEFT
		case Position::CUSTOM: {
			//p_liquidCrystal->print(NOTHING);
			p_liquidCrystal->setCursor(_focusColumn, _focusRow);
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	42 81       	ldd	r20, Z+2	; 0x02
    3cba:	63 81       	ldd	r22, Z+3	; 0x03
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	ba dc       	rcall	.-1676   	; 0x3634 <_ZN13LiquidCrystal9setCursorEhh>
			p_liquidCrystal->write((uint8_t)13);
    3cc0:	e8 81       	ld	r30, Y
    3cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc4:	01 90       	ld	r0, Z+
    3cc6:	f0 81       	ld	r31, Z
    3cc8:	e0 2d       	mov	r30, r0
    3cca:	6d e0       	ldi	r22, 0x0D	; 13
    3ccc:	04 c0       	rjmp	.+8      	; 0x3cd6 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x8a>
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
			p_liquidCrystal->write((uint8_t)15);
    3cce:	01 90       	ld	r0, Z+
    3cd0:	f0 81       	ld	r31, Z
    3cd2:	e0 2d       	mov	r30, r0
    3cd4:	6f e0       	ldi	r22, 0x0F	; 15
    3cd6:	ce 01       	movw	r24, r28
		} //default
		} //switch (_focusPosition)
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
			p_liquidCrystal->write((uint8_t)15);
    3ce4:	19 94       	eijmp
		} //default
		} //switch (_focusPosition)
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	ff 90       	pop	r15
    3cf0:	ef 90       	pop	r14
    3cf2:	08 95       	ret

00003cf4 <_ZNK10LiquidLine13call_functionEh>:
	} //switch (_variableType)
	DEBUG(F(" "));
}

bool LiquidLine::call_function(uint8_t number) const {
	if (_function[number - 1]) {
    3cf4:	86 0f       	add	r24, r22
    3cf6:	91 1d       	adc	r25, r1
    3cf8:	86 0f       	add	r24, r22
    3cfa:	91 1d       	adc	r25, r1
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	15 96       	adiw	r26, 0x05	; 5
    3d00:	ed 91       	ld	r30, X+
    3d02:	fc 91       	ld	r31, X
    3d04:	16 97       	sbiw	r26, 0x06	; 6
    3d06:	30 97       	sbiw	r30, 0x00	; 0
    3d08:	19 f0       	breq	.+6      	; 0x3d10 <_ZNK10LiquidLine13call_functionEh+0x1c>
		(*_function[number - 1])();
    3d0a:	19 95       	eicall
		return true;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	08 95       	ret
	} else {
		return false;
    3d10:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3d12:	08 95       	ret

00003d14 <_ZN10LiquidMenuC1ER13LiquidCrystalh>:
bool LiquidMenu::operator=(uint8_t number) {
  return change_screen(number);
}

bool LiquidMenu::operator=(LiquidScreen &p_liquidScreen) {
  return change_screen(p_liquidScreen);
    3d14:	fc 01       	movw	r30, r24
    3d16:	71 83       	std	Z+1, r23	; 0x01
    3d18:	60 83       	st	Z, r22
    3d1a:	16 8e       	std	Z+30, r1	; 0x1e
    3d1c:	41 50       	subi	r20, 0x01	; 1
    3d1e:	47 8f       	std	Z+31, r20	; 0x1f
    3d20:	08 95       	ret

00003d22 <_ZN10LiquidMenu10add_screenER12LiquidScreen>:
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	ec 01       	movw	r28, r24
    3d2c:	8b 01       	movw	r16, r22
    3d2e:	80 dd       	rcall	.-1280   	; 0x3830 <_Z8print_mej>
    3d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d32:	8e 30       	cpi	r24, 0x0E	; 14
    3d34:	58 f4       	brcc	.+22     	; 0x3d4c <_ZN10LiquidMenu10add_screenER12LiquidScreen+0x2a>
    3d36:	fe 01       	movw	r30, r28
    3d38:	e8 0f       	add	r30, r24
    3d3a:	f1 1d       	adc	r31, r1
    3d3c:	e8 0f       	add	r30, r24
    3d3e:	f1 1d       	adc	r31, r1
    3d40:	13 83       	std	Z+3, r17	; 0x03
    3d42:	02 83       	std	Z+2, r16	; 0x02
    3d44:	8f 5f       	subi	r24, 0xFF	; 255
    3d46:	8e 8f       	std	Y+30, r24	; 0x1e
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <_ZN10LiquidMenu10add_screenER12LiquidScreen+0x2c>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	08 95       	ret

00003d58 <_ZNK10LiquidMenu17get_currentScreenEv>:
    3d58:	fc 01       	movw	r30, r24
    3d5a:	27 8d       	ldd	r18, Z+31	; 0x1f
    3d5c:	e2 0f       	add	r30, r18
    3d5e:	f1 1d       	adc	r31, r1
    3d60:	e2 0f       	add	r30, r18
    3d62:	f1 1d       	adc	r31, r1
    3d64:	82 81       	ldd	r24, Z+2	; 0x02
    3d66:	93 81       	ldd	r25, Z+3	; 0x03
    3d68:	08 95       	ret

00003d6a <_ZN10LiquidMenu17set_focusPositionE8Position>:
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	8c 01       	movw	r16, r24
    3d74:	d6 2f       	mov	r29, r22
    3d76:	5c dd       	rcall	.-1352   	; 0x3830 <_Z8print_mej>
    3d78:	d3 30       	cpi	r29, 0x03	; 3
    3d7a:	79 f0       	breq	.+30     	; 0x3d9a <_ZN10LiquidMenu17set_focusPositionE8Position+0x30>
    3d7c:	c0 e0       	ldi	r28, 0x00	; 0
    3d7e:	f8 01       	movw	r30, r16
    3d80:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d82:	c8 17       	cp	r28, r24
    3d84:	60 f4       	brcc	.+24     	; 0x3d9e <_ZN10LiquidMenu17set_focusPositionE8Position+0x34>
    3d86:	ec 0f       	add	r30, r28
    3d88:	f1 1d       	adc	r31, r1
    3d8a:	ec 0f       	add	r30, r28
    3d8c:	f1 1d       	adc	r31, r1
    3d8e:	6d 2f       	mov	r22, r29
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	e6 d0       	rcall	.+460    	; 0x3f62 <_ZN12LiquidScreen17set_focusPositionE8Position>
    3d96:	cf 5f       	subi	r28, 0xFF	; 255
    3d98:	f2 cf       	rjmp	.-28     	; 0x3d7e <_ZN10LiquidMenu17set_focusPositionE8Position+0x14>
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	01 c0       	rjmp	.+2      	; 0x3da0 <_ZN10LiquidMenu17set_focusPositionE8Position+0x36>
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	df 91       	pop	r29
    3da2:	cf 91       	pop	r28
    3da4:	1f 91       	pop	r17
    3da6:	0f 91       	pop	r16
    3da8:	08 95       	ret

00003daa <_ZN10LiquidMenu15set_focusSymbolE8PositionPh>:
    3daa:	fc 01       	movw	r30, r24
    3dac:	62 30       	cpi	r22, 0x02	; 2
    3dae:	31 f0       	breq	.+12     	; 0x3dbc <_ZN10LiquidMenu15set_focusSymbolE8PositionPh+0x12>
    3db0:	63 30       	cpi	r22, 0x03	; 3
    3db2:	51 f0       	breq	.+20     	; 0x3dc8 <_ZN10LiquidMenu15set_focusSymbolE8PositionPh+0x1e>
    3db4:	61 30       	cpi	r22, 0x01	; 1
    3db6:	51 f4       	brne	.+20     	; 0x3dcc <_ZN10LiquidMenu15set_focusSymbolE8PositionPh+0x22>
    3db8:	6f e0       	ldi	r22, 0x0F	; 15
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <_ZN10LiquidMenu15set_focusSymbolE8PositionPh+0x14>
    3dbc:	6e e0       	ldi	r22, 0x0E	; 14
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	0a dd       	rcall	.-1516   	; 0x37d8 <_ZN13LiquidCrystal10createCharEhPh>
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	08 95       	ret
    3dc8:	6d e0       	ldi	r22, 0x0D	; 13
    3dca:	f9 cf       	rjmp	.-14     	; 0x3dbe <_ZN10LiquidMenu15set_focusSymbolE8PositionPh+0x14>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	08 95       	ret

00003dd0 <_ZNK10LiquidMenu10softUpdateEv>:
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	87 8d       	ldd	r24, Z+31	; 0x1f
    3dd8:	e8 0f       	add	r30, r24
    3dda:	f1 1d       	adc	r31, r1
    3ddc:	e8 0f       	add	r30, r24
    3dde:	f1 1d       	adc	r31, r1
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	e3 c0       	rjmp	.+454    	; 0x3fac <_ZNK12LiquidScreen5printEP13LiquidCrystal>

00003de6 <_ZNK10LiquidMenu6updateEv>:
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	ec 01       	movw	r28, r24
    3dec:	88 81       	ld	r24, Y
    3dee:	99 81       	ldd	r25, Y+1	; 0x01
    3df0:	1c dc       	rcall	.-1992   	; 0x362a <_ZN13LiquidCrystal5clearEv>
    3df2:	ce 01       	movw	r24, r28
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	eb cf       	rjmp	.-42     	; 0x3dd0 <_ZNK10LiquidMenu10softUpdateEv>

00003dfa <_ZN10LiquidMenu13change_screenER12LiquidScreen>:
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	8c 01       	movw	r16, r24
    3e06:	7b 01       	movw	r14, r22
    3e08:	c0 e0       	ldi	r28, 0x00	; 0
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e0e:	c8 17       	cp	r28, r24
    3e10:	b8 f4       	brcc	.+46     	; 0x3e40 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x46>
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	09 dc       	rcall	.-2030   	; 0x362a <_ZN13LiquidCrystal5clearEv>
    3e18:	f8 01       	movw	r30, r16
    3e1a:	ec 0f       	add	r30, r28
    3e1c:	f1 1d       	adc	r31, r1
    3e1e:	ec 0f       	add	r30, r28
    3e20:	f1 1d       	adc	r31, r1
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	8e 15       	cp	r24, r14
    3e28:	9f 05       	cpc	r25, r15
    3e2a:	41 f4       	brne	.+16     	; 0x3e3c <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x42>
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	c7 8f       	std	Z+31, r28	; 0x1f
    3e30:	c8 01       	movw	r24, r16
    3e32:	d9 df       	rcall	.-78     	; 0x3de6 <_ZNK10LiquidMenu6updateEv>
    3e34:	c8 01       	movw	r24, r16
    3e36:	d7 df       	rcall	.-82     	; 0x3de6 <_ZNK10LiquidMenu6updateEv>
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	03 c0       	rjmp	.+6      	; 0x3e42 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x48>
    3e3c:	cf 5f       	subi	r28, 0xFF	; 255
    3e3e:	e5 cf       	rjmp	.-54     	; 0x3e0a <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x10>
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	ff 90       	pop	r15
    3e4a:	ef 90       	pop	r14
    3e4c:	08 95       	ret

00003e4e <_ZN10LiquidMenu12switch_focusEb>:
}

void LiquidMenu::switch_focus(bool forward) {
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	ec 01       	movw	r28, r24
    3e56:	16 2f       	mov	r17, r22
  _p_liquidCrystal->clear();
    3e58:	88 81       	ld	r24, Y
    3e5a:	99 81       	ldd	r25, Y+1	; 0x01
    3e5c:	e6 db       	rcall	.-2100   	; 0x362a <_ZN13LiquidCrystal5clearEv>
  _p_liquidScreen[_currentScreen]->switch_focus(forward);
    3e5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e60:	fe 01       	movw	r30, r28
    3e62:	e8 0f       	add	r30, r24
    3e64:	f1 1d       	adc	r31, r1
    3e66:	e8 0f       	add	r30, r24
    3e68:	f1 1d       	adc	r31, r1
    3e6a:	61 2f       	mov	r22, r17
    3e6c:	82 81       	ldd	r24, Z+2	; 0x02
    3e6e:	93 81       	ldd	r25, Z+3	; 0x03
    3e70:	f2 d0       	rcall	.+484    	; 0x4056 <_ZN12LiquidScreen12switch_focusEb>
  update();
    3e72:	ce 01       	movw	r24, r28
}
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
}

void LiquidMenu::switch_focus(bool forward) {
  _p_liquidCrystal->clear();
  _p_liquidScreen[_currentScreen]->switch_focus(forward);
  update();
    3e78:	1f 91       	pop	r17
    3e7a:	b5 cf       	rjmp	.-150    	; 0x3de6 <_ZNK10LiquidMenu6updateEv>

00003e7c <_ZNK10LiquidMenu13call_functionEh>:
    DEBUGLN2(symbol[i], BIN);
  }
  return true;
}

bool LiquidMenu::call_function(uint8_t number) const {
    3e7c:	1f 93       	push	r17
    3e7e:	cf 93       	push	r28
    3e80:	df 93       	push	r29
    3e82:	ec 01       	movw	r28, r24
  bool returnValue = _p_liquidScreen[_currentScreen]->call_function(number);
    3e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e86:	fe 01       	movw	r30, r28
    3e88:	e8 0f       	add	r30, r24
    3e8a:	f1 1d       	adc	r31, r1
    3e8c:	e8 0f       	add	r30, r24
    3e8e:	f1 1d       	adc	r31, r1
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	0a d1       	rcall	.+532    	; 0x40aa <_ZNK12LiquidScreen13call_functionEh>
    3e96:	18 2f       	mov	r17, r24
  update();
    3e98:	ce 01       	movw	r24, r28
    3e9a:	a5 df       	rcall	.-182    	; 0x3de6 <_ZNK10LiquidMenu6updateEv>
  return returnValue;
}
    3e9c:	81 2f       	mov	r24, r17
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	08 95       	ret

00003ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>:
{
	_displayLineCount = lines;
}

void LiquidScreen::hide(bool hide) {
	_hidden = hide;
    3ea6:	0f 93       	push	r16
    3ea8:	1f 93       	push	r17
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	ec 01       	movw	r28, r24
    3eb0:	8b 01       	movw	r16, r22
    3eb2:	be dc       	rcall	.-1668   	; 0x3830 <_Z8print_mej>
    3eb4:	88 8d       	ldd	r24, Y+24	; 0x18
    3eb6:	8c 30       	cpi	r24, 0x0C	; 12
    3eb8:	78 f4       	brcc	.+30     	; 0x3ed8 <_ZN12LiquidScreen8add_lineER10LiquidLine+0x32>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e8 0f       	add	r30, r24
    3ebe:	f1 1d       	adc	r31, r1
    3ec0:	e8 0f       	add	r30, r24
    3ec2:	f1 1d       	adc	r31, r1
    3ec4:	11 83       	std	Z+1, r17	; 0x01
    3ec6:	00 83       	st	Z, r16
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	88 8f       	std	Y+24, r24	; 0x18
    3ecc:	99 8d       	ldd	r25, Y+25	; 0x19
    3ece:	9f 5f       	subi	r25, 0xFF	; 255
    3ed0:	99 8f       	std	Y+25, r25	; 0x19
    3ed2:	8a 8f       	std	Y+26, r24	; 0x1a
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	01 c0       	rjmp	.+2      	; 0x3eda <_ZN12LiquidScreen8add_lineER10LiquidLine+0x34>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	08 95       	ret

00003ee4 <_ZN12LiquidScreenC1ER10LiquidLine>:
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	10 8e       	std	Z+24, r1	; 0x18
    3ee8:	11 8e       	std	Z+25, r1	; 0x19
    3eea:	13 8e       	std	Z+27, r1	; 0x1b
    3eec:	dc cf       	rjmp	.-72     	; 0x3ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>:
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	ec 01       	movw	r28, r24
    3ef8:	8a 01       	movw	r16, r20
    3efa:	f4 df       	rcall	.-24     	; 0x3ee4 <_ZN12LiquidScreenC1ER10LiquidLine>
    3efc:	b8 01       	movw	r22, r16
    3efe:	ce 01       	movw	r24, r28
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	ce cf       	rjmp	.-100    	; 0x3ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003f0a <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>:
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	ec 01       	movw	r28, r24
    3f14:	89 01       	movw	r16, r18
    3f16:	eb df       	rcall	.-42     	; 0x3eee <_ZN12LiquidScreenC1ER10LiquidLineS1_>
    3f18:	b8 01       	movw	r22, r16
    3f1a:	ce 01       	movw	r24, r28
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	c0 cf       	rjmp	.-128    	; 0x3ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>:
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	ec 01       	movw	r28, r24
    3f30:	ec df       	rcall	.-40     	; 0x3f0a <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>
    3f32:	b8 01       	movw	r22, r16
    3f34:	ce 01       	movw	r24, r28
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	1f 91       	pop	r17
    3f3c:	0f 91       	pop	r16
    3f3e:	b3 cf       	rjmp	.-154    	; 0x3ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003f40 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_S1_>:
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	ec 01       	movw	r28, r24
    3f4e:	eb df       	rcall	.-42     	; 0x3f26 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
    3f50:	b7 01       	movw	r22, r14
    3f52:	ce 01       	movw	r24, r28
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	1f 91       	pop	r17
    3f5a:	0f 91       	pop	r16
    3f5c:	ff 90       	pop	r15
    3f5e:	ef 90       	pop	r14
    3f60:	a2 cf       	rjmp	.-188    	; 0x3ea6 <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003f62 <_ZN12LiquidScreen17set_focusPositionE8Position>:
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	d6 2f       	mov	r29, r22
    3f6e:	60 dc       	rcall	.-1856   	; 0x3830 <_Z8print_mej>
    3f70:	d3 30       	cpi	r29, 0x03	; 3
    3f72:	89 f0       	breq	.+34     	; 0x3f96 <_ZN12LiquidScreen17set_focusPositionE8Position+0x34>
    3f74:	c0 e0       	ldi	r28, 0x00	; 0
    3f76:	f8 01       	movw	r30, r16
    3f78:	80 8d       	ldd	r24, Z+24	; 0x18
    3f7a:	c8 17       	cp	r28, r24
    3f7c:	70 f4       	brcc	.+28     	; 0x3f9a <_ZN12LiquidScreen17set_focusPositionE8Position+0x38>
    3f7e:	ec 0f       	add	r30, r28
    3f80:	f1 1d       	adc	r31, r1
    3f82:	ec 0f       	add	r30, r28
    3f84:	f1 1d       	adc	r31, r1
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	6d 2f       	mov	r22, r29
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	60 dc       	rcall	.-1856   	; 0x3852 <_ZN10LiquidLine17set_focusPositionE8Positionhh>
    3f92:	cf 5f       	subi	r28, 0xFF	; 255
    3f94:	f0 cf       	rjmp	.-32     	; 0x3f76 <_ZN12LiquidScreen17set_focusPositionE8Position+0x14>
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <_ZN12LiquidScreen17set_focusPositionE8Position+0x3a>
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	08 95       	ret

00003fa6 <_ZN12LiquidScreen20set_displayLineCountEh>:
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	62 8f       	std	Z+26, r22	; 0x1a
    3faa:	08 95       	ret

00003fac <_ZNK12LiquidScreen5printEP13LiquidCrystal>:
}

void LiquidScreen::print(DisplayClass *p_liquidCrystal) const {
    3fac:	bf 92       	push	r11
    3fae:	cf 92       	push	r12
    3fb0:	df 92       	push	r13
    3fb2:	ef 92       	push	r14
    3fb4:	ff 92       	push	r15
    3fb6:	0f 93       	push	r16
    3fb8:	1f 93       	push	r17
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	8c 01       	movw	r16, r24
    3fc0:	6b 01       	movw	r12, r22
	uint8_t lOffset = 0;
	uint8_t displayLineCount = _displayLineCount;
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	b2 8c       	ldd	r11, Z+26	; 0x1a
    3fc6:	80 8d       	ldd	r24, Z+24	; 0x18
	if (displayLineCount == 0)
    3fc8:	bb 20       	and	r11, r11
    3fca:	11 f0       	breq	.+4      	; 0x3fd0 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x24>
    3fcc:	8b 15       	cp	r24, r11
    3fce:	08 f4       	brcc	.+2      	; 0x3fd2 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x26>
    3fd0:	b8 2e       	mov	r11, r24
		displayLineCount = _lineCount;
	DEBUG("MaxLine: ");
	DEBUG(displayLineCount);
	DEBUG("\n");

	if (_focus >= displayLineCount)
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	c1 8d       	ldd	r28, Z+25	; 0x19
    3fd6:	eb 2c       	mov	r14, r11
    3fd8:	f1 2c       	mov	r15, r1
    3fda:	cb 15       	cp	r28, r11
    3fdc:	68 f0       	brcs	.+26     	; 0x3ff8 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4c>
	{
		lOffset = (_focus - displayLineCount) + 1;
    3fde:	cf 5f       	subi	r28, 0xFF	; 255
    3fe0:	cb 19       	sub	r28, r11
		if ((displayLineCount + lOffset) > _lineCount)
    3fe2:	a7 01       	movw	r20, r14
    3fe4:	4c 0f       	add	r20, r28
    3fe6:	51 1d       	adc	r21, r1
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	24 17       	cp	r18, r20
    3fee:	35 07       	cpc	r19, r21
    3ff0:	24 f4       	brge	.+8      	; 0x3ffa <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4e>
			lOffset = (_lineCount - displayLineCount);
    3ff2:	c8 2f       	mov	r28, r24
    3ff4:	cb 19       	sub	r28, r11
    3ff6:	01 c0       	rjmp	.+2      	; 0x3ffa <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4e>
void LiquidScreen::hide(bool hide) {
	_hidden = hide;
}

void LiquidScreen::print(DisplayClass *p_liquidCrystal) const {
	uint8_t lOffset = 0;
    3ff8:	c0 e0       	ldi	r28, 0x00	; 0
		lOffset = (_focus - displayLineCount) + 1;
		if ((displayLineCount + lOffset) > _lineCount)
			lOffset = (_lineCount - displayLineCount);
	}
	uint8_t offsetRow = 0;
	for (uint8_t l = lOffset; l < displayLineCount + lOffset; l++) {
    3ffa:	dc 2f       	mov	r29, r28
    3ffc:	ec 0e       	add	r14, r28
    3ffe:	f1 1c       	adc	r15, r1
    4000:	2d 2f       	mov	r18, r29
    4002:	2c 1b       	sub	r18, r28
    4004:	8d 2f       	mov	r24, r29
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	8e 15       	cp	r24, r14
    400a:	9f 05       	cpc	r25, r15
    400c:	d4 f4       	brge	.+52     	; 0x4042 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x96>
		bool focus = true;
		if (_focus != l) {
    400e:	41 e0       	ldi	r20, 0x01	; 1
    4010:	f8 01       	movw	r30, r16
    4012:	31 8d       	ldd	r19, Z+25	; 0x19
    4014:	3d 13       	cpse	r19, r29
    4016:	40 e0       	ldi	r20, 0x00	; 0
			DEBUG(F("|"));
		} else {
			DEBUG(F("|   -->"));
		}
		DEBUG(F("\tLine ")); DEBUG(l);
		if (displayLineCount < _lineCount)
    4018:	f8 01       	movw	r30, r16
    401a:	30 8d       	ldd	r19, Z+24	; 0x18
    401c:	88 0f       	add	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	b3 16       	cp	r11, r19
    4022:	30 f4       	brcc	.+12     	; 0x4030 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x84>
			_p_liquidLine[l]->_row = offsetRow;
    4024:	e8 0f       	add	r30, r24
    4026:	f9 1f       	adc	r31, r25
    4028:	01 90       	ld	r0, Z+
    402a:	f0 81       	ld	r31, Z
    402c:	e0 2d       	mov	r30, r0
    402e:	20 83       	st	Z, r18
		_p_liquidLine[l]->print(p_liquidCrystal, focus);
    4030:	f8 01       	movw	r30, r16
    4032:	e8 0f       	add	r30, r24
    4034:	f9 1f       	adc	r31, r25
    4036:	b6 01       	movw	r22, r12
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	07 de       	rcall	.-1010   	; 0x3c4c <_ZN10LiquidLine5printEP13LiquidCrystalb>
		lOffset = (_focus - displayLineCount) + 1;
		if ((displayLineCount + lOffset) > _lineCount)
			lOffset = (_lineCount - displayLineCount);
	}
	uint8_t offsetRow = 0;
	for (uint8_t l = lOffset; l < displayLineCount + lOffset; l++) {
    403e:	df 5f       	subi	r29, 0xFF	; 255
    4040:	df cf       	rjmp	.-66     	; 0x4000 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x54>
		if (displayLineCount < _lineCount)
			_p_liquidLine[l]->_row = offsetRow;
		_p_liquidLine[l]->print(p_liquidCrystal, focus);
		offsetRow++;
	}
}
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	df 90       	pop	r13
    4050:	cf 90       	pop	r12
    4052:	bf 90       	pop	r11
    4054:	08 95       	ret

00004056 <_ZN12LiquidScreen12switch_focusEb>:

void LiquidScreen::switch_focus(bool forward) {
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	ec 01       	movw	r28, r24
    405e:	16 2f       	mov	r17, r22
	print_me(reinterpret_cast<uintptr_t>(this));
    4060:	e7 db       	rcall	.-2098   	; 0x3830 <_Z8print_mej>
    4062:	89 8d       	ldd	r24, Y+25	; 0x19
	do {
		if (forward) {
    4064:	11 23       	and	r17, r17
    4066:	51 f0       	breq	.+20     	; 0x407c <_ZN12LiquidScreen12switch_focusEb+0x26>
			if (_focus < _lineCount) {
    4068:	98 8d       	ldd	r25, Y+24	; 0x18
    406a:	89 17       	cp	r24, r25
    406c:	28 f4       	brcc	.+10     	; 0x4078 <_ZN12LiquidScreen12switch_focusEb+0x22>
				_focus++;
    406e:	8f 5f       	subi	r24, 0xFF	; 255
    4070:	89 8f       	std	Y+25, r24	; 0x19
				if (_focus == _lineCount) {
    4072:	98 13       	cpse	r25, r24
    4074:	0a c0       	rjmp	.+20     	; 0x408a <_ZN12LiquidScreen12switch_focusEb+0x34>
    4076:	15 c0       	rjmp	.+42     	; 0x40a2 <_ZN12LiquidScreen12switch_focusEb+0x4c>
					break;
				}
			} else {
				_focus = 0;
    4078:	19 8e       	std	Y+25, r1	; 0x19
    407a:	07 c0       	rjmp	.+14     	; 0x408a <_ZN12LiquidScreen12switch_focusEb+0x34>
			}
		} else { //else (forward)
			if (_focus == 0) {
    407c:	81 11       	cpse	r24, r1
    407e:	03 c0       	rjmp	.+6      	; 0x4086 <_ZN12LiquidScreen12switch_focusEb+0x30>
				_focus = _lineCount;
    4080:	88 8d       	ldd	r24, Y+24	; 0x18
    4082:	89 8f       	std	Y+25, r24	; 0x19
				break;
    4084:	0e c0       	rjmp	.+28     	; 0x40a2 <_ZN12LiquidScreen12switch_focusEb+0x4c>
			} else {
				_focus--;
    4086:	81 50       	subi	r24, 0x01	; 1
    4088:	89 8f       	std	Y+25, r24	; 0x19
			}
		} //else (forward)
	} while (_p_liquidLine[_focus]->_focusable == false);
    408a:	89 8d       	ldd	r24, Y+25	; 0x19
    408c:	fe 01       	movw	r30, r28
    408e:	e8 0f       	add	r30, r24
    4090:	f1 1d       	adc	r31, r1
    4092:	e8 0f       	add	r30, r24
    4094:	f1 1d       	adc	r31, r1
    4096:	01 90       	ld	r0, Z+
    4098:	f0 81       	ld	r31, Z
    409a:	e0 2d       	mov	r30, r0
    409c:	86 a1       	ldd	r24, Z+38	; 0x26
    409e:	88 23       	and	r24, r24
    40a0:	01 f3       	breq	.-64     	; 0x4062 <_ZN12LiquidScreen12switch_focusEb+0xc>
	DEBUG(F("Focus switched to ")); DEBUGLN(_focus);
}
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	08 95       	ret

000040aa <_ZNK12LiquidScreen13call_functionEh>:

bool LiquidScreen::call_function(uint8_t number) const {
    40aa:	fc 01       	movw	r30, r24
	if (_focus != _lineCount) {
    40ac:	81 8d       	ldd	r24, Z+25	; 0x19
    40ae:	90 8d       	ldd	r25, Z+24	; 0x18
    40b0:	89 17       	cp	r24, r25
    40b2:	39 f0       	breq	.+14     	; 0x40c2 <_ZNK12LiquidScreen13call_functionEh+0x18>
		return _p_liquidLine[_focus]->call_function(number);
    40b4:	e8 0f       	add	r30, r24
    40b6:	f1 1d       	adc	r31, r1
    40b8:	e8 0f       	add	r30, r24
    40ba:	f1 1d       	adc	r31, r1
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	19 ce       	rjmp	.-974    	; 0x3cf4 <_ZNK10LiquidLine13call_functionEh>
	}
	return false;
}
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	08 95       	ret

000040c6 <_Z13recognizeTypePKc>:
}

DataType recognizeType(int32_t variable) {
	return DataType::INT32_T;
	variable = variable;
}
    40c6:	8e e3       	ldi	r24, 0x3E	; 62
    40c8:	08 95       	ret

000040ca <_Z13recognizeTypeh>:
    40ca:	89 e0       	ldi	r24, 0x09	; 9
    40cc:	08 95       	ret

000040ce <_Z13recognizeTypem>:

DataType recognizeType(uint32_t variable) {
	return DataType::UINT32_T;
	variable = variable;
}
    40ce:	81 e2       	ldi	r24, 0x21	; 33
    40d0:	08 95       	ret

000040d2 <_Z13recognizeTypef>:
    40d2:	82 e3       	ldi	r24, 0x32	; 50
    40d4:	08 95       	ret

000040d6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    40d6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    40d8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    40da:	f8 94       	cli
  if (!initialized) {
    40dc:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <_ZN8SPIClass11initializedE>
    40e0:	81 11       	cpse	r24, r1
    40e2:	23 c0       	rjmp	.+70     	; 0x412a <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    40e4:	e5 e1       	ldi	r30, 0x15	; 21
    40e6:	f3 e0       	ldi	r31, 0x03	; 3
    40e8:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    40ea:	ef ec       	ldi	r30, 0xCF	; 207
    40ec:	f2 e0       	ldi	r31, 0x02	; 2
    40ee:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    40f0:	e8 2f       	mov	r30, r24
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	ee 0f       	add	r30, r30
    40f6:	ff 1f       	adc	r31, r31
    40f8:	e0 5c       	subi	r30, 0xC0	; 192
    40fa:	fc 4f       	sbci	r31, 0xFC	; 252
    40fc:	a5 91       	lpm	r26, Z+
    40fe:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4100:	ec 91       	ld	r30, X
    4102:	e9 23       	and	r30, r25
    4104:	19 f4       	brne	.+6      	; 0x410c <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    4106:	61 e0       	ldi	r22, 0x01	; 1
    4108:	85 e3       	ldi	r24, 0x35	; 53
    410a:	ce d9       	rcall	.-3172   	; 0x34a8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    410c:	61 e0       	ldi	r22, 0x01	; 1
    410e:	85 e3       	ldi	r24, 0x35	; 53
    4110:	8f d9       	rcall	.-3298   	; 0x3430 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4112:	8c b5       	in	r24, 0x2c	; 44
    4114:	80 61       	ori	r24, 0x10	; 16
    4116:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4118:	8c b5       	in	r24, 0x2c	; 44
    411a:	80 64       	ori	r24, 0x40	; 64
    411c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    411e:	61 e0       	ldi	r22, 0x01	; 1
    4120:	84 e3       	ldi	r24, 0x34	; 52
    4122:	86 d9       	rcall	.-3316   	; 0x3430 <pinMode>
    pinMode(MOSI, OUTPUT);
    4124:	61 e0       	ldi	r22, 0x01	; 1
    4126:	83 e3       	ldi	r24, 0x33	; 51
    4128:	83 d9       	rcall	.-3322   	; 0x3430 <pinMode>
    412a:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    412e:	8f 5f       	subi	r24, 0xFF	; 255
    4130:	80 93 5f 0a 	sts	0x0A5F, r24	; 0x800a5f <_ZN8SPIClass11initializedE>
    4134:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    4136:	cf 91       	pop	r28
}
    4138:	08 95       	ret

0000413a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    413a:	08 95       	ret

0000413c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    413c:	cf 92       	push	r12
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	6c 01       	movw	r12, r24
    414e:	7a 01       	movw	r14, r20
    4150:	8b 01       	movw	r16, r22
    4152:	c0 e0       	ldi	r28, 0x00	; 0
    4154:	d0 e0       	ldi	r29, 0x00	; 0
    4156:	ce 15       	cp	r28, r14
    4158:	df 05       	cpc	r29, r15
    415a:	81 f0       	breq	.+32     	; 0x417c <_ZN5Print5writeEPKhj+0x40>
    415c:	d8 01       	movw	r26, r16
    415e:	6d 91       	ld	r22, X+
    4160:	8d 01       	movw	r16, r26
    4162:	d6 01       	movw	r26, r12
    4164:	ed 91       	ld	r30, X+
    4166:	fc 91       	ld	r31, X
    4168:	01 90       	ld	r0, Z+
    416a:	f0 81       	ld	r31, Z
    416c:	e0 2d       	mov	r30, r0
    416e:	c6 01       	movw	r24, r12
    4170:	19 95       	eicall
    4172:	89 2b       	or	r24, r25
    4174:	11 f0       	breq	.+4      	; 0x417a <_ZN5Print5writeEPKhj+0x3e>
    4176:	21 96       	adiw	r28, 0x01	; 1
    4178:	ee cf       	rjmp	.-36     	; 0x4156 <_ZN5Print5writeEPKhj+0x1a>
    417a:	7e 01       	movw	r14, r28
    417c:	c7 01       	movw	r24, r14
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	ff 90       	pop	r15
    4188:	ef 90       	pop	r14
    418a:	df 90       	pop	r13
    418c:	cf 90       	pop	r12
    418e:	08 95       	ret

00004190 <_ZN5Print5writeEPKc>:
    4190:	61 15       	cp	r22, r1
    4192:	71 05       	cpc	r23, r1
    4194:	79 f0       	breq	.+30     	; 0x41b4 <_ZN5Print5writeEPKc+0x24>
    4196:	fb 01       	movw	r30, r22
    4198:	01 90       	ld	r0, Z+
    419a:	00 20       	and	r0, r0
    419c:	e9 f7       	brne	.-6      	; 0x4198 <_ZN5Print5writeEPKc+0x8>
    419e:	31 97       	sbiw	r30, 0x01	; 1
    41a0:	af 01       	movw	r20, r30
    41a2:	46 1b       	sub	r20, r22
    41a4:	57 0b       	sbc	r21, r23
    41a6:	dc 01       	movw	r26, r24
    41a8:	ed 91       	ld	r30, X+
    41aa:	fc 91       	ld	r31, X
    41ac:	02 80       	ldd	r0, Z+2	; 0x02
    41ae:	f3 81       	ldd	r31, Z+3	; 0x03
    41b0:	e0 2d       	mov	r30, r0
    41b2:	19 94       	eijmp
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	08 95       	ret

000041ba <_ZN5Print5printEPKc>:
    41ba:	ea cf       	rjmp	.-44     	; 0x4190 <_ZN5Print5writeEPKc>

000041bc <_ZN5Print5printEc>:
    41bc:	dc 01       	movw	r26, r24
    41be:	ed 91       	ld	r30, X+
    41c0:	fc 91       	ld	r31, X
    41c2:	01 90       	ld	r0, Z+
    41c4:	f0 81       	ld	r31, Z
    41c6:	e0 2d       	mov	r30, r0
    41c8:	19 94       	eijmp

000041ca <_ZN5Print11printNumberEmh>:
    41ca:	8f 92       	push	r8
    41cc:	9f 92       	push	r9
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	ef 92       	push	r14
    41d4:	ff 92       	push	r15
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	a1 97       	sbiw	r28, 0x21	; 33
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	7c 01       	movw	r14, r24
    41f0:	fa 01       	movw	r30, r20
    41f2:	cb 01       	movw	r24, r22
    41f4:	19 a2       	std	Y+33, r1	; 0x21
    41f6:	22 30       	cpi	r18, 0x02	; 2
    41f8:	08 f4       	brcc	.+2      	; 0x41fc <_ZN5Print11printNumberEmh+0x32>
    41fa:	2a e0       	ldi	r18, 0x0A	; 10
    41fc:	8e 01       	movw	r16, r28
    41fe:	0f 5d       	subi	r16, 0xDF	; 223
    4200:	1f 4f       	sbci	r17, 0xFF	; 255
    4202:	82 2e       	mov	r8, r18
    4204:	91 2c       	mov	r9, r1
    4206:	a1 2c       	mov	r10, r1
    4208:	b1 2c       	mov	r11, r1
    420a:	bf 01       	movw	r22, r30
    420c:	a5 01       	movw	r20, r10
    420e:	94 01       	movw	r18, r8
    4210:	b5 d1       	rcall	.+874    	; 0x457c <__udivmodsi4>
    4212:	f9 01       	movw	r30, r18
    4214:	ca 01       	movw	r24, r20
    4216:	01 50       	subi	r16, 0x01	; 1
    4218:	11 09       	sbc	r17, r1
    421a:	6a 30       	cpi	r22, 0x0A	; 10
    421c:	10 f4       	brcc	.+4      	; 0x4222 <_ZN5Print11printNumberEmh+0x58>
    421e:	60 5d       	subi	r22, 0xD0	; 208
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <_ZN5Print11printNumberEmh+0x5a>
    4222:	69 5c       	subi	r22, 0xC9	; 201
    4224:	d8 01       	movw	r26, r16
    4226:	6c 93       	st	X, r22
    4228:	23 2b       	or	r18, r19
    422a:	24 2b       	or	r18, r20
    422c:	25 2b       	or	r18, r21
    422e:	69 f7       	brne	.-38     	; 0x420a <_ZN5Print11printNumberEmh+0x40>
    4230:	b8 01       	movw	r22, r16
    4232:	c7 01       	movw	r24, r14
    4234:	ad df       	rcall	.-166    	; 0x4190 <_ZN5Print5writeEPKc>
    4236:	a1 96       	adiw	r28, 0x21	; 33
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	f8 94       	cli
    423c:	de bf       	out	0x3e, r29	; 62
    423e:	0f be       	out	0x3f, r0	; 63
    4240:	cd bf       	out	0x3d, r28	; 61
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	bf 90       	pop	r11
    4250:	af 90       	pop	r10
    4252:	9f 90       	pop	r9
    4254:	8f 90       	pop	r8
    4256:	08 95       	ret

00004258 <_ZN5Print5printEmi>:
    4258:	21 15       	cp	r18, r1
    425a:	31 05       	cpc	r19, r1
    425c:	41 f4       	brne	.+16     	; 0x426e <_ZN5Print5printEmi+0x16>
    425e:	dc 01       	movw	r26, r24
    4260:	ed 91       	ld	r30, X+
    4262:	fc 91       	ld	r31, X
    4264:	01 90       	ld	r0, Z+
    4266:	f0 81       	ld	r31, Z
    4268:	e0 2d       	mov	r30, r0
    426a:	64 2f       	mov	r22, r20
    426c:	19 94       	eijmp
    426e:	ad cf       	rjmp	.-166    	; 0x41ca <_ZN5Print11printNumberEmh>

00004270 <_ZN5Print5printEhi>:
    4270:	9a 01       	movw	r18, r20
    4272:	46 2f       	mov	r20, r22
    4274:	50 e0       	ldi	r21, 0x00	; 0
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	ee cf       	rjmp	.-36     	; 0x4258 <_ZN5Print5printEmi>

0000427c <_ZN5Print5printEji>:
    427c:	9a 01       	movw	r18, r20
    427e:	ab 01       	movw	r20, r22
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	e9 cf       	rjmp	.-46     	; 0x4258 <_ZN5Print5printEmi>

00004286 <_ZN5Print5printEli>:
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	21 15       	cp	r18, r1
    4298:	31 05       	cpc	r19, r1
    429a:	81 f4       	brne	.+32     	; 0x42bc <_ZN5Print5printEli+0x36>
    429c:	dc 01       	movw	r26, r24
    429e:	ed 91       	ld	r30, X+
    42a0:	fc 91       	ld	r31, X
    42a2:	01 90       	ld	r0, Z+
    42a4:	f0 81       	ld	r31, Z
    42a6:	e0 2d       	mov	r30, r0
    42a8:	64 2f       	mov	r22, r20
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	ff 90       	pop	r15
    42b4:	ef 90       	pop	r14
    42b6:	df 90       	pop	r13
    42b8:	cf 90       	pop	r12
    42ba:	19 94       	eijmp
    42bc:	2a 30       	cpi	r18, 0x0A	; 10
    42be:	31 05       	cpc	r19, r1
    42c0:	f1 f4       	brne	.+60     	; 0x42fe <_ZN5Print5printEli+0x78>
    42c2:	77 ff       	sbrs	r23, 7
    42c4:	1b c0       	rjmp	.+54     	; 0x42fc <_ZN5Print5printEli+0x76>
    42c6:	6a 01       	movw	r12, r20
    42c8:	7b 01       	movw	r14, r22
    42ca:	ec 01       	movw	r28, r24
    42cc:	6d e2       	ldi	r22, 0x2D	; 45
    42ce:	76 df       	rcall	.-276    	; 0x41bc <_ZN5Print5printEc>
    42d0:	8c 01       	movw	r16, r24
    42d2:	44 27       	eor	r20, r20
    42d4:	55 27       	eor	r21, r21
    42d6:	ba 01       	movw	r22, r20
    42d8:	4c 19       	sub	r20, r12
    42da:	5d 09       	sbc	r21, r13
    42dc:	6e 09       	sbc	r22, r14
    42de:	7f 09       	sbc	r23, r15
    42e0:	2a e0       	ldi	r18, 0x0A	; 10
    42e2:	ce 01       	movw	r24, r28
    42e4:	72 df       	rcall	.-284    	; 0x41ca <_ZN5Print11printNumberEmh>
    42e6:	80 0f       	add	r24, r16
    42e8:	91 1f       	adc	r25, r17
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	df 90       	pop	r13
    42f8:	cf 90       	pop	r12
    42fa:	08 95       	ret
    42fc:	2a e0       	ldi	r18, 0x0A	; 10
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	df 90       	pop	r13
    430c:	cf 90       	pop	r12
    430e:	5d cf       	rjmp	.-326    	; 0x41ca <_ZN5Print11printNumberEmh>

00004310 <_ZN5Print5printEii>:
    4310:	9a 01       	movw	r18, r20
    4312:	ab 01       	movw	r20, r22
    4314:	77 0f       	add	r23, r23
    4316:	66 0b       	sbc	r22, r22
    4318:	77 0b       	sbc	r23, r23
    431a:	b5 cf       	rjmp	.-150    	; 0x4286 <_ZN5Print5printEli>

0000431c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    431c:	7f 92       	push	r7
    431e:	8f 92       	push	r8
    4320:	9f 92       	push	r9
    4322:	af 92       	push	r10
    4324:	bf 92       	push	r11
    4326:	cf 92       	push	r12
    4328:	df 92       	push	r13
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	8c 01       	movw	r16, r24
    4338:	6a 01       	movw	r12, r20
    433a:	7b 01       	movw	r14, r22
    433c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    433e:	9a 01       	movw	r18, r20
    4340:	ab 01       	movw	r20, r22
    4342:	c7 01       	movw	r24, r14
    4344:	b6 01       	movw	r22, r12
    4346:	e7 d0       	rcall	.+462    	; 0x4516 <__unordsf2>
    4348:	88 23       	and	r24, r24
    434a:	19 f0       	breq	.+6      	; 0x4352 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    434c:	62 e6       	ldi	r22, 0x62	; 98
    434e:	72 e0       	ldi	r23, 0x02	; 2
    4350:	24 c0       	rjmp	.+72     	; 0x439a <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    4352:	46 01       	movw	r8, r12
    4354:	57 01       	movw	r10, r14
    4356:	e8 94       	clt
    4358:	b7 f8       	bld	r11, 7
    435a:	2f ef       	ldi	r18, 0xFF	; 255
    435c:	3f ef       	ldi	r19, 0xFF	; 255
    435e:	4f e7       	ldi	r20, 0x7F	; 127
    4360:	5f e7       	ldi	r21, 0x7F	; 127
    4362:	c5 01       	movw	r24, r10
    4364:	b4 01       	movw	r22, r8
    4366:	d7 d0       	rcall	.+430    	; 0x4516 <__unordsf2>
    4368:	81 11       	cpse	r24, r1
    436a:	0c c0       	rjmp	.+24     	; 0x4384 <_ZN5Print10printFloatEdh+0x68>
    436c:	2f ef       	ldi	r18, 0xFF	; 255
    436e:	3f ef       	ldi	r19, 0xFF	; 255
    4370:	4f e7       	ldi	r20, 0x7F	; 127
    4372:	5f e7       	ldi	r21, 0x7F	; 127
    4374:	c5 01       	movw	r24, r10
    4376:	b4 01       	movw	r22, r8
    4378:	a2 d0       	rcall	.+324    	; 0x44be <__cmpsf2>
    437a:	18 16       	cp	r1, r24
    437c:	1c f4       	brge	.+6      	; 0x4384 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    437e:	66 e6       	ldi	r22, 0x66	; 102
    4380:	72 e0       	ldi	r23, 0x02	; 2
    4382:	0b c0       	rjmp	.+22     	; 0x439a <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4384:	2f ef       	ldi	r18, 0xFF	; 255
    4386:	3f ef       	ldi	r19, 0xFF	; 255
    4388:	4f e7       	ldi	r20, 0x7F	; 127
    438a:	5f e4       	ldi	r21, 0x4F	; 79
    438c:	c7 01       	movw	r24, r14
    438e:	b6 01       	movw	r22, r12
    4390:	be d0       	rcall	.+380    	; 0x450e <__gesf2>
    4392:	18 16       	cp	r1, r24
    4394:	8c f4       	brge	.+34     	; 0x43b8 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4396:	6a e6       	ldi	r22, 0x6A	; 106
    4398:	72 e0       	ldi	r23, 0x02	; 2
    439a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    439c:	df 91       	pop	r29
    439e:	cf 91       	pop	r28
    43a0:	1f 91       	pop	r17
    43a2:	0f 91       	pop	r16
    43a4:	ff 90       	pop	r15
    43a6:	ef 90       	pop	r14
    43a8:	df 90       	pop	r13
    43aa:	cf 90       	pop	r12
    43ac:	bf 90       	pop	r11
    43ae:	af 90       	pop	r10
    43b0:	9f 90       	pop	r9
    43b2:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    43b4:	7f 90       	pop	r7
    43b6:	ec ce       	rjmp	.-552    	; 0x4190 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    43b8:	2f ef       	ldi	r18, 0xFF	; 255
    43ba:	3f ef       	ldi	r19, 0xFF	; 255
    43bc:	4f e7       	ldi	r20, 0x7F	; 127
    43be:	5f ec       	ldi	r21, 0xCF	; 207
    43c0:	c7 01       	movw	r24, r14
    43c2:	b6 01       	movw	r22, r12
    43c4:	7c d0       	rcall	.+248    	; 0x44be <__cmpsf2>
    43c6:	87 fd       	sbrc	r24, 7
    43c8:	e6 cf       	rjmp	.-52     	; 0x4396 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	a9 01       	movw	r20, r18
    43d0:	c7 01       	movw	r24, r14
    43d2:	b6 01       	movw	r22, r12
    43d4:	74 d0       	rcall	.+232    	; 0x44be <__cmpsf2>
    43d6:	87 ff       	sbrs	r24, 7
    43d8:	09 c0       	rjmp	.+18     	; 0x43ec <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    43da:	6d e2       	ldi	r22, 0x2D	; 45
    43dc:	c8 01       	movw	r24, r16
    43de:	ee de       	rcall	.-548    	; 0x41bc <_ZN5Print5printEc>
    43e0:	ec 01       	movw	r28, r24
    43e2:	f7 fa       	bst	r15, 7
     number = -number;
    43e4:	f0 94       	com	r15
    43e6:	f7 f8       	bld	r15, 7
    43e8:	f0 94       	com	r15
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <_ZN5Print10printFloatEdh+0xd4>
    43ec:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    43ee:	d0 e0       	ldi	r29, 0x00	; 0
    43f0:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43f2:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    43f4:	70 e0       	ldi	r23, 0x00	; 0
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	9f e3       	ldi	r25, 0x3F	; 63
    43fa:	7b 14       	cp	r7, r11
  for (uint8_t i=0; i<digits; ++i)
    43fc:	41 f0       	breq	.+16     	; 0x440e <_ZN5Print10printFloatEdh+0xf2>
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    rounding /= 10.0;
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e2       	ldi	r20, 0x20	; 32
    4404:	51 e4       	ldi	r21, 0x41	; 65
    4406:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__divsf3>
    440a:	b3 94       	inc	r11
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    440c:	f6 cf       	rjmp	.-20     	; 0x43fa <_ZN5Print10printFloatEdh+0xde>
    440e:	a7 01       	movw	r20, r14
    rounding /= 10.0;
  
  number += rounding;
    4410:	96 01       	movw	r18, r12
    4412:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__addsf3>
    4416:	6b 01       	movw	r12, r22
    4418:	7c 01       	movw	r14, r24
    441a:	0e 94 76 17 	call	0x2eec	; 0x2eec <__fixunssfsi>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    441e:	4b 01       	movw	r8, r22
    4420:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4422:	2a e0       	ldi	r18, 0x0A	; 10
    4424:	ab 01       	movw	r20, r22
    4426:	bc 01       	movw	r22, r24
    4428:	c8 01       	movw	r24, r16
    442a:	cf de       	rcall	.-610    	; 0x41ca <_ZN5Print11printNumberEmh>
    442c:	c8 0f       	add	r28, r24
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    442e:	d9 1f       	adc	r29, r25
    4430:	77 20       	and	r7, r7

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4432:	a9 f1       	breq	.+106    	; 0x449e <_ZN5Print10printFloatEdh+0x182>
    4434:	c5 01       	movw	r24, r10
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4436:	b4 01       	movw	r22, r8
    4438:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatunsisf>
    443c:	9b 01       	movw	r18, r22
    443e:	ac 01       	movw	r20, r24
    4440:	c7 01       	movw	r24, r14
    4442:	b6 01       	movw	r22, r12
    4444:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__subsf3>
    4448:	6b 01       	movw	r12, r22
    444a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    444c:	6e e2       	ldi	r22, 0x2E	; 46
    444e:	c8 01       	movw	r24, r16
    4450:	b5 de       	rcall	.-662    	; 0x41bc <_ZN5Print5printEc>
    4452:	c8 0f       	add	r28, r24
    4454:	d9 1f       	adc	r29, r25
    4456:	20 e0       	ldi	r18, 0x00	; 0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e2       	ldi	r20, 0x20	; 32
    445c:	51 e4       	ldi	r21, 0x41	; 65
    445e:	c7 01       	movw	r24, r14
    4460:	b6 01       	movw	r22, r12
    4462:	0e 94 30 18 	call	0x3060	; 0x3060 <__mulsf3>
    4466:	4b 01       	movw	r8, r22
    4468:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    446a:	0e 94 76 17 	call	0x2eec	; 0x2eec <__fixunssfsi>
    446e:	6b 01       	movw	r12, r22
    4470:	7c 01       	movw	r14, r24
    n += print(toPrint);
    4472:	4a e0       	ldi	r20, 0x0A	; 10
    4474:	50 e0       	ldi	r21, 0x00	; 0
    4476:	c8 01       	movw	r24, r16
    4478:	01 df       	rcall	.-510    	; 0x427c <_ZN5Print5printEji>
    447a:	c8 0f       	add	r28, r24
    447c:	d9 1f       	adc	r29, r25
    447e:	b6 01       	movw	r22, r12
    remainder -= toPrint; 
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatunsisf>
    4488:	9b 01       	movw	r18, r22
    448a:	ac 01       	movw	r20, r24
    448c:	c5 01       	movw	r24, r10
    448e:	b4 01       	movw	r22, r8
    4490:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__subsf3>
    4494:	6b 01       	movw	r12, r22
    4496:	7c 01       	movw	r14, r24
    4498:	7a 94       	dec	r7
    449a:	71 10       	cpse	r7, r1
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    449c:	dc cf       	rjmp	.-72     	; 0x4456 <_ZN5Print10printFloatEdh+0x13a>
    449e:	ce 01       	movw	r24, r28
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    44a0:	df 91       	pop	r29
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    44a2:	cf 91       	pop	r28
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	df 90       	pop	r13
    44ae:	cf 90       	pop	r12
    44b0:	bf 90       	pop	r11
    44b2:	af 90       	pop	r10
    44b4:	9f 90       	pop	r9
    44b6:	8f 90       	pop	r8
    44b8:	7f 90       	pop	r7
    44ba:	08 95       	ret

000044bc <_ZN5Print5printEdi>:
    44bc:	2f cf       	rjmp	.-418    	; 0x431c <_ZN5Print10printFloatEdh>

000044be <__cmpsf2>:
    44be:	03 d0       	rcall	.+6      	; 0x44c6 <__fp_cmp>
    44c0:	08 f4       	brcc	.+2      	; 0x44c4 <__cmpsf2+0x6>
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	08 95       	ret

000044c6 <__fp_cmp>:
    44c6:	99 0f       	add	r25, r25
    44c8:	00 08       	sbc	r0, r0
    44ca:	55 0f       	add	r21, r21
    44cc:	aa 0b       	sbc	r26, r26
    44ce:	e0 e8       	ldi	r30, 0x80	; 128
    44d0:	fe ef       	ldi	r31, 0xFE	; 254
    44d2:	16 16       	cp	r1, r22
    44d4:	17 06       	cpc	r1, r23
    44d6:	e8 07       	cpc	r30, r24
    44d8:	f9 07       	cpc	r31, r25
    44da:	c0 f0       	brcs	.+48     	; 0x450c <__fp_cmp+0x46>
    44dc:	12 16       	cp	r1, r18
    44de:	13 06       	cpc	r1, r19
    44e0:	e4 07       	cpc	r30, r20
    44e2:	f5 07       	cpc	r31, r21
    44e4:	98 f0       	brcs	.+38     	; 0x450c <__fp_cmp+0x46>
    44e6:	62 1b       	sub	r22, r18
    44e8:	73 0b       	sbc	r23, r19
    44ea:	84 0b       	sbc	r24, r20
    44ec:	95 0b       	sbc	r25, r21
    44ee:	39 f4       	brne	.+14     	; 0x44fe <__fp_cmp+0x38>
    44f0:	0a 26       	eor	r0, r26
    44f2:	61 f0       	breq	.+24     	; 0x450c <__fp_cmp+0x46>
    44f4:	23 2b       	or	r18, r19
    44f6:	24 2b       	or	r18, r20
    44f8:	25 2b       	or	r18, r21
    44fa:	21 f4       	brne	.+8      	; 0x4504 <__fp_cmp+0x3e>
    44fc:	08 95       	ret
    44fe:	0a 26       	eor	r0, r26
    4500:	09 f4       	brne	.+2      	; 0x4504 <__fp_cmp+0x3e>
    4502:	a1 40       	sbci	r26, 0x01	; 1
    4504:	a6 95       	lsr	r26
    4506:	8f ef       	ldi	r24, 0xFF	; 255
    4508:	81 1d       	adc	r24, r1
    450a:	81 1d       	adc	r24, r1
    450c:	08 95       	ret

0000450e <__gesf2>:
    450e:	db df       	rcall	.-74     	; 0x44c6 <__fp_cmp>
    4510:	08 f4       	brcc	.+2      	; 0x4514 <__gesf2+0x6>
    4512:	8f ef       	ldi	r24, 0xFF	; 255
    4514:	08 95       	ret

00004516 <__unordsf2>:
    4516:	d7 df       	rcall	.-82     	; 0x44c6 <__fp_cmp>
    4518:	88 0b       	sbc	r24, r24
    451a:	99 0b       	sbc	r25, r25
    451c:	08 95       	ret

0000451e <__mulsi3>:
    451e:	db 01       	movw	r26, r22
    4520:	8f 93       	push	r24
    4522:	9f 93       	push	r25
    4524:	86 d0       	rcall	.+268    	; 0x4632 <__muluhisi3>
    4526:	bf 91       	pop	r27
    4528:	af 91       	pop	r26
    452a:	a2 9f       	mul	r26, r18
    452c:	80 0d       	add	r24, r0
    452e:	91 1d       	adc	r25, r1
    4530:	a3 9f       	mul	r26, r19
    4532:	90 0d       	add	r25, r0
    4534:	b2 9f       	mul	r27, r18
    4536:	90 0d       	add	r25, r0
    4538:	11 24       	eor	r1, r1
    453a:	08 95       	ret

0000453c <__udivmodqi4>:
    453c:	99 1b       	sub	r25, r25
    453e:	79 e0       	ldi	r23, 0x09	; 9
    4540:	04 c0       	rjmp	.+8      	; 0x454a <__udivmodqi4_ep>

00004542 <__udivmodqi4_loop>:
    4542:	99 1f       	adc	r25, r25
    4544:	96 17       	cp	r25, r22
    4546:	08 f0       	brcs	.+2      	; 0x454a <__udivmodqi4_ep>
    4548:	96 1b       	sub	r25, r22

0000454a <__udivmodqi4_ep>:
    454a:	88 1f       	adc	r24, r24
    454c:	7a 95       	dec	r23
    454e:	c9 f7       	brne	.-14     	; 0x4542 <__udivmodqi4_loop>
    4550:	80 95       	com	r24
    4552:	08 95       	ret

00004554 <__udivmodhi4>:
    4554:	aa 1b       	sub	r26, r26
    4556:	bb 1b       	sub	r27, r27
    4558:	51 e1       	ldi	r21, 0x11	; 17
    455a:	07 c0       	rjmp	.+14     	; 0x456a <__udivmodhi4_ep>

0000455c <__udivmodhi4_loop>:
    455c:	aa 1f       	adc	r26, r26
    455e:	bb 1f       	adc	r27, r27
    4560:	a6 17       	cp	r26, r22
    4562:	b7 07       	cpc	r27, r23
    4564:	10 f0       	brcs	.+4      	; 0x456a <__udivmodhi4_ep>
    4566:	a6 1b       	sub	r26, r22
    4568:	b7 0b       	sbc	r27, r23

0000456a <__udivmodhi4_ep>:
    456a:	88 1f       	adc	r24, r24
    456c:	99 1f       	adc	r25, r25
    456e:	5a 95       	dec	r21
    4570:	a9 f7       	brne	.-22     	; 0x455c <__udivmodhi4_loop>
    4572:	80 95       	com	r24
    4574:	90 95       	com	r25
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	08 95       	ret

0000457c <__udivmodsi4>:
    457c:	a1 e2       	ldi	r26, 0x21	; 33
    457e:	1a 2e       	mov	r1, r26
    4580:	aa 1b       	sub	r26, r26
    4582:	bb 1b       	sub	r27, r27
    4584:	fd 01       	movw	r30, r26
    4586:	0d c0       	rjmp	.+26     	; 0x45a2 <__udivmodsi4_ep>

00004588 <__udivmodsi4_loop>:
    4588:	aa 1f       	adc	r26, r26
    458a:	bb 1f       	adc	r27, r27
    458c:	ee 1f       	adc	r30, r30
    458e:	ff 1f       	adc	r31, r31
    4590:	a2 17       	cp	r26, r18
    4592:	b3 07       	cpc	r27, r19
    4594:	e4 07       	cpc	r30, r20
    4596:	f5 07       	cpc	r31, r21
    4598:	20 f0       	brcs	.+8      	; 0x45a2 <__udivmodsi4_ep>
    459a:	a2 1b       	sub	r26, r18
    459c:	b3 0b       	sbc	r27, r19
    459e:	e4 0b       	sbc	r30, r20
    45a0:	f5 0b       	sbc	r31, r21

000045a2 <__udivmodsi4_ep>:
    45a2:	66 1f       	adc	r22, r22
    45a4:	77 1f       	adc	r23, r23
    45a6:	88 1f       	adc	r24, r24
    45a8:	99 1f       	adc	r25, r25
    45aa:	1a 94       	dec	r1
    45ac:	69 f7       	brne	.-38     	; 0x4588 <__udivmodsi4_loop>
    45ae:	60 95       	com	r22
    45b0:	70 95       	com	r23
    45b2:	80 95       	com	r24
    45b4:	90 95       	com	r25
    45b6:	9b 01       	movw	r18, r22
    45b8:	ac 01       	movw	r20, r24
    45ba:	bd 01       	movw	r22, r26
    45bc:	cf 01       	movw	r24, r30
    45be:	08 95       	ret

000045c0 <__divmodsi4>:
    45c0:	05 2e       	mov	r0, r21
    45c2:	97 fb       	bst	r25, 7
    45c4:	16 f4       	brtc	.+4      	; 0x45ca <__divmodsi4+0xa>
    45c6:	00 94       	com	r0
    45c8:	0f d0       	rcall	.+30     	; 0x45e8 <__negsi2>
    45ca:	57 fd       	sbrc	r21, 7
    45cc:	05 d0       	rcall	.+10     	; 0x45d8 <__divmodsi4_neg2>
    45ce:	d6 df       	rcall	.-84     	; 0x457c <__udivmodsi4>
    45d0:	07 fc       	sbrc	r0, 7
    45d2:	02 d0       	rcall	.+4      	; 0x45d8 <__divmodsi4_neg2>
    45d4:	46 f4       	brtc	.+16     	; 0x45e6 <__divmodsi4_exit>
    45d6:	08 c0       	rjmp	.+16     	; 0x45e8 <__negsi2>

000045d8 <__divmodsi4_neg2>:
    45d8:	50 95       	com	r21
    45da:	40 95       	com	r20
    45dc:	30 95       	com	r19
    45de:	21 95       	neg	r18
    45e0:	3f 4f       	sbci	r19, 0xFF	; 255
    45e2:	4f 4f       	sbci	r20, 0xFF	; 255
    45e4:	5f 4f       	sbci	r21, 0xFF	; 255

000045e6 <__divmodsi4_exit>:
    45e6:	08 95       	ret

000045e8 <__negsi2>:
    45e8:	90 95       	com	r25
    45ea:	80 95       	com	r24
    45ec:	70 95       	com	r23
    45ee:	61 95       	neg	r22
    45f0:	7f 4f       	sbci	r23, 0xFF	; 255
    45f2:	8f 4f       	sbci	r24, 0xFF	; 255
    45f4:	9f 4f       	sbci	r25, 0xFF	; 255
    45f6:	08 95       	ret

000045f8 <__tablejump2__>:
    45f8:	ee 0f       	add	r30, r30
    45fa:	ff 1f       	adc	r31, r31
    45fc:	88 1f       	adc	r24, r24
    45fe:	8b bf       	out	0x3b, r24	; 59
    4600:	07 90       	elpm	r0, Z+
    4602:	f6 91       	elpm	r31, Z
    4604:	e0 2d       	mov	r30, r0
    4606:	19 94       	eijmp

00004608 <__umulhisi3>:
    4608:	a2 9f       	mul	r26, r18
    460a:	b0 01       	movw	r22, r0
    460c:	b3 9f       	mul	r27, r19
    460e:	c0 01       	movw	r24, r0
    4610:	a3 9f       	mul	r26, r19
    4612:	70 0d       	add	r23, r0
    4614:	81 1d       	adc	r24, r1
    4616:	11 24       	eor	r1, r1
    4618:	91 1d       	adc	r25, r1
    461a:	b2 9f       	mul	r27, r18
    461c:	70 0d       	add	r23, r0
    461e:	81 1d       	adc	r24, r1
    4620:	11 24       	eor	r1, r1
    4622:	91 1d       	adc	r25, r1
    4624:	08 95       	ret

00004626 <__usmulhisi3>:
    4626:	f0 df       	rcall	.-32     	; 0x4608 <__umulhisi3>

00004628 <__usmulhisi3_tail>:
    4628:	b7 ff       	sbrs	r27, 7
    462a:	08 95       	ret
    462c:	82 1b       	sub	r24, r18
    462e:	93 0b       	sbc	r25, r19
    4630:	08 95       	ret

00004632 <__muluhisi3>:
    4632:	ea df       	rcall	.-44     	; 0x4608 <__umulhisi3>
    4634:	a5 9f       	mul	r26, r21
    4636:	90 0d       	add	r25, r0
    4638:	b4 9f       	mul	r27, r20
    463a:	90 0d       	add	r25, r0
    463c:	a4 9f       	mul	r26, r20
    463e:	80 0d       	add	r24, r0
    4640:	91 1d       	adc	r25, r1
    4642:	11 24       	eor	r1, r1
    4644:	08 95       	ret

00004646 <__muldi3>:
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	1f 93       	push	r17
    464c:	0f 93       	push	r16
    464e:	9a 9d       	mul	r25, r10
    4650:	f0 2d       	mov	r31, r0
    4652:	21 9f       	mul	r18, r17
    4654:	f0 0d       	add	r31, r0
    4656:	8b 9d       	mul	r24, r11
    4658:	f0 0d       	add	r31, r0
    465a:	8a 9d       	mul	r24, r10
    465c:	e0 2d       	mov	r30, r0
    465e:	f1 0d       	add	r31, r1
    4660:	03 9f       	mul	r16, r19
    4662:	f0 0d       	add	r31, r0
    4664:	02 9f       	mul	r16, r18
    4666:	e0 0d       	add	r30, r0
    4668:	f1 1d       	adc	r31, r1
    466a:	4e 9d       	mul	r20, r14
    466c:	e0 0d       	add	r30, r0
    466e:	f1 1d       	adc	r31, r1
    4670:	5e 9d       	mul	r21, r14
    4672:	f0 0d       	add	r31, r0
    4674:	4f 9d       	mul	r20, r15
    4676:	f0 0d       	add	r31, r0
    4678:	7f 93       	push	r23
    467a:	6f 93       	push	r22
    467c:	bf 92       	push	r11
    467e:	af 92       	push	r10
    4680:	5f 93       	push	r21
    4682:	4f 93       	push	r20
    4684:	d5 01       	movw	r26, r10
    4686:	c0 df       	rcall	.-128    	; 0x4608 <__umulhisi3>
    4688:	8b 01       	movw	r16, r22
    468a:	ac 01       	movw	r20, r24
    468c:	d7 01       	movw	r26, r14
    468e:	bc df       	rcall	.-136    	; 0x4608 <__umulhisi3>
    4690:	eb 01       	movw	r28, r22
    4692:	e8 0f       	add	r30, r24
    4694:	f9 1f       	adc	r31, r25
    4696:	d6 01       	movw	r26, r12
    4698:	1f d0       	rcall	.+62     	; 0x46d8 <__muldi3_6>
    469a:	2f 91       	pop	r18
    469c:	3f 91       	pop	r19
    469e:	d6 01       	movw	r26, r12
    46a0:	b3 df       	rcall	.-154    	; 0x4608 <__umulhisi3>
    46a2:	c6 0f       	add	r28, r22
    46a4:	d7 1f       	adc	r29, r23
    46a6:	e8 1f       	adc	r30, r24
    46a8:	f9 1f       	adc	r31, r25
    46aa:	af 91       	pop	r26
    46ac:	bf 91       	pop	r27
    46ae:	14 d0       	rcall	.+40     	; 0x46d8 <__muldi3_6>
    46b0:	2f 91       	pop	r18
    46b2:	3f 91       	pop	r19
    46b4:	a9 df       	rcall	.-174    	; 0x4608 <__umulhisi3>
    46b6:	c6 0f       	add	r28, r22
    46b8:	d7 1f       	adc	r29, r23
    46ba:	e8 1f       	adc	r30, r24
    46bc:	f9 1f       	adc	r31, r25
    46be:	d6 01       	movw	r26, r12
    46c0:	a3 df       	rcall	.-186    	; 0x4608 <__umulhisi3>
    46c2:	e6 0f       	add	r30, r22
    46c4:	f7 1f       	adc	r31, r23
    46c6:	98 01       	movw	r18, r16
    46c8:	be 01       	movw	r22, r28
    46ca:	cf 01       	movw	r24, r30
    46cc:	11 24       	eor	r1, r1
    46ce:	0f 91       	pop	r16
    46d0:	1f 91       	pop	r17
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <__muldi3_6>:
    46d8:	97 df       	rcall	.-210    	; 0x4608 <__umulhisi3>
    46da:	46 0f       	add	r20, r22
    46dc:	57 1f       	adc	r21, r23
    46de:	c8 1f       	adc	r28, r24
    46e0:	d9 1f       	adc	r29, r25
    46e2:	08 f4       	brcc	.+2      	; 0x46e6 <__muldi3_6+0xe>
    46e4:	31 96       	adiw	r30, 0x01	; 1
    46e6:	08 95       	ret

000046e8 <__umulsidi3>:
    46e8:	e8 94       	clt

000046ea <__umulsidi3_helper>:
    46ea:	df 93       	push	r29
    46ec:	cf 93       	push	r28
    46ee:	fc 01       	movw	r30, r24
    46f0:	db 01       	movw	r26, r22
    46f2:	8a df       	rcall	.-236    	; 0x4608 <__umulhisi3>
    46f4:	7f 93       	push	r23
    46f6:	6f 93       	push	r22
    46f8:	e9 01       	movw	r28, r18
    46fa:	9a 01       	movw	r18, r20
    46fc:	ac 01       	movw	r20, r24
    46fe:	bf 93       	push	r27
    4700:	af 93       	push	r26
    4702:	3f 93       	push	r19
    4704:	2f 93       	push	r18
    4706:	df 01       	movw	r26, r30
    4708:	7f df       	rcall	.-258    	; 0x4608 <__umulhisi3>
    470a:	26 f4       	brtc	.+8      	; 0x4714 <__umulsidi3_helper+0x2a>
    470c:	6c 1b       	sub	r22, r28
    470e:	7d 0b       	sbc	r23, r29
    4710:	82 0b       	sbc	r24, r18
    4712:	93 0b       	sbc	r25, r19
    4714:	9e 01       	movw	r18, r28
    4716:	eb 01       	movw	r28, r22
    4718:	fc 01       	movw	r30, r24
    471a:	de df       	rcall	.-68     	; 0x46d8 <__muldi3_6>
    471c:	af 91       	pop	r26
    471e:	bf 91       	pop	r27
    4720:	2f 91       	pop	r18
    4722:	3f 91       	pop	r19
    4724:	d9 df       	rcall	.-78     	; 0x46d8 <__muldi3_6>
    4726:	be 01       	movw	r22, r28
    4728:	cf 01       	movw	r24, r30
    472a:	f9 01       	movw	r30, r18
    472c:	2f 91       	pop	r18
    472e:	3f 91       	pop	r19
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <__moddi3>:
    4736:	68 94       	set
    4738:	01 c0       	rjmp	.+2      	; 0x473c <__divdi3_moddi3>

0000473a <__divdi3>:
    473a:	e8 94       	clt

0000473c <__divdi3_moddi3>:
    473c:	f9 2f       	mov	r31, r25
    473e:	f1 2b       	or	r31, r17
    4740:	0a f0       	brmi	.+2      	; 0x4744 <__divdi3_moddi3+0x8>
    4742:	27 c0       	rjmp	.+78     	; 0x4792 <__udivdi3_umoddi3>
    4744:	a0 e0       	ldi	r26, 0x00	; 0
    4746:	b0 e0       	ldi	r27, 0x00	; 0
    4748:	e7 ea       	ldi	r30, 0xA7	; 167
    474a:	f3 e2       	ldi	r31, 0x23	; 35
    474c:	93 c0       	rjmp	.+294    	; 0x4874 <__prologue_saves__+0xc>
    474e:	09 2e       	mov	r0, r25
    4750:	05 94       	asr	r0
    4752:	1a f4       	brpl	.+6      	; 0x475a <__divdi3_moddi3+0x1e>
    4754:	79 d0       	rcall	.+242    	; 0x4848 <__negdi2>
    4756:	11 23       	and	r17, r17
    4758:	92 f4       	brpl	.+36     	; 0x477e <__divdi3_moddi3+0x42>
    475a:	f0 e8       	ldi	r31, 0x80	; 128
    475c:	0f 26       	eor	r0, r31
    475e:	ff ef       	ldi	r31, 0xFF	; 255
    4760:	e0 94       	com	r14
    4762:	f0 94       	com	r15
    4764:	00 95       	com	r16
    4766:	10 95       	com	r17
    4768:	b0 94       	com	r11
    476a:	c0 94       	com	r12
    476c:	d0 94       	com	r13
    476e:	a1 94       	neg	r10
    4770:	bf 0a       	sbc	r11, r31
    4772:	cf 0a       	sbc	r12, r31
    4774:	df 0a       	sbc	r13, r31
    4776:	ef 0a       	sbc	r14, r31
    4778:	ff 0a       	sbc	r15, r31
    477a:	0f 0b       	sbc	r16, r31
    477c:	1f 0b       	sbc	r17, r31
    477e:	13 d0       	rcall	.+38     	; 0x47a6 <__udivmod64>
    4780:	07 fc       	sbrc	r0, 7
    4782:	62 d0       	rcall	.+196    	; 0x4848 <__negdi2>
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	ec e0       	ldi	r30, 0x0C	; 12
    478a:	90 c0       	rjmp	.+288    	; 0x48ac <__epilogue_restores__+0xc>

0000478c <__umoddi3>:
    478c:	68 94       	set
    478e:	01 c0       	rjmp	.+2      	; 0x4792 <__udivdi3_umoddi3>

00004790 <__udivdi3>:
    4790:	e8 94       	clt

00004792 <__udivdi3_umoddi3>:
    4792:	8f 92       	push	r8
    4794:	9f 92       	push	r9
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	05 d0       	rcall	.+10     	; 0x47a6 <__udivmod64>
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	9f 90       	pop	r9
    47a2:	8f 90       	pop	r8
    47a4:	08 95       	ret

000047a6 <__udivmod64>:
    47a6:	88 24       	eor	r8, r8
    47a8:	99 24       	eor	r9, r9
    47aa:	f4 01       	movw	r30, r8
    47ac:	e4 01       	movw	r28, r8
    47ae:	b0 e4       	ldi	r27, 0x40	; 64
    47b0:	9f 93       	push	r25
    47b2:	aa 27       	eor	r26, r26
    47b4:	9a 15       	cp	r25, r10
    47b6:	8b 04       	cpc	r8, r11
    47b8:	9c 04       	cpc	r9, r12
    47ba:	ed 05       	cpc	r30, r13
    47bc:	fe 05       	cpc	r31, r14
    47be:	cf 05       	cpc	r28, r15
    47c0:	d0 07       	cpc	r29, r16
    47c2:	a1 07       	cpc	r26, r17
    47c4:	98 f4       	brcc	.+38     	; 0x47ec <__udivmod64+0x46>
    47c6:	ad 2f       	mov	r26, r29
    47c8:	dc 2f       	mov	r29, r28
    47ca:	cf 2f       	mov	r28, r31
    47cc:	fe 2f       	mov	r31, r30
    47ce:	e9 2d       	mov	r30, r9
    47d0:	98 2c       	mov	r9, r8
    47d2:	89 2e       	mov	r8, r25
    47d4:	98 2f       	mov	r25, r24
    47d6:	87 2f       	mov	r24, r23
    47d8:	76 2f       	mov	r23, r22
    47da:	65 2f       	mov	r22, r21
    47dc:	54 2f       	mov	r21, r20
    47de:	43 2f       	mov	r20, r19
    47e0:	32 2f       	mov	r19, r18
    47e2:	22 27       	eor	r18, r18
    47e4:	b8 50       	subi	r27, 0x08	; 8
    47e6:	31 f7       	brne	.-52     	; 0x47b4 <__udivmod64+0xe>
    47e8:	bf 91       	pop	r27
    47ea:	27 c0       	rjmp	.+78     	; 0x483a <__udivmod64+0x94>
    47ec:	1b 2e       	mov	r1, r27
    47ee:	bf 91       	pop	r27
    47f0:	bb 27       	eor	r27, r27
    47f2:	22 0f       	add	r18, r18
    47f4:	33 1f       	adc	r19, r19
    47f6:	44 1f       	adc	r20, r20
    47f8:	55 1f       	adc	r21, r21
    47fa:	66 1f       	adc	r22, r22
    47fc:	77 1f       	adc	r23, r23
    47fe:	88 1f       	adc	r24, r24
    4800:	99 1f       	adc	r25, r25
    4802:	88 1c       	adc	r8, r8
    4804:	99 1c       	adc	r9, r9
    4806:	ee 1f       	adc	r30, r30
    4808:	ff 1f       	adc	r31, r31
    480a:	cc 1f       	adc	r28, r28
    480c:	dd 1f       	adc	r29, r29
    480e:	aa 1f       	adc	r26, r26
    4810:	bb 1f       	adc	r27, r27
    4812:	8a 14       	cp	r8, r10
    4814:	9b 04       	cpc	r9, r11
    4816:	ec 05       	cpc	r30, r12
    4818:	fd 05       	cpc	r31, r13
    481a:	ce 05       	cpc	r28, r14
    481c:	df 05       	cpc	r29, r15
    481e:	a0 07       	cpc	r26, r16
    4820:	b1 07       	cpc	r27, r17
    4822:	48 f0       	brcs	.+18     	; 0x4836 <__udivmod64+0x90>
    4824:	8a 18       	sub	r8, r10
    4826:	9b 08       	sbc	r9, r11
    4828:	ec 09       	sbc	r30, r12
    482a:	fd 09       	sbc	r31, r13
    482c:	ce 09       	sbc	r28, r14
    482e:	df 09       	sbc	r29, r15
    4830:	a0 0b       	sbc	r26, r16
    4832:	b1 0b       	sbc	r27, r17
    4834:	21 60       	ori	r18, 0x01	; 1
    4836:	1a 94       	dec	r1
    4838:	e1 f6       	brne	.-72     	; 0x47f2 <__udivmod64+0x4c>
    483a:	2e f4       	brtc	.+10     	; 0x4846 <__udivmod64+0xa0>
    483c:	94 01       	movw	r18, r8
    483e:	af 01       	movw	r20, r30
    4840:	be 01       	movw	r22, r28
    4842:	cd 01       	movw	r24, r26
    4844:	00 0c       	add	r0, r0
    4846:	08 95       	ret

00004848 <__negdi2>:
    4848:	60 95       	com	r22
    484a:	70 95       	com	r23
    484c:	80 95       	com	r24
    484e:	90 95       	com	r25
    4850:	30 95       	com	r19
    4852:	40 95       	com	r20
    4854:	50 95       	com	r21
    4856:	21 95       	neg	r18
    4858:	3f 4f       	sbci	r19, 0xFF	; 255
    485a:	4f 4f       	sbci	r20, 0xFF	; 255
    485c:	5f 4f       	sbci	r21, 0xFF	; 255
    485e:	6f 4f       	sbci	r22, 0xFF	; 255
    4860:	7f 4f       	sbci	r23, 0xFF	; 255
    4862:	8f 4f       	sbci	r24, 0xFF	; 255
    4864:	9f 4f       	sbci	r25, 0xFF	; 255
    4866:	08 95       	ret

00004868 <__prologue_saves__>:
    4868:	2f 92       	push	r2
    486a:	3f 92       	push	r3
    486c:	4f 92       	push	r4
    486e:	5f 92       	push	r5
    4870:	6f 92       	push	r6
    4872:	7f 92       	push	r7
    4874:	8f 92       	push	r8
    4876:	9f 92       	push	r9
    4878:	af 92       	push	r10
    487a:	bf 92       	push	r11
    487c:	cf 92       	push	r12
    487e:	df 92       	push	r13
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	ca 1b       	sub	r28, r26
    4892:	db 0b       	sbc	r29, r27
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	f8 94       	cli
    4898:	de bf       	out	0x3e, r29	; 62
    489a:	0f be       	out	0x3f, r0	; 63
    489c:	cd bf       	out	0x3d, r28	; 61
    489e:	19 94       	eijmp

000048a0 <__epilogue_restores__>:
    48a0:	2a 88       	ldd	r2, Y+18	; 0x12
    48a2:	39 88       	ldd	r3, Y+17	; 0x11
    48a4:	48 88       	ldd	r4, Y+16	; 0x10
    48a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    48a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    48aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    48ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    48ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    48b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    48b2:	b9 84       	ldd	r11, Y+9	; 0x09
    48b4:	c8 84       	ldd	r12, Y+8	; 0x08
    48b6:	df 80       	ldd	r13, Y+7	; 0x07
    48b8:	ee 80       	ldd	r14, Y+6	; 0x06
    48ba:	fd 80       	ldd	r15, Y+5	; 0x05
    48bc:	0c 81       	ldd	r16, Y+4	; 0x04
    48be:	1b 81       	ldd	r17, Y+3	; 0x03
    48c0:	aa 81       	ldd	r26, Y+2	; 0x02
    48c2:	b9 81       	ldd	r27, Y+1	; 0x01
    48c4:	ce 0f       	add	r28, r30
    48c6:	d1 1d       	adc	r29, r1
    48c8:	0f b6       	in	r0, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	de bf       	out	0x3e, r29	; 62
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	ed 01       	movw	r28, r26
    48d4:	08 95       	ret

000048d6 <__strlen_P>:
    48d6:	fc 01       	movw	r30, r24
    48d8:	05 90       	lpm	r0, Z+
    48da:	00 20       	and	r0, r0
    48dc:	e9 f7       	brne	.-6      	; 0x48d8 <__strlen_P+0x2>
    48de:	80 95       	com	r24
    48e0:	90 95       	com	r25
    48e2:	8e 0f       	add	r24, r30
    48e4:	9f 1f       	adc	r25, r31
    48e6:	08 95       	ret

000048e8 <eeprom_read_byte>:
    48e8:	f9 99       	sbic	0x1f, 1	; 31
    48ea:	fe cf       	rjmp	.-4      	; 0x48e8 <eeprom_read_byte>
    48ec:	92 bd       	out	0x22, r25	; 34
    48ee:	81 bd       	out	0x21, r24	; 33
    48f0:	f8 9a       	sbi	0x1f, 0	; 31
    48f2:	99 27       	eor	r25, r25
    48f4:	80 b5       	in	r24, 0x20	; 32
    48f6:	08 95       	ret

000048f8 <eeprom_write_byte>:
    48f8:	26 2f       	mov	r18, r22

000048fa <eeprom_write_r18>:
    48fa:	f9 99       	sbic	0x1f, 1	; 31
    48fc:	fe cf       	rjmp	.-4      	; 0x48fa <eeprom_write_r18>
    48fe:	1f ba       	out	0x1f, r1	; 31
    4900:	92 bd       	out	0x22, r25	; 34
    4902:	81 bd       	out	0x21, r24	; 33
    4904:	20 bd       	out	0x20, r18	; 32
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	fa 9a       	sbi	0x1f, 2	; 31
    490c:	f9 9a       	sbi	0x1f, 1	; 31
    490e:	0f be       	out	0x3f, r0	; 63
    4910:	01 96       	adiw	r24, 0x01	; 1
    4912:	08 95       	ret

00004914 <__do_global_dtors>:
    4914:	11 e0       	ldi	r17, 0x01	; 1
    4916:	c1 eb       	ldi	r28, 0xB1	; 177
    4918:	d1 e0       	ldi	r29, 0x01	; 1
    491a:	00 e0       	ldi	r16, 0x00	; 0
    491c:	05 c0       	rjmp	.+10     	; 0x4928 <__do_global_dtors+0x14>
    491e:	80 2f       	mov	r24, r16
    4920:	fe 01       	movw	r30, r28
    4922:	6a de       	rcall	.-812    	; 0x45f8 <__tablejump2__>
    4924:	21 96       	adiw	r28, 0x01	; 1
    4926:	01 1d       	adc	r16, r1
    4928:	c2 3b       	cpi	r28, 0xB2	; 178
    492a:	d1 07       	cpc	r29, r17
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	08 07       	cpc	r16, r24
    4930:	b1 f7       	brne	.-20     	; 0x491e <__do_global_dtors+0xa>
    4932:	f8 94       	cli

00004934 <__stop_program>:
    4934:	ff cf       	rjmp	.-2      	; 0x4934 <__stop_program>
