
TestLiquiMenu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  0000449a  0000452e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000449a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005bf  0080024c  0080024c  0000457a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000457a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa0  00000000  00000000  000045f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017d3e  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000451f  00000000  00000000  0001cdce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006627  00000000  00000000  000212ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002060  00000000  00000000  00027914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000616b  00000000  00000000  00029974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bee4  00000000  00000000  0002fadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  0003b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ad c1       	rjmp	.+858    	; 0x35c <__dtors_end>
       2:	00 00       	nop
       4:	dc c1       	rjmp	.+952    	; 0x3be <__bad_interrupt>
       6:	00 00       	nop
       8:	da c1       	rjmp	.+948    	; 0x3be <__bad_interrupt>
       a:	00 00       	nop
       c:	d8 c1       	rjmp	.+944    	; 0x3be <__bad_interrupt>
       e:	00 00       	nop
      10:	d6 c1       	rjmp	.+940    	; 0x3be <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c1       	rjmp	.+936    	; 0x3be <__bad_interrupt>
      16:	00 00       	nop
      18:	d2 c1       	rjmp	.+932    	; 0x3be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d0 c1       	rjmp	.+928    	; 0x3be <__bad_interrupt>
      1e:	00 00       	nop
      20:	ce c1       	rjmp	.+924    	; 0x3be <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c1       	rjmp	.+920    	; 0x3be <__bad_interrupt>
      26:	00 00       	nop
      28:	ca c1       	rjmp	.+916    	; 0x3be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c1       	rjmp	.+912    	; 0x3be <__bad_interrupt>
      2e:	00 00       	nop
      30:	c6 c1       	rjmp	.+908    	; 0x3be <__bad_interrupt>
      32:	00 00       	nop
      34:	c4 c1       	rjmp	.+904    	; 0x3be <__bad_interrupt>
      36:	00 00       	nop
      38:	c2 c1       	rjmp	.+900    	; 0x3be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__bad_interrupt>
      3e:	00 00       	nop
      40:	be c1       	rjmp	.+892    	; 0x3be <__bad_interrupt>
      42:	00 00       	nop
      44:	bc c1       	rjmp	.+888    	; 0x3be <__bad_interrupt>
      46:	00 00       	nop
      48:	ba c1       	rjmp	.+884    	; 0x3be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b8 c1       	rjmp	.+880    	; 0x3be <__bad_interrupt>
      4e:	00 00       	nop
      50:	b6 c1       	rjmp	.+876    	; 0x3be <__bad_interrupt>
      52:	00 00       	nop
      54:	b4 c1       	rjmp	.+872    	; 0x3be <__bad_interrupt>
      56:	00 00       	nop
      58:	b2 c1       	rjmp	.+868    	; 0x3be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__vector_23>
      60:	ae c1       	rjmp	.+860    	; 0x3be <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c1       	rjmp	.+856    	; 0x3be <__bad_interrupt>
      66:	00 00       	nop
      68:	aa c1       	rjmp	.+852    	; 0x3be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a8 c1       	rjmp	.+848    	; 0x3be <__bad_interrupt>
      6e:	00 00       	nop
      70:	a6 c1       	rjmp	.+844    	; 0x3be <__bad_interrupt>
      72:	00 00       	nop
      74:	a4 c1       	rjmp	.+840    	; 0x3be <__bad_interrupt>
      76:	00 00       	nop
      78:	a2 c1       	rjmp	.+836    	; 0x3be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a0 c1       	rjmp	.+832    	; 0x3be <__bad_interrupt>
      7e:	00 00       	nop
      80:	9e c1       	rjmp	.+828    	; 0x3be <__bad_interrupt>
      82:	00 00       	nop
      84:	9c c1       	rjmp	.+824    	; 0x3be <__bad_interrupt>
      86:	00 00       	nop
      88:	9a c1       	rjmp	.+820    	; 0x3be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	98 c1       	rjmp	.+816    	; 0x3be <__bad_interrupt>
      8e:	00 00       	nop
      90:	96 c1       	rjmp	.+812    	; 0x3be <__bad_interrupt>
      92:	00 00       	nop
      94:	94 c1       	rjmp	.+808    	; 0x3be <__bad_interrupt>
      96:	00 00       	nop
      98:	92 c1       	rjmp	.+804    	; 0x3be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_39>
      a0:	8e c1       	rjmp	.+796    	; 0x3be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8c c1       	rjmp	.+792    	; 0x3be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8a c1       	rjmp	.+788    	; 0x3be <__bad_interrupt>
      aa:	00 00       	nop
      ac:	88 c1       	rjmp	.+784    	; 0x3be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	86 c1       	rjmp	.+780    	; 0x3be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	84 c1       	rjmp	.+776    	; 0x3be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	82 c1       	rjmp	.+772    	; 0x3be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	80 c1       	rjmp	.+768    	; 0x3be <__bad_interrupt>
      be:	00 00       	nop
      c0:	7e c1       	rjmp	.+764    	; 0x3be <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7c c1       	rjmp	.+760    	; 0x3be <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7a c1       	rjmp	.+756    	; 0x3be <__bad_interrupt>
      ca:	00 00       	nop
      cc:	78 c1       	rjmp	.+752    	; 0x3be <__bad_interrupt>
      ce:	00 00       	nop
      d0:	76 c1       	rjmp	.+748    	; 0x3be <__bad_interrupt>
      d2:	00 00       	nop
      d4:	74 c1       	rjmp	.+744    	; 0x3be <__bad_interrupt>
      d6:	00 00       	nop
      d8:	72 c1       	rjmp	.+740    	; 0x3be <__bad_interrupt>
      da:	00 00       	nop
      dc:	70 c1       	rjmp	.+736    	; 0x3be <__bad_interrupt>
      de:	00 00       	nop
      e0:	6e c1       	rjmp	.+732    	; 0x3be <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c0 17       	cp	r28, r16
      e6:	c3 17       	cp	r28, r19
      e8:	b2 17       	cp	r27, r18
      ea:	b6 17       	cp	r27, r22
      ec:	bc 17       	cp	r27, r28
      ee:	fa 17       	cp	r31, r26
      f0:	c7 17       	cp	r28, r23
      f2:	cb 17       	cp	r28, r27
      f4:	d1 17       	cp	r29, r17
      f6:	d5 17       	cp	r29, r21
      f8:	d9 17       	cp	r29, r25
      fa:	df 17       	cp	r29, r31
      fc:	e3 17       	cp	r30, r19
      fe:	e7 17       	cp	r30, r23
     100:	fa 17       	cp	r31, r26
     102:	ed 17       	cp	r30, r29
     104:	f1 17       	cp	r31, r17
     106:	f5 17       	cp	r31, r21

00000108 <__trampolines_end>:
     108:	45 58       	subi	r20, 0x85	; 133
     10a:	49 54       	subi	r20, 0x49	; 73
	...

0000010d <_ZL9INA_text2>:
     10d:	49 32 20 42 75 73 20 76 6f 6c 74 61 67 65 20 3a     I2 Bus voltage :
	...

0000011e <_ZL9INA_text1>:
     11e:	43 75 72 72 65 6e 74 20 6f 6e 20 49 32 20 3a 20     Current on I2 : 
	...

0000012f <_ZL9INA_text0>:
     12f:	43 75 72 72 65 6e 74 20 72 65 61 64 69 6e 67 73     Current readings
	...

00000140 <_ZL13liveReadText2>:
     140:	45 58 49 54 00                                      EXIT.

00000145 <_ZL13liveReadText1>:
     145:	56 32 20 3d 20 00                                   V2 = .

0000014b <_ZL13liveReadText0>:
     14b:	56 31 20 3d 20 00                                   V1 = .

00000151 <_ZL17configureAdcText1>:
     151:	45 78 69 74 00                                      Exit.

00000156 <_ZL17configureAdcText0>:
     156:	4e 6f 74 68 69 6e 67 20 79 65 74 20 73 6f 72 72     Nothing yet sorr
     166:	79 20 3a 28 00                                      y :(.

0000016b <_ZL20calibrationDoneText1>:
     16b:	45 78 69 74 00                                      Exit.

00000170 <_ZL20calibrationDoneText0>:
     170:	43 61 6c 69 62 72 61 74 69 6f 6e 20 44 6f 6e 65     Calibration Done
	...

00000181 <_ZL20calibrateOffsetText1>:
     181:	43 6c 69 63 6b 20 68 65 72 65 20 77 68 65 6e 20     Click here when 
     191:	72 65 61 64 79 00                                   ready.

00000197 <_ZL20calibrateOffsetText0>:
     197:	53 65 74 20 30 56 20 6f 6e 20 56 31 00              Set 0V on V1.

000001a4 <_ZL18calibrateGainText1>:
     1a4:	43 6c 69 63 6b 20 68 65 72 65 20 77 68 65 6e 20     Click here when 
     1b4:	72 65 61 64 79 00                                   ready.

000001ba <_ZL18calibrateGainText0>:
     1ba:	53 65 74 20 32 34 56 20 6f 6e 20 56 31 00           Set 24V on V1.

000001c8 <_ZL10main_text3>:
     1c8:	33 3a 20 52 45 41 44 49 4e 47 53 00                 3: READINGS.

000001d4 <_ZL10main_text2>:
     1d4:	32 3a 20 43 4f 4e 46 49 20 41 44 43 00              2: CONFI ADC.

000001e1 <_ZL10main_text1>:
     1e1:	31 3a 20 43 41 4c 49 42 20 41 44 43 00              1: CALIB ADC.

000001ee <_ZL10main_text0>:
     1ee:	20 20 20 4d 41 49 4e 20 4d 45 4e 55 20 20 20 00        MAIN MENU   .

000001fe <_ZL13welcome_text3>:
     1fe:	31 35 3a 35 36 3a 31 33 00                          15:56:13.

00000207 <_ZL13welcome_text2>:
     207:	42 75 69 6c 64 20 6f 6e 20 3a 00                    Build on :.

00000212 <_ZL13welcome_text1>:
     212:	41 44 43 20 43 41 4c 49 42 52 41 54 49 4f 4e 00     ADC CALIBRATION.

00000222 <_ZL13welcome_text0>:
     222:	20 20 20 20 54 45 53 54 20 50 52 4f 47 52 41 4d         TEST PROGRAM
	...

00000233 <digital_pin_to_timer_PGM>:
     233:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     25f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000279 <digital_pin_to_bit_mask_PGM>:
     279:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     289:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     299:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     2a9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     2b9:	04 08 10 20 40 80                                   ... @.

000002bf <digital_pin_to_port_PGM>:
     2bf:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2cf:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2df:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2ef:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ff:	0b 0b 0b 0b 0b 0b                                   ......

00000305 <port_to_input_PGM>:
     305:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     315:	00 01 00 00 03 01 06 01 09 01                       ..........

0000031f <port_to_output_PGM>:
     31f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     32f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000339 <port_to_mode_PGM>:
     339:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     349:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000354 <__ctors_start>:
     354:	68 05       	cpc	r22, r8
     356:	0f 08       	sbc	r0, r15
     358:	89 14       	cp	r8, r9

0000035a <__ctors_end>:
     35a:	4b 08       	sbc	r4, r11

0000035c <__dtors_end>:
     35c:	11 24       	eor	r1, r1
     35e:	1f be       	out	0x3f, r1	; 63
     360:	cf ef       	ldi	r28, 0xFF	; 255
     362:	d1 e2       	ldi	r29, 0x21	; 33
     364:	de bf       	out	0x3e, r29	; 62
     366:	cd bf       	out	0x3d, r28	; 61
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	0c bf       	out	0x3c, r16	; 60

0000036c <__do_copy_data>:
     36c:	12 e0       	ldi	r17, 0x02	; 2
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	ea e9       	ldi	r30, 0x9A	; 154
     374:	f4 e4       	ldi	r31, 0x44	; 68
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	ac 34       	cpi	r26, 0x4C	; 76
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	28 e0       	ldi	r18, 0x08	; 8
     388:	ac e4       	ldi	r26, 0x4C	; 76
     38a:	b2 e0       	ldi	r27, 0x02	; 2
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	ab 30       	cpi	r26, 0x0B	; 11
     392:	b2 07       	cpc	r27, r18
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>

00000396 <__do_global_ctors>:
     396:	11 e0       	ldi	r17, 0x01	; 1
     398:	cd ea       	ldi	r28, 0xAD	; 173
     39a:	d1 e0       	ldi	r29, 0x01	; 1
     39c:	00 e0       	ldi	r16, 0x00	; 0
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <__do_global_ctors+0x16>
     3a0:	21 97       	sbiw	r28, 0x01	; 1
     3a2:	01 09       	sbc	r16, r1
     3a4:	80 2f       	mov	r24, r16
     3a6:	fe 01       	movw	r30, r28
     3a8:	0e 94 ae 20 	call	0x415c	; 0x415c <__tablejump2__>
     3ac:	ca 3a       	cpi	r28, 0xAA	; 170
     3ae:	d1 07       	cpc	r29, r17
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 07       	cpc	r16, r24
     3b4:	a9 f7       	brne	.-22     	; 0x3a0 <__do_global_ctors+0xa>
     3b6:	0e 94 77 16 	call	0x2cee	; 0x2cee <main>
     3ba:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__do_global_dtors>

000003be <__bad_interrupt>:
     3be:	20 ce       	rjmp	.-960    	; 0x0 <__vectors>

000003c0 <_ZN11SPISettingsC1Emhh>:
	DDRB |= (1<<5); //POL PIN as output
	PORTB &=~(1<<5);//Write a 0 to POL pin
	setupBUF(isBufEnable);
	setupBOCS(isBOCSenable);	
	SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE0));
}
     3c0:	0f 93       	push	r16
     3c2:	fc 01       	movw	r30, r24
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	92 e1       	ldi	r25, 0x12	; 18
     3c8:	aa e7       	ldi	r26, 0x7A	; 122
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	48 17       	cp	r20, r24
     3d0:	59 07       	cpc	r21, r25
     3d2:	6a 07       	cpc	r22, r26
     3d4:	7b 07       	cpc	r23, r27
     3d6:	40 f4       	brcc	.+16     	; 0x3e8 <_ZN11SPISettingsC1Emhh+0x28>
     3d8:	b6 95       	lsr	r27
     3da:	a7 95       	ror	r26
     3dc:	97 95       	ror	r25
     3de:	87 95       	ror	r24
     3e0:	3f 5f       	subi	r19, 0xFF	; 255
     3e2:	36 30       	cpi	r19, 0x06	; 6
     3e4:	a1 f7       	brne	.-24     	; 0x3ce <_ZN11SPISettingsC1Emhh+0xe>
     3e6:	37 e0       	ldi	r19, 0x07	; 7
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	93 27       	eor	r25, r19
     3ec:	22 23       	and	r18, r18
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <_ZN11SPISettingsC1Emhh+0x34>
     3f0:	20 e5       	ldi	r18, 0x50	; 80
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <_ZN11SPISettingsC1Emhh+0x36>
     3f4:	20 e7       	ldi	r18, 0x70	; 112
     3f6:	0c 70       	andi	r16, 0x0C	; 12
     3f8:	89 2f       	mov	r24, r25
     3fa:	86 95       	lsr	r24
     3fc:	08 2b       	or	r16, r24
     3fe:	02 2b       	or	r16, r18
     400:	00 83       	st	Z, r16
     402:	91 70       	andi	r25, 0x01	; 1
     404:	91 83       	std	Z+1, r25	; 0x01
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <_ZN8SPIClass16beginTransactionE11SPISettings>:
     40a:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <_ZN8SPIClass13interruptModeE>
     40e:	22 23       	and	r18, r18
     410:	99 f0       	breq	.+38     	; 0x438 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     412:	4f b7       	in	r20, 0x3f	; 63
     414:	f8 94       	cli
     416:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <_ZN8SPIClass13interruptModeE>
     41a:	21 30       	cpi	r18, 0x01	; 1
     41c:	59 f4       	brne	.+22     	; 0x434 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     41e:	2d b3       	in	r18, 0x1d	; 29
     420:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <_ZN8SPIClass13interruptSaveE>
     424:	3d b3       	in	r19, 0x1d	; 29
     426:	20 91 09 08 	lds	r18, 0x0809	; 0x800809 <_ZN8SPIClass13interruptMaskE>
     42a:	20 95       	com	r18
     42c:	23 23       	and	r18, r19
     42e:	2d bb       	out	0x1d, r18	; 29
     430:	4f bf       	out	0x3f, r20	; 63
     432:	02 c0       	rjmp	.+4      	; 0x438 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     434:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <_ZN8SPIClass13interruptSaveE>
     438:	8c bd       	out	0x2c, r24	; 44
     43a:	9d bd       	out	0x2d, r25	; 45
     43c:	08 95       	ret

0000043e <_ZN8SPIClass8transferEh>:
     43e:	8e bd       	out	0x2e, r24	; 46
     440:	00 00       	nop
     442:	0d b4       	in	r0, 0x2d	; 45
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN8SPIClass8transferEh+0x4>
     448:	8e b5       	in	r24, 0x2e	; 46
     44a:	08 95       	ret

0000044c <_ZN8SPIClass14endTransactionEv>:
     44c:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_ZN8SPIClass13interruptModeE>
     450:	88 23       	and	r24, r24
     452:	61 f0       	breq	.+24     	; 0x46c <_ZN8SPIClass14endTransactionEv+0x20>
     454:	9f b7       	in	r25, 0x3f	; 63
     456:	f8 94       	cli
     458:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <_ZN8SPIClass13interruptModeE>
     45c:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <_ZN8SPIClass13interruptSaveE>
     460:	21 30       	cpi	r18, 0x01	; 1
     462:	19 f4       	brne	.+6      	; 0x46a <_ZN8SPIClass14endTransactionEv+0x1e>
     464:	8d bb       	out	0x1d, r24	; 29
     466:	9f bf       	out	0x3f, r25	; 63
     468:	08 95       	ret
     46a:	8f bf       	out	0x3f, r24	; 63
     46c:	08 95       	ret

0000046e <_ZN7ADS1241C1Ev>:
     46e:	08 95       	ret

00000470 <_ZN7ADS1241D1Ev>:
     470:	08 95       	ret

00000472 <_ZN7ADS12415writeEhh>:
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	1f 92       	push	r1
     47e:	1f 92       	push	r1
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	f6 2e       	mov	r15, r22
     486:	14 2f       	mov	r17, r20
     488:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <SPI_SPEED>
     48c:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <SPI_SPEED+0x1>
     490:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <SPI_SPEED+0x2>
     494:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <SPI_SPEED+0x3>
     498:	00 e0       	ldi	r16, 0x00	; 0
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	8f df       	rcall	.-226    	; 0x3c0 <_ZN11SPISettingsC1Emhh>
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	b1 df       	rcall	.-158    	; 0x40a <_ZN8SPIClass16beginTransactionE11SPISettings>
     4a8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <CS_ADC>
     4ac:	4f d1       	rcall	.+670    	; 0x74c <_Z6setMuxh>
     4ae:	8f 2d       	mov	r24, r15
     4b0:	80 65       	ori	r24, 0x50	; 80
     4b2:	c5 df       	rcall	.-118    	; 0x43e <_ZN8SPIClass8transferEh>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	c3 df       	rcall	.-122    	; 0x43e <_ZN8SPIClass8transferEh>
     4b8:	81 2f       	mov	r24, r17
     4ba:	c1 df       	rcall	.-126    	; 0x43e <_ZN8SPIClass8transferEh>
     4bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CS_DISABLE>
     4c0:	45 d1       	rcall	.+650    	; 0x74c <_Z6setMuxh>
     4c2:	c4 df       	rcall	.-120    	; 0x44c <_ZN8SPIClass14endTransactionEv>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	08 95       	ret

000004d4 <_ZN7ADS12414readEh>:
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	1f 92       	push	r1
     4de:	1f 92       	push	r1
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	16 2f       	mov	r17, r22
     4e6:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <SPI_SPEED>
     4ea:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <SPI_SPEED+0x1>
     4ee:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <SPI_SPEED+0x2>
     4f2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <SPI_SPEED+0x3>
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	60 df       	rcall	.-320    	; 0x3c0 <_ZN11SPISettingsC1Emhh>
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	82 df       	rcall	.-252    	; 0x40a <_ZN8SPIClass16beginTransactionE11SPISettings>
     506:	f8 94       	cli
     508:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <CS_ADC>
     50c:	1f d1       	rcall	.+574    	; 0x74c <_Z6setMuxh>
     50e:	81 2f       	mov	r24, r17
     510:	80 61       	ori	r24, 0x10	; 16
     512:	95 df       	rcall	.-214    	; 0x43e <_ZN8SPIClass8transferEh>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	93 df       	rcall	.-218    	; 0x43e <_ZN8SPIClass8transferEh>
     518:	84 e1       	ldi	r24, 0x14	; 20
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <delayMicroseconds>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	8d df       	rcall	.-230    	; 0x43e <_ZN8SPIClass8transferEh>
     524:	18 2f       	mov	r17, r24
     526:	78 94       	sei
     528:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CS_DISABLE>
     52c:	0f d1       	rcall	.+542    	; 0x74c <_Z6setMuxh>
     52e:	8e df       	rcall	.-228    	; 0x44c <_ZN8SPIClass14endTransactionEv>
     530:	81 2f       	mov	r24, r17
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <_ZN7ADS124110read24bitsEh>:
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <_ZN7ADS124110read24bitsEh+0xe>
     54e:	1f 92       	push	r1
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	16 2f       	mov	r17, r22
     556:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <SPI_SPEED>
     55a:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <SPI_SPEED+0x1>
     55e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <SPI_SPEED+0x2>
     562:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <SPI_SPEED+0x3>
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	28 df       	rcall	.-432    	; 0x3c0 <_ZN11SPISettingsC1Emhh>
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	4a df       	rcall	.-364    	; 0x40a <_ZN8SPIClass16beginTransactionE11SPISettings>
     576:	f8 94       	cli
     578:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <CS_ADC>
     57c:	e7 d0       	rcall	.+462    	; 0x74c <_Z6setMuxh>
     57e:	81 2f       	mov	r24, r17
     580:	80 61       	ori	r24, 0x10	; 16
     582:	5d df       	rcall	.-326    	; 0x43e <_ZN8SPIClass8transferEh>
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	5b df       	rcall	.-330    	; 0x43e <_ZN8SPIClass8transferEh>
     588:	84 e1       	ldi	r24, 0x14	; 20
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <delayMicroseconds>
     590:	8e 01       	movw	r16, r28
     592:	0f 5f       	subi	r16, 0xFF	; 255
     594:	1f 4f       	sbci	r17, 0xFF	; 255
     596:	7e 01       	movw	r14, r28
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	e8 0e       	add	r14, r24
     59c:	f1 1c       	adc	r15, r1
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	4e df       	rcall	.-356    	; 0x43e <_ZN8SPIClass8transferEh>
     5a2:	f8 01       	movw	r30, r16
     5a4:	81 93       	st	Z+, r24
     5a6:	8f 01       	movw	r16, r30
     5a8:	ee 15       	cp	r30, r14
     5aa:	ff 05       	cpc	r31, r15
     5ac:	c1 f7       	brne	.-16     	; 0x59e <_ZN7ADS124110read24bitsEh+0x5e>
     5ae:	78 94       	sei
     5b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <CS_DISABLE>
     5b4:	cb d0       	rcall	.+406    	; 0x74c <_Z6setMuxh>
     5b6:	4a df       	rcall	.-364    	; 0x44c <_ZN8SPIClass14endTransactionEv>
     5b8:	69 81       	ldd	r22, Y+1	; 0x01
     5ba:	7a 81       	ldd	r23, Y+2	; 0x02
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	08 95       	ret

000005d6 <_ZN7ADS124113selectChannelEh>:
     5d6:	46 2f       	mov	r20, r22
     5d8:	42 95       	swap	r20
     5da:	40 7f       	andi	r20, 0xF0	; 240
     5dc:	48 60       	ori	r20, 0x08	; 8
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	48 cf       	rjmp	.-368    	; 0x472 <_ZN7ADS12415writeEhh>

000005e2 <_ZN7ADS124110getVoltageEh>:
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
     5f8:	b6 2e       	mov	r11, r22
     5fa:	f8 94       	cli
     5fc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <millis>
     600:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <millis>
     604:	6b 01       	movw	r12, r22
     606:	7c 01       	movw	r14, r24
     608:	6b 2d       	mov	r22, r11
     60a:	ce 01       	movw	r24, r28
     60c:	e4 df       	rcall	.-56     	; 0x5d6 <_ZN7ADS124113selectChannelEh>
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	ce 01       	movw	r24, r28
     612:	60 df       	rcall	.-320    	; 0x4d4 <_ZN7ADS12414readEh>
     614:	b8 2e       	mov	r11, r24
     616:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <millis>
     61a:	b7 fe       	sbrs	r11, 7
     61c:	f8 cf       	rjmp	.-16     	; 0x60e <_ZN7ADS124110getVoltageEh+0x2c>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	8c 19       	sub	r24, r12
     624:	9d 09       	sbc	r25, r13
     626:	ae 09       	sbc	r26, r14
     628:	bf 09       	sbc	r27, r15
     62a:	c3 97       	sbiw	r24, 0x33	; 51
     62c:	a1 05       	cpc	r26, r1
     62e:	b1 05       	cpc	r27, r1
     630:	70 f7       	brcc	.-36     	; 0x60e <_ZN7ADS124110getVoltageEh+0x2c>
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	ce 01       	movw	r24, r28
     636:	84 df       	rcall	.-248    	; 0x540 <_ZN7ADS124110read24bitsEh>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	6a e0       	ldi	r22, 0x0A	; 10
     63e:	ce 01       	movw	r24, r28
     640:	7f df       	rcall	.-258    	; 0x540 <_ZN7ADS124110read24bitsEh>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	c7 01       	movw	r24, r14
     648:	b6 01       	movw	r22, r12
     64a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__floatunsisf>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__floatunsisf>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	c7 01       	movw	r24, r14
     660:	b6 01       	movw	r22, r12
     662:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <__divsf3>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e8       	ldi	r19, 0x80	; 128
     66a:	4b eb       	ldi	r20, 0xBB	; 187
     66c:	56 e4       	ldi	r21, 0x46	; 70
     66e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__mulsf3>
     672:	78 94       	sei
     674:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__fixunssfsi>
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	08 95       	ret

0000068e <_ZN7ADS12418setupBUFEb>:
     68e:	24 9a       	sbi	0x04, 4	; 4
     690:	66 23       	and	r22, r22
     692:	19 f0       	breq	.+6      	; 0x69a <_ZN7ADS12418setupBUFEb+0xc>
     694:	2c 9a       	sbi	0x05, 4	; 5
     696:	44 e5       	ldi	r20, 0x54	; 84
     698:	02 c0       	rjmp	.+4      	; 0x69e <_ZN7ADS12418setupBUFEb+0x10>
     69a:	2c 98       	cbi	0x05, 4	; 5
     69c:	44 e4       	ldi	r20, 0x44	; 68
     69e:	62 e0       	ldi	r22, 0x02	; 2
     6a0:	e8 ce       	rjmp	.-560    	; 0x472 <_ZN7ADS12415writeEhh>

000006a2 <_ZN7ADS12415rangeEb>:
		write(ACR_ADC, 0x44); //Same but with buf disable SEE DATASHEET
	}
}

void ADS1241::range(bool boolRange)
{
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	16 2f       	mov	r17, r22
	uint8_t temp;
	temp = read(ACR_ADC);
     6ac:	62 e0       	ldi	r22, 0x02	; 2
     6ae:	12 df       	rcall	.-476    	; 0x4d4 <_ZN7ADS12414readEh>
	if(boolRange)
	{
		temp |= (1<<2);  //set Range bit
     6b0:	48 2f       	mov	r20, r24

void ADS1241::range(bool boolRange)
{
	uint8_t temp;
	temp = read(ACR_ADC);
	if(boolRange)
     6b2:	11 23       	and	r17, r17
     6b4:	11 f0       	breq	.+4      	; 0x6ba <_ZN7ADS12415rangeEb+0x18>
	{
		temp |= (1<<2);  //set Range bit
     6b6:	44 60       	ori	r20, 0x04	; 4
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <_ZN7ADS12415rangeEb+0x1a>
	}
	else
	{
		temp &= ~(1<<2); //clear Range bit
     6ba:	4b 7f       	andi	r20, 0xFB	; 251
	}
	write(ACR_ADC, temp);
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	ce 01       	movw	r24, r28
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
	}
	else
	{
		temp &= ~(1<<2); //clear Range bit
	}
	write(ACR_ADC, temp);
     6c4:	1f 91       	pop	r17
     6c6:	d5 ce       	rjmp	.-598    	; 0x472 <_ZN7ADS12415writeEhh>

000006c8 <_ZN7ADS124113calibrateGainEv>:
}



void ADS1241::calibrateGain(void)
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ec 01       	movw	r28, r24
	cli();
     6ce:	f8 94       	cli
	range(0); //Range must be 0 for calibration
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	e7 df       	rcall	.-50     	; 0x6a2 <_ZN7ADS12415rangeEb>
	setupBUF(0); //Disable Buffer
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	ce 01       	movw	r24, r28
     6d8:	da df       	rcall	.-76     	; 0x68e <_ZN7ADS12418setupBUFEb>
	selectChannel(1);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	ce 01       	movw	r24, r28
	SPI.transfer(SELFGCAL_ADC);
     6de:	7b df       	rcall	.-266    	; 0x5d6 <_ZN7ADS124113selectChannelEh>
     6e0:	82 ef       	ldi	r24, 0xF2	; 242
     6e2:	ad de       	rcall	.-678    	; 0x43e <_ZN8SPIClass8transferEh>
	delay(10); //wait 10ms for calibration
     6e4:	6a e0       	ldi	r22, 0x0A	; 10
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <delay>
	getVoltage(1); //Discard the data in the buffer
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	ce 01       	movw	r24, r28
	setupBUF(_isBufEnable); //If buffer was enabled, we re-enable it
     6f4:	76 df       	rcall	.-276    	; 0x5e2 <_ZN7ADS124110getVoltageEh>
     6f6:	68 81       	ld	r22, Y
     6f8:	ce 01       	movw	r24, r28
	range(1);
     6fa:	c9 df       	rcall	.-110    	; 0x68e <_ZN7ADS12418setupBUFEb>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	ce 01       	movw	r24, r28
     700:	d0 df       	rcall	.-96     	; 0x6a2 <_ZN7ADS12415rangeEb>
	sei();
     702:	78 94       	sei
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <_ZN7ADS124115calibrateOffsetEv>:

void ADS1241::calibrateOffset(void) //Calibration on channel 1
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	ec 01       	movw	r28, r24
	cli();
     710:	f8 94       	cli
	range(0); //Range must be 0 for calibration
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	c6 df       	rcall	.-116    	; 0x6a2 <_ZN7ADS12415rangeEb>
	setupBUF(0); //Disable Buffer
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	ce 01       	movw	r24, r28
     71a:	b9 df       	rcall	.-142    	; 0x68e <_ZN7ADS12418setupBUFEb>
	selectChannel(1);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	ce 01       	movw	r24, r28
	SPI.transfer(SELFOCAL_ADC);
     720:	5a df       	rcall	.-332    	; 0x5d6 <_ZN7ADS124113selectChannelEh>
     722:	81 ef       	ldi	r24, 0xF1	; 241
     724:	8c de       	rcall	.-744    	; 0x43e <_ZN8SPIClass8transferEh>
	delay(10);
     726:	6a e0       	ldi	r22, 0x0A	; 10
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <delay>
	getVoltage(1); //Discard the data in the buffer
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	ce 01       	movw	r24, r28
	setupBUF(_isBufEnable); //If buffer was enabled, we re-enable it
     736:	55 df       	rcall	.-342    	; 0x5e2 <_ZN7ADS124110getVoltageEh>
     738:	68 81       	ld	r22, Y
     73a:	ce 01       	movw	r24, r28
	range(1);
     73c:	a8 df       	rcall	.-176    	; 0x68e <_ZN7ADS12418setupBUFEb>
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	ce 01       	movw	r24, r28
     742:	af df       	rcall	.-162    	; 0x6a2 <_ZN7ADS12415rangeEb>
	sei();
     744:	78 94       	sei
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <_Z6setMuxh>:
	for(i=0; compteur < (LCD_COL-1); i++)
	{
		dest[compteur] = ' ';
		compteur++;
	}
}
     74c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     750:	9f 60       	ori	r25, 0x0F	; 15
     752:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     756:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     75a:	9e 7f       	andi	r25, 0xFE	; 254
     75c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     760:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     764:	91 60       	ori	r25, 0x01	; 1
     766:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	a9 f0       	breq	.+42     	; 0x798 <_Z6setMuxh+0x4c>
     76e:	58 f0       	brcs	.+22     	; 0x786 <_Z6setMuxh+0x3a>
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	91 f5       	brne	.+100    	; 0x7d8 <_Z6setMuxh+0x8c>
     774:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     778:	87 7f       	andi	r24, 0xF7	; 247
     77a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     77e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     782:	84 60       	ori	r24, 0x04	; 4
     784:	1c c0       	rjmp	.+56     	; 0x7be <_Z6setMuxh+0x72>
     786:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     78a:	87 7f       	andi	r24, 0xF7	; 247
     78c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     790:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     794:	8b 7f       	andi	r24, 0xFB	; 251
     796:	13 c0       	rjmp	.+38     	; 0x7be <_Z6setMuxh+0x72>
     798:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7a6:	8b 7f       	andi	r24, 0xFB	; 251
     7a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     7ba:	8e 7f       	andi	r24, 0xFE	; 254
     7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <_Z6setMuxh+0x86>
     7be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7c6:	8d 7f       	andi	r24, 0xFD	; 253
     7c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     7d6:	08 95       	ret
     7d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7dc:	81 60       	ori	r24, 0x01	; 1
     7de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     7e2:	08 95       	ret

000007e4 <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu>:

void buttonsCheck(Pushbutton& high, Pushbutton& down, Pushbutton& OK, LiquidMenu& menu)
{
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	7b 01       	movw	r14, r22
     7f2:	ea 01       	movw	r28, r20
     7f4:	89 01       	movw	r16, r18
	uint8_t i;
	if(high.getSingleDebouncedPress())
     7f6:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <_ZN14PushbuttonBase23getSingleDebouncedPressEv>
     7fa:	88 23       	and	r24, r24
     7fc:	11 f0       	breq	.+4      	; 0x802 <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu+0x1e>
	{
		menu.switch_focus(false); //Go up
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	06 c0       	rjmp	.+12     	; 0x80e <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu+0x2a>
	}
	else if(down.getSingleDebouncedPress())
     802:	c7 01       	movw	r24, r14
     804:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <_ZN14PushbuttonBase23getSingleDebouncedPressEv>
     808:	88 23       	and	r24, r24
     80a:	51 f0       	breq	.+20     	; 0x820 <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu+0x3c>
	{
		menu.switch_focus(true); //Go down
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	c8 01       	movw	r24, r16
				//so we get out
			}*/
		}
		
	}		
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
	{
		menu.switch_focus(false); //Go up
	}
	else if(down.getSingleDebouncedPress())
	{
		menu.switch_focus(true); //Go down
     81c:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <_ZN10LiquidMenu12switch_focusEb>
	}
	else if(OK.getSingleDebouncedPress())
     820:	ce 01       	movw	r24, r28
     822:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <_ZN14PushbuttonBase23getSingleDebouncedPressEv>
     826:	88 23       	and	r24, r24
     828:	41 f0       	breq	.+16     	; 0x83a <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu+0x56>
     82a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		for (i  = 1 ; i<=MAX_FUNCTIONS ;i++)
		{
			menu.call_function(i);
     82c:	6c 2f       	mov	r22, r28
     82e:	c8 01       	movw	r24, r16
     830:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <_ZNK10LiquidMenu13call_functionEh>
	{
		menu.switch_focus(true); //Go down
	}
	else if(OK.getSingleDebouncedPress())
	{
		for (i  = 1 ; i<=MAX_FUNCTIONS ;i++)
     834:	cf 5f       	subi	r28, 0xFF	; 255
     836:	c9 30       	cpi	r28, 0x09	; 9
     838:	c9 f7       	brne	.-14     	; 0x82c <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu+0x48>
				//so we get out
			}*/
		}
		
	}		
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_Z13emptyfunctionv>:

void emptyfunction(void) //To attach to line to enable scrolling
{
     848:	08 95       	ret

0000084a <_Z12putInProgmemv>:



void putInProgmem(void)
{
	welcome_line0.set_asProgmem(1);
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	86 e9       	ldi	r24, 0x96	; 150
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line1.set_asProgmem(1);
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	8f e6       	ldi	r24, 0x6F	; 111
     858:	96 e0       	ldi	r25, 0x06	; 6
     85a:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line2.set_asProgmem(1);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	88 e4       	ldi	r24, 0x48	; 72
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	welcome_line3.set_asProgmem(1);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	81 e2       	ldi	r24, 0x21	; 33
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	main_line0.set_asProgmem(1);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	8e ed       	ldi	r24, 0xDE	; 222
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	main_line1.set_asProgmem(1);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	87 eb       	ldi	r24, 0xB7	; 183
     880:	95 e0       	ldi	r25, 0x05	; 5
     882:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	main_line2.set_asProgmem(1);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	80 e9       	ldi	r24, 0x90	; 144
     88a:	95 e0       	ldi	r25, 0x05	; 5
     88c:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	main_line3.set_asProgmem(1);
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	89 e6       	ldi	r24, 0x69	; 105
     894:	95 e0       	ldi	r25, 0x05	; 5
     896:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrategain_line0.set_asProgmem(1);
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	86 e2       	ldi	r24, 0x26	; 38
     89e:	95 e0       	ldi	r25, 0x05	; 5
     8a0:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrategain_line1.set_asProgmem(1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrateoffset_line0.set_asProgmem(1);
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	8c eb       	ldi	r24, 0xBC	; 188
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrateoffset_line1.set_asProgmem(1);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	85 e9       	ldi	r24, 0x95	; 149
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrationDone_line0.set_asProgmem(1);
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	82 e5       	ldi	r24, 0x52	; 82
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	calibrationDone_line1.set_asProgmem(1);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8b e2       	ldi	r24, 0x2B	; 43
     8d0:	94 e0       	ldi	r25, 0x04	; 4
     8d2:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	configureAdc_line0.set_asProgmem(1);
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	configureAdc_line1.set_asProgmem(1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	81 ec       	ldi	r24, 0xC1	; 193
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line0.set_asProgmem(1);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	86 e7       	ldi	r24, 0x76	; 118
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line1.set_asProgmem(1);
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	8f e4       	ldi	r24, 0x4F	; 79
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	liveRead_line2.set_asProgmem(1);
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	88 e2       	ldi	r24, 0x28	; 40
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line0.set_asProgmem(1);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	8d ed       	ldi	r24, 0xDD	; 221
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line1.set_asProgmem(1);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	86 eb       	ldi	r24, 0xB6	; 182
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line2.set_asProgmem(1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	8f e8       	ldi	r24, 0x8F	; 143
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>
	INA_line3.set_asProgmem(1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	88 e6       	ldi	r24, 0x68	; 104
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <_ZN10LiquidLine13set_asProgmemEh>

00000930 <_Z15enableScrollingv>:
	
}
void enableScrolling(void)
{
     930:	cf 93       	push	r28
	///////Enable scrolling/////
	welcome_Screen.set_displayLineCount(LCD_ROWS);
     932:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <LCD_ROWS>
     936:	6c 2f       	mov	r22, r28
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	96 e0       	ldi	r25, 0x06	; 6
     93c:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	main_Screen.set_displayLineCount(LCD_ROWS);
     940:	6c 2f       	mov	r22, r28
     942:	8d e4       	ldi	r24, 0x4D	; 77
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrateGain_Screen.set_displayLineCount(LCD_ROWS);
     94a:	6c 2f       	mov	r22, r28
     94c:	83 ee       	ldi	r24, 0xE3	; 227
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrateOffset_Screen.set_displayLineCount(LCD_ROWS);
     954:	6c 2f       	mov	r22, r28
     956:	89 e7       	ldi	r24, 0x79	; 121
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	calibrationDone_Screen.set_displayLineCount(LCD_ROWS);
     95e:	6c 2f       	mov	r22, r28
     960:	8f e0       	ldi	r24, 0x0F	; 15
     962:	94 e0       	ldi	r25, 0x04	; 4
     964:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	liveRead_Screen.set_displayLineCount(LCD_ROWS);
     968:	6c 2f       	mov	r22, r28
     96a:	8c e0       	ldi	r24, 0x0C	; 12
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>
	INA_Screen.set_displayLineCount(LCD_ROWS);
     972:	6c 2f       	mov	r22, r28
     974:	8c e4       	ldi	r24, 0x4C	; 76
     976:	92 e0       	ldi	r25, 0x02	; 2
}
     978:	cf 91       	pop	r28
	main_Screen.set_displayLineCount(LCD_ROWS);
	calibrateGain_Screen.set_displayLineCount(LCD_ROWS);
	calibrateOffset_Screen.set_displayLineCount(LCD_ROWS);
	calibrationDone_Screen.set_displayLineCount(LCD_ROWS);
	liveRead_Screen.set_displayLineCount(LCD_ROWS);
	INA_Screen.set_displayLineCount(LCD_ROWS);
     97a:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <_ZN12LiquidScreen20set_displayLineCountEh>

0000097e <_Z14gotoMainScreenv>:
}


void gotoMainScreen(void)
{
	menu.change_screen(main_Screen);
     97e:	6d e4       	ldi	r22, 0x4D	; 77
     980:	75 e0       	ldi	r23, 0x05	; 5
     982:	81 ee       	ldi	r24, 0xE1	; 225
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

0000098a <_Z27gotoCalibrationOffsetScreenv>:
}

void gotoCalibrationOffsetScreen(void)
{
	menu.change_screen(calibrateOffset_Screen);
     98a:	69 e7       	ldi	r22, 0x79	; 121
     98c:	74 e0       	ldi	r23, 0x04	; 4
     98e:	81 ee       	ldi	r24, 0xE1	; 225
     990:	96 e0       	ldi	r25, 0x06	; 6
     992:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

00000996 <_Z25gotoCalibrationGainScreenv>:
}
void gotoCalibrationGainScreen(void)
{
	menu.change_screen(calibrateGain_Screen);
     996:	63 ee       	ldi	r22, 0xE3	; 227
     998:	74 e0       	ldi	r23, 0x04	; 4
     99a:	81 ee       	ldi	r24, 0xE1	; 225
     99c:	96 e0       	ldi	r25, 0x06	; 6
     99e:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

000009a2 <_Z22gotoConfigureAdcScreenv>:
}

void gotoConfigureAdcScreen(void)
{
	menu.change_screen(configureAdc_Screen);
     9a2:	65 ea       	ldi	r22, 0xA5	; 165
     9a4:	73 e0       	ldi	r23, 0x03	; 3
     9a6:	81 ee       	ldi	r24, 0xE1	; 225
     9a8:	96 e0       	ldi	r25, 0x06	; 6
     9aa:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

000009ae <_Z22gotoLiveReadingsScreenv>:
}

void gotoLiveReadingsScreen(void)
{
	menu.change_screen(liveRead_Screen);
     9ae:	6c e0       	ldi	r22, 0x0C	; 12
     9b0:	73 e0       	ldi	r23, 0x03	; 3
     9b2:	81 ee       	ldi	r24, 0xE1	; 225
     9b4:	96 e0       	ldi	r25, 0x06	; 6
     9b6:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

000009ba <_Z25gotoCalibrationDoneScreenv>:
}

void gotoCalibrationDoneScreen(void)
{
	menu.change_screen(calibrationDone_Screen);
     9ba:	6f e0       	ldi	r22, 0x0F	; 15
     9bc:	74 e0       	ldi	r23, 0x04	; 4
     9be:	81 ee       	ldi	r24, 0xE1	; 225
     9c0:	96 e0       	ldi	r25, 0x06	; 6
     9c2:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>

000009c6 <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>:

  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	8c 01       	movw	r16, r24
     9d4:	7b 01       	movw	r14, r22
    print_me(reinterpret_cast<uintptr_t>(this));
     9d6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     9da:	f8 01       	movw	r30, r16
     9dc:	c6 81       	ldd	r28, Z+6	; 0x06
     9de:	c5 30       	cpi	r28, 0x05	; 5
     9e0:	a0 f4       	brcc	.+40     	; 0xa0a <_ZN10LiquidLine12add_variableIA6_KcEEbRT_+0x44>
      _variable[_variableCount] = (void*)&variable;
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	fe 01       	movw	r30, r28
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	e0 0f       	add	r30, r16
     9ec:	f1 1f       	adc	r31, r17
     9ee:	f0 8e       	std	Z+24, r15	; 0x18
     9f0:	e7 8a       	std	Z+23, r14	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     9f2:	c7 01       	movw	r24, r14
     9f4:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <_Z13recognizeTypePKc>
     9f8:	c0 0f       	add	r28, r16
     9fa:	d1 1f       	adc	r29, r17
     9fc:	89 a3       	std	Y+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     9fe:	f8 01       	movw	r30, r16
     a00:	86 81       	ldd	r24, Z+6	; 0x06
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	86 83       	std	Z+6, r24	; 0x06
      return true;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <_ZN10LiquidLine12add_variableIA6_KcEEbRT_+0x46>
      if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
        DEBUG(reinterpret_cast<uintptr_t>(variable));
      }
#   endif
    DEBUGLN(F(" failed, edit LiquidMenu_config.h to allow for more variables"));
    return false;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
  }
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	08 95       	ret

00000a1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>:
  @param column - the column at which the line starts
  @param row - the row at which the line is printed
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	fc 01       	movw	r30, r24
  @param row - the row at which the line is printed
  */
  LiquidLine(uint8_t column, uint8_t row)
    : _row(row), _column(column), _focusRow(row - 1),
      _focusColumn(column - 1), _focusPosition(Position::NORMAL),
      _variableCount(0), _focusable(false) {
     a20:	40 83       	st	Z, r20
     a22:	61 83       	std	Z+1, r22	; 0x01
     a24:	41 50       	subi	r20, 0x01	; 1
     a26:	42 83       	std	Z+2, r20	; 0x02
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	86 0f       	add	r24, r22
     a2c:	83 83       	std	Z+3, r24	; 0x03
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	84 83       	std	Z+4, r24	; 0x04
     a32:	16 82       	std	Z+6, r1	; 0x06
     a34:	16 a2       	std	Z+38, r1	; 0x26
     a36:	cf 01       	movw	r24, r30
     a38:	47 96       	adiw	r24, 0x17	; 23
     a3a:	af 01       	movw	r20, r30
     a3c:	4f 5d       	subi	r20, 0xDF	; 223
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	ea 01       	movw	r28, r20
     a42:	dc 01       	movw	r26, r24
    for (uint8_t i = 0; i < MAX_VARIABLES; i++) {
      _variable[i] = nullptr;
     a44:	1d 92       	st	X+, r1
     a46:	1d 92       	st	X+, r1
      _variableType[i] = DataType::NOT_USED;
     a48:	19 92       	st	Y+, r1
  */
  LiquidLine(uint8_t column, uint8_t row)
    : _row(row), _column(column), _focusRow(row - 1),
      _focusColumn(column - 1), _focusPosition(Position::NORMAL),
      _variableCount(0), _focusable(false) {
    for (uint8_t i = 0; i < MAX_VARIABLES; i++) {
     a4a:	a4 17       	cp	r26, r20
     a4c:	b5 07       	cpc	r27, r21
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <_ZN10LiquidLineC1IA6_KcEEhhRT_+0x2a>
     a50:	df 01       	movw	r26, r30
     a52:	17 96       	adiw	r26, 0x07	; 7
      _variable[i] = nullptr;
      _variableType[i] = DataType::NOT_USED;
    }
    for (uint8_t f = 0; f < MAX_FUNCTIONS; f++) {
      _function[f] = 0;
     a54:	1d 92       	st	X+, r1
     a56:	1d 92       	st	X+, r1
      _variableCount(0), _focusable(false) {
    for (uint8_t i = 0; i < MAX_VARIABLES; i++) {
      _variable[i] = nullptr;
      _variableType[i] = DataType::NOT_USED;
    }
    for (uint8_t f = 0; f < MAX_FUNCTIONS; f++) {
     a58:	a8 17       	cp	r26, r24
     a5a:	b9 07       	cpc	r27, r25
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <_ZN10LiquidLineC1IA6_KcEEhhRT_+0x3a>
      _function[f] = 0;
    }
	  _floatDecimalPlaces = 2;
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	85 83       	std	Z+5, r24	; 0x05
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
    : LiquidLine(column, row) {
    add_variable(variableA);
     a62:	b9 01       	movw	r22, r18
     a64:	cf 01       	movw	r24, r30
  }
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
  @param &variableA - variable/constant to be printed
  */
  template <typename A>
  LiquidLine(uint8_t column, uint8_t row, A &variableA)
    : LiquidLine(column, row) {
    add_variable(variableA);
     a6a:	ad cf       	rjmp	.-166    	; 0x9c6 <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>

00000a6c <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_>:
  @param &variableA - variable/constant to be printed
  @param &variableB - variable/constant to be printed
  @param &variableC - variable/constant to be printed
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	ec 01       	movw	r28, r24
  @param &variableB - variable/constant to be printed
  */
  template <typename A, typename B>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB)
    : LiquidLine(column, row, variableA) {
     a7e:	cd df       	rcall	.-102    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
  @see LiquidMenu_config.h
  @see MAX_VARIABLES
  */
  template <typename T>
  bool add_variable(T &variable) {
    print_me(reinterpret_cast<uintptr_t>(this));
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_Z8print_mej>
    if (_variableCount < MAX_VARIABLES) {
     a86:	8e 81       	ldd	r24, Y+6	; 0x06
     a88:	85 30       	cpi	r24, 0x05	; 5
     a8a:	b8 f4       	brcc	.+46     	; 0xaba <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_+0x4e>
      _variable[_variableCount] = (void*)&variable;
     a8c:	c8 2e       	mov	r12, r24
     a8e:	d1 2c       	mov	r13, r1
     a90:	f6 01       	movw	r30, r12
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	ec 0f       	add	r30, r28
     a98:	fd 1f       	adc	r31, r29
     a9a:	10 8f       	std	Z+24, r17	; 0x18
     a9c:	07 8b       	std	Z+23, r16	; 0x17
      _variableType[_variableCount] = recognizeType(variable);
     a9e:	f8 01       	movw	r30, r16
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	82 81       	ldd	r24, Z+2	; 0x02
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_Z13recognizeTypem>
     aac:	fe 01       	movw	r30, r28
     aae:	ec 0d       	add	r30, r12
     ab0:	fd 1d       	adc	r31, r13
     ab2:	81 a3       	std	Z+33, r24	; 0x21
        // and don't diplay it if so.
        if ((uint8_t)_variableType[_variableCount] < 200) { // 200+ are getters
          DEBUG(reinterpret_cast<uintptr_t>(variable)); DEBUGLN(F(""));
        }
#     endif
      _variableCount++;
     ab4:	8e 81       	ldd	r24, Y+6	; 0x06
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	8e 83       	std	Y+6, r24	; 0x06
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB, C &variableC)
    : LiquidLine(column, row, variableA, variableB) {
    add_variable(variableC);
     aba:	b7 01       	movw	r22, r14
     abc:	ce 01       	movw	r24, r28
  }
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
  */
  template <typename A, typename B, typename C>
  LiquidLine(uint8_t column, uint8_t row,
             A &variableA, B &variableB, C &variableC)
    : LiquidLine(column, row, variableA, variableB) {
    add_variable(variableC);
     acc:	cf 90       	pop	r12
     ace:	7b cf       	rjmp	.-266    	; 0x9c6 <_ZN10LiquidLine12add_variableIA6_KcEEbRT_>

00000ad0 <_GLOBAL__sub_I_welcome_line0>:
}
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
/////////////Welcome Screen////////////////////
const char welcome_text0[] PROGMEM = "    TEST PROGRAM";
const char welcome_text1[] PROGMEM = "ADC CALIBRATION";
const char welcome_text2[] PROGMEM = "Build on :";
const char welcome_text3[] PROGMEM =  __TIME__;
LiquidLine welcome_line0(0,0,welcome_text0);
     ad8:	22 e2       	ldi	r18, 0x22	; 34
     ada:	32 e0       	ldi	r19, 0x02	; 2
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	86 e9       	ldi	r24, 0x96	; 150
     ae2:	96 e0       	ldi	r25, 0x06	; 6
     ae4:	9a df       	rcall	.-204    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line1(0,1,welcome_text1);
     ae6:	22 e1       	ldi	r18, 0x12	; 18
     ae8:	32 e0       	ldi	r19, 0x02	; 2
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	8f e6       	ldi	r24, 0x6F	; 111
     af0:	96 e0       	ldi	r25, 0x06	; 6
     af2:	93 df       	rcall	.-218    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line2(0,2,welcome_text2);
     af4:	27 e0       	ldi	r18, 0x07	; 7
     af6:	32 e0       	ldi	r19, 0x02	; 2
     af8:	42 e0       	ldi	r20, 0x02	; 2
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	88 e4       	ldi	r24, 0x48	; 72
     afe:	96 e0       	ldi	r25, 0x06	; 6
     b00:	8c df       	rcall	.-232    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine welcome_line3(0,3,welcome_text3);
     b02:	2e ef       	ldi	r18, 0xFE	; 254
     b04:	31 e0       	ldi	r19, 0x01	; 1
     b06:	43 e0       	ldi	r20, 0x03	; 3
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	81 e2       	ldi	r24, 0x21	; 33
     b0c:	96 e0       	ldi	r25, 0x06	; 6
     b0e:	85 df       	rcall	.-246    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidScreen welcome_Screen(welcome_line0, welcome_line1, welcome_line2, welcome_line3);
     b10:	01 e2       	ldi	r16, 0x21	; 33
     b12:	16 e0       	ldi	r17, 0x06	; 6
     b14:	28 e4       	ldi	r18, 0x48	; 72
     b16:	36 e0       	ldi	r19, 0x06	; 6
     b18:	4f e6       	ldi	r20, 0x6F	; 111
     b1a:	56 e0       	ldi	r21, 0x06	; 6
     b1c:	66 e9       	ldi	r22, 0x96	; 150
     b1e:	76 e0       	ldi	r23, 0x06	; 6
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	96 e0       	ldi	r25, 0x06	; 6
     b24:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
/////////////Main Screen////////////////////
const char main_text0[] PROGMEM = "   MAIN MENU   ";
const char main_text1[] PROGMEM = "1: CALIB ADC";
const char main_text2[] PROGMEM = "2: CONFI ADC";
const char main_text3[] PROGMEM = "3: READINGS";
LiquidLine main_line0(0,0,main_text0);
     b28:	2e ee       	ldi	r18, 0xEE	; 238
     b2a:	31 e0       	ldi	r19, 0x01	; 1
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	8e ed       	ldi	r24, 0xDE	; 222
     b32:	95 e0       	ldi	r25, 0x05	; 5
     b34:	72 df       	rcall	.-284    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line1(0,1,main_text1);
     b36:	21 ee       	ldi	r18, 0xE1	; 225
     b38:	31 e0       	ldi	r19, 0x01	; 1
     b3a:	41 e0       	ldi	r20, 0x01	; 1
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	87 eb       	ldi	r24, 0xB7	; 183
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	6b df       	rcall	.-298    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line2(0,2,main_text2);
     b44:	24 ed       	ldi	r18, 0xD4	; 212
     b46:	31 e0       	ldi	r19, 0x01	; 1
     b48:	42 e0       	ldi	r20, 0x02	; 2
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	80 e9       	ldi	r24, 0x90	; 144
     b4e:	95 e0       	ldi	r25, 0x05	; 5
     b50:	64 df       	rcall	.-312    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine main_line3(0,3, main_text3);
     b52:	28 ec       	ldi	r18, 0xC8	; 200
     b54:	31 e0       	ldi	r19, 0x01	; 1
     b56:	43 e0       	ldi	r20, 0x03	; 3
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	89 e6       	ldi	r24, 0x69	; 105
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	5d df       	rcall	.-326    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     b60:	09 e6       	ldi	r16, 0x69	; 105
LiquidScreen main_Screen(main_line0,main_line1,main_line2,main_line3);
     b62:	15 e0       	ldi	r17, 0x05	; 5
     b64:	20 e9       	ldi	r18, 0x90	; 144
     b66:	35 e0       	ldi	r19, 0x05	; 5
     b68:	47 eb       	ldi	r20, 0xB7	; 183
     b6a:	55 e0       	ldi	r21, 0x05	; 5
     b6c:	6e ed       	ldi	r22, 0xDE	; 222
     b6e:	75 e0       	ldi	r23, 0x05	; 5
     b70:	8d e4       	ldi	r24, 0x4D	; 77
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
/////////////Calibrate ADC Screen////////////////////
//CalibrateGain

const char calibrateGainText0[] PROGMEM = "Set 24V on V1";
const char calibrateGainText1[] PROGMEM = "Click here when ready";
LiquidLine calibrategain_line0(0,0, calibrateGainText0);
     b78:	2a eb       	ldi	r18, 0xBA	; 186
     b7a:	31 e0       	ldi	r19, 0x01	; 1
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	86 e2       	ldi	r24, 0x26	; 38
     b82:	95 e0       	ldi	r25, 0x05	; 5
     b84:	4a df       	rcall	.-364    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrategain_line1(0,1, calibrateGainText1);
     b86:	24 ea       	ldi	r18, 0xA4	; 164
     b88:	31 e0       	ldi	r19, 0x01	; 1
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	43 df       	rcall	.-378    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     b94:	4f ef       	ldi	r20, 0xFF	; 255
LiquidScreen calibrateGain_Screen(calibrategain_line0,calibrategain_line1);
     b96:	54 e0       	ldi	r21, 0x04	; 4
     b98:	66 e2       	ldi	r22, 0x26	; 38
     b9a:	75 e0       	ldi	r23, 0x05	; 5
     b9c:	83 ee       	ldi	r24, 0xE3	; 227
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>

//CalibrateOffset

const char calibrateOffsetText0[] PROGMEM = "Set 0V on V1";
const char calibrateOffsetText1[] PROGMEM = "Click here when ready";
LiquidLine calibrateoffset_line0(0,0,calibrateOffsetText0);
     ba4:	27 e9       	ldi	r18, 0x97	; 151
     ba6:	31 e0       	ldi	r19, 0x01	; 1
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	8c eb       	ldi	r24, 0xBC	; 188
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	34 df       	rcall	.-408    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrateoffset_line1(0,1,calibrateOffsetText1);
     bb2:	21 e8       	ldi	r18, 0x81	; 129
     bb4:	31 e0       	ldi	r19, 0x01	; 1
     bb6:	41 e0       	ldi	r20, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	85 e9       	ldi	r24, 0x95	; 149
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	2d df       	rcall	.-422    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     bc0:	4f ef       	ldi	r20, 0xFF	; 255
LiquidScreen calibrateOffset_Screen(calibrategain_line0,calibrategain_line1);
     bc2:	54 e0       	ldi	r21, 0x04	; 4
     bc4:	66 e2       	ldi	r22, 0x26	; 38
     bc6:	75 e0       	ldi	r23, 0x05	; 5
     bc8:	89 e7       	ldi	r24, 0x79	; 121
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>

//CalibrateDone
const char calibrationDoneText0[] PROGMEM = "Calibration Done";
const char calibrationDoneText1[] PROGMEM = "Exit";
LiquidLine calibrationDone_line0(0,0, calibrationDoneText0);
     bd0:	20 e7       	ldi	r18, 0x70	; 112
     bd2:	31 e0       	ldi	r19, 0x01	; 1
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	82 e5       	ldi	r24, 0x52	; 82
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	1e df       	rcall	.-452    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
LiquidLine calibrationDone_line1(0,1, calibrationDoneText1);
     bde:	2b e6       	ldi	r18, 0x6B	; 107
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	8b e2       	ldi	r24, 0x2B	; 43
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	17 df       	rcall	.-466    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     bec:	4f ef       	ldi	r20, 0xFF	; 255
LiquidScreen calibrationDone_Screen(calibrategain_line0, calibrategain_line1);
     bee:	54 e0       	ldi	r21, 0x04	; 4
     bf0:	66 e2       	ldi	r22, 0x26	; 38
     bf2:	75 e0       	ldi	r23, 0x05	; 5
     bf4:	8f e0       	ldi	r24, 0x0F	; 15
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>


/////////////ADC CONFIGURATION////////////////////
const char configureAdcText0[] PROGMEM = "Nothing yet sorry :(";
const char configureAdcText1[] PROGMEM = "Exit";
LiquidLine configureAdc_line0(0,0,configureAdcText0);
     bfc:	26 e5       	ldi	r18, 0x56	; 86
     bfe:	31 e0       	ldi	r19, 0x01	; 1
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	88 ee       	ldi	r24, 0xE8	; 232
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	08 df       	rcall	.-496    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     c0a:	21 e5       	ldi	r18, 0x51	; 81
LiquidLine configureAdc_line1(0,1,configureAdcText1);
     c0c:	31 e0       	ldi	r19, 0x01	; 1
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	81 ec       	ldi	r24, 0xC1	; 193
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	01 df       	rcall	.-510    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     c18:	41 ec       	ldi	r20, 0xC1	; 193
     c1a:	53 e0       	ldi	r21, 0x03	; 3
LiquidScreen configureAdc_Screen(configureAdc_line0, configureAdc_line1);
     c1c:	68 ee       	ldi	r22, 0xE8	; 232
     c1e:	73 e0       	ldi	r23, 0x03	; 3
     c20:	85 ea       	ldi	r24, 0xA5	; 165
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>
     c28:	83 e1       	ldi	r24, 0x13	; 19
uint32_t V2Value = 0;
const char liveReadText0[] PROGMEM = "V1 = ";
const char liveReadText1[] PROGMEM = "V2 = ";
const char liveReadText2[] PROGMEM = "EXIT";
//const char liveReadText3[] PROGMEM;
LiquidLine liveRead_line0(0,0,liveReadText0, V1Value, "mV");
     c2a:	e8 2e       	mov	r14, r24
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	f8 2e       	mov	r15, r24
     c30:	01 ea       	ldi	r16, 0xA1	; 161
     c32:	13 e0       	ldi	r17, 0x03	; 3
     c34:	2b e4       	ldi	r18, 0x4B	; 75
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	86 e7       	ldi	r24, 0x76	; 118
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	15 df       	rcall	.-470    	; 0xa6c <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_>
LiquidLine liveRead_line1(0,1,liveReadText1, V2Value, "mV");
     c42:	0d e9       	ldi	r16, 0x9D	; 157
     c44:	13 e0       	ldi	r17, 0x03	; 3
     c46:	25 e4       	ldi	r18, 0x45	; 69
     c48:	31 e0       	ldi	r19, 0x01	; 1
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	8f e4       	ldi	r24, 0x4F	; 79
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0c df       	rcall	.-488    	; 0xa6c <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_>
     c54:	20 e4       	ldi	r18, 0x40	; 64
LiquidLine liveRead_line2(0,2, liveReadText2);
     c56:	31 e0       	ldi	r19, 0x01	; 1
     c58:	42 e0       	ldi	r20, 0x02	; 2
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	88 e2       	ldi	r24, 0x28	; 40
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	dc de       	rcall	.-584    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     c62:	28 e2       	ldi	r18, 0x28	; 40
LiquidScreen liveRead_Screen(liveRead_line0,liveRead_line1,liveRead_line2);
     c64:	33 e0       	ldi	r19, 0x03	; 3
     c66:	4f e4       	ldi	r20, 0x4F	; 79
     c68:	53 e0       	ldi	r21, 0x03	; 3
     c6a:	66 e7       	ldi	r22, 0x76	; 118
     c6c:	73 e0       	ldi	r23, 0x03	; 3
     c6e:	8c e0       	ldi	r24, 0x0C	; 12
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>
     c76:	2f e2       	ldi	r18, 0x2F	; 47
uint32_t VBusValue = 0;
const char INA_text0[] PROGMEM = "Current readings";
const char INA_text1[] PROGMEM = "Current on I2 : ";
const char INA_text2[] PROGMEM = "I2 Bus voltage :";
const char INA_text3[] PROGMEM = "EXIT";
LiquidLine INA_line0 (0,0, INA_text0);
     c78:	31 e0       	ldi	r19, 0x01	; 1
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	8d ed       	ldi	r24, 0xDD	; 221
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	cb de       	rcall	.-618    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     c84:	96 e1       	ldi	r25, 0x16	; 22
LiquidLine INA_line1 (0,1, INA_text1, I1Value, "uA");
     c86:	e9 2e       	mov	r14, r25
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	f9 2e       	mov	r15, r25
     c8c:	08 e0       	ldi	r16, 0x08	; 8
     c8e:	13 e0       	ldi	r17, 0x03	; 3
     c90:	2e e1       	ldi	r18, 0x1E	; 30
     c92:	31 e0       	ldi	r19, 0x01	; 1
     c94:	41 e0       	ldi	r20, 0x01	; 1
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	86 eb       	ldi	r24, 0xB6	; 182
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	e7 de       	rcall	.-562    	; 0xa6c <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_>
LiquidLine INA_line2 (0,2, INA_text2, VBusValue, "mV");
     c9e:	23 e1       	ldi	r18, 0x13	; 19
     ca0:	e2 2e       	mov	r14, r18
     ca2:	22 e0       	ldi	r18, 0x02	; 2
     ca4:	f2 2e       	mov	r15, r18
     ca6:	04 e0       	ldi	r16, 0x04	; 4
     ca8:	13 e0       	ldi	r17, 0x03	; 3
     caa:	2d e0       	ldi	r18, 0x0D	; 13
     cac:	31 e0       	ldi	r19, 0x01	; 1
     cae:	42 e0       	ldi	r20, 0x02	; 2
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	8f e8       	ldi	r24, 0x8F	; 143
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	da de       	rcall	.-588    	; 0xa6c <_ZN10LiquidLineC1IA17_KcmA3_S1_EEhhRT_RT0_RT1_>
     cb8:	28 e0       	ldi	r18, 0x08	; 8
LiquidLine INA_line3 (0,3, INA_text3);
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	43 e0       	ldi	r20, 0x03	; 3
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	88 e6       	ldi	r24, 0x68	; 104
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	aa de       	rcall	.-684    	; 0xa1a <_ZN10LiquidLineC1IA6_KcEEhhRT_>
     cc6:	08 e6       	ldi	r16, 0x68	; 104
     cc8:	12 e0       	ldi	r17, 0x02	; 2
LiquidScreen INA_Screen (INA_line0,INA_line1,INA_line2,INA_line3);
     cca:	2f e8       	ldi	r18, 0x8F	; 143
     ccc:	32 e0       	ldi	r19, 0x02	; 2
     cce:	46 eb       	ldi	r20, 0xB6	; 182
     cd0:	52 e0       	ldi	r21, 0x02	; 2
     cd2:	6d ed       	ldi	r22, 0xDD	; 221
     cd4:	72 e0       	ldi	r23, 0x02	; 2
     cd6:	8c e4       	ldi	r24, 0x4C	; 76
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
}

void gotoCalibrationDoneScreen(void)
{
	menu.change_screen(calibrationDone_Screen);
}
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <_Z18calibrateOffsetADCv>:
	
void loop(){}

void calibrateOffsetADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateOffset();
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	97 e0       	ldi	r25, 0x07	; 7
     cec:	0e cd       	rjmp	.-1508   	; 0x70a <_ZN7ADS124115calibrateOffsetEv>

00000cee <_Z16calibrateGainADCv>:
}

void calibrateGainADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateGain();
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	97 e0       	ldi	r25, 0x07	; 7
     cf2:	ea cc       	rjmp	.-1580   	; 0x6c8 <_ZN7ADS124113calibrateGainEv>

00000cf4 <setup>:



void setup()
{
	lcd.begin(LCD_COL, LCD_ROWS);
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <LCD_ROWS>
     cfa:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <LCD_COL>
     cfe:	8f e1       	ldi	r24, 0x1F	; 31
     d00:	97 e0       	ldi	r25, 0x07	; 7
     d02:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN13LiquidCrystal5beginEhhh>
	INA.setI2CSpeed(INA_I2C_STANDARD_MODE); // 100kHz I2C
     d06:	40 ea       	ldi	r20, 0xA0	; 160
     d08:	56 e8       	ldi	r21, 0x86	; 134
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	97 e0       	ldi	r25, 0x07	; 7
     d12:	7b d3       	rcall	.+1782   	; 0x140a <_ZN9INA_Class11setI2CSpeedEm>
	INA.begin(3, 2000); //MAX 3A, 2mOhm resistor
     d14:	0f ef       	ldi	r16, 0xFF	; 255
     d16:	20 ed       	ldi	r18, 0xD0	; 208
     d18:	37 e0       	ldi	r19, 0x07	; 7
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	63 e0       	ldi	r22, 0x03	; 3
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	97 e0       	ldi	r25, 0x07	; 7
     d24:	e2 d4       	rcall	.+2500   	; 0x16ea <_ZN9INA_Class5beginEhmh>
	INA.setBusConversion(8500); // Maximum conversion time 8.244ms
     d26:	2f ef       	ldi	r18, 0xFF	; 255
     d28:	44 e3       	ldi	r20, 0x34	; 52
     d2a:	51 e2       	ldi	r21, 0x21	; 33
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	97 e0       	ldi	r25, 0x07	; 7
     d34:	04 d6       	rcall	.+3080   	; 0x193e <_ZN9INA_Class16setBusConversionEmh>
	INA.setShuntConversion(8500); // Maximum conversion time 8.244ms
     d36:	2f ef       	ldi	r18, 0xFF	; 255
     d38:	44 e3       	ldi	r20, 0x34	; 52
     d3a:	51 e2       	ldi	r21, 0x21	; 33
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	97 e0       	ldi	r25, 0x07	; 7
     d44:	08 d7       	rcall	.+3600   	; 0x1b56 <_ZN9INA_Class18setShuntConversionEmh>
	INA.setAveraging(128); //Average 128 readings
     d46:	4f ef       	ldi	r20, 0xFF	; 255
     d48:	60 e8       	ldi	r22, 0x80	; 128
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	97 e0       	ldi	r25, 0x07	; 7
     d50:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN9INA_Class12setAveragingEjh>
	INA.setMode(INA_MODE_CONTINUOUS_BOTH); //read bus and shunt*/
     d54:	4f ef       	ldi	r20, 0xFF	; 255
     d56:	67 e0       	ldi	r22, 0x07	; 7
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	97 e0       	ldi	r25, 0x07	; 7
     d5c:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN9INA_Class7setModeEhh>

	welcome_line0.attach_function(1,gotoMainScreen);
     d60:	4f eb       	ldi	r20, 0xBF	; 191
     d62:	54 e0       	ldi	r21, 0x04	; 4
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	86 e9       	ldi	r24, 0x96	; 150
     d68:	96 e0       	ldi	r25, 0x06	; 6
     d6a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line1.attach_function(1,gotoMainScreen);
     d6e:	4f eb       	ldi	r20, 0xBF	; 191
     d70:	54 e0       	ldi	r21, 0x04	; 4
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	8f e6       	ldi	r24, 0x6F	; 111
     d76:	96 e0       	ldi	r25, 0x06	; 6
     d78:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line2.attach_function(1,gotoMainScreen);
     d7c:	4f eb       	ldi	r20, 0xBF	; 191
     d7e:	54 e0       	ldi	r21, 0x04	; 4
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	88 e4       	ldi	r24, 0x48	; 72
     d84:	96 e0       	ldi	r25, 0x06	; 6
     d86:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	welcome_line3.attach_function(1,gotoMainScreen);
     d8a:	4f eb       	ldi	r20, 0xBF	; 191
     d8c:	54 e0       	ldi	r21, 0x04	; 4
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	81 e2       	ldi	r24, 0x21	; 33
     d92:	96 e0       	ldi	r25, 0x06	; 6
     d94:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	main_line0.attach_function(1,emptyfunction);
     d98:	44 e2       	ldi	r20, 0x24	; 36
     d9a:	54 e0       	ldi	r21, 0x04	; 4
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	8e ed       	ldi	r24, 0xDE	; 222
     da0:	95 e0       	ldi	r25, 0x05	; 5
     da2:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line1.attach_function(1,gotoCalibrationOffsetScreen); //go to calibration menu
     da6:	45 ec       	ldi	r20, 0xC5	; 197
     da8:	54 e0       	ldi	r21, 0x04	; 4
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	87 eb       	ldi	r24, 0xB7	; 183
     dae:	95 e0       	ldi	r25, 0x05	; 5
     db0:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line2.attach_function(1,gotoConfigureAdcScreen);
     db4:	41 ed       	ldi	r20, 0xD1	; 209
     db6:	54 e0       	ldi	r21, 0x04	; 4
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	80 e9       	ldi	r24, 0x90	; 144
     dbc:	95 e0       	ldi	r25, 0x05	; 5
     dbe:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	main_line3.attach_function(1,gotoLiveReadingsScreen);
     dc2:	47 ed       	ldi	r20, 0xD7	; 215
     dc4:	54 e0       	ldi	r21, 0x04	; 4
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	89 e6       	ldi	r24, 0x69	; 105
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrateoffset_line0.attach_function(1,emptyfunction);
     dd0:	44 e2       	ldi	r20, 0x24	; 36
     dd2:	54 e0       	ldi	r21, 0x04	; 4
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	8c eb       	ldi	r24, 0xBC	; 188
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrateoffset_line1.attach_function(1,gotoCalibrationGainScreen); //After calibrating offset, we go to gain screen
     dde:	4b ec       	ldi	r20, 0xCB	; 203
     de0:	54 e0       	ldi	r21, 0x04	; 4
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	85 e9       	ldi	r24, 0x95	; 149
     de6:	94 e0       	ldi	r25, 0x04	; 4
     de8:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrateoffset_line1.attach_function(2,calibrateOffsetADC);
     dec:	44 e7       	ldi	r20, 0x74	; 116
     dee:	56 e0       	ldi	r21, 0x06	; 6
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	85 e9       	ldi	r24, 0x95	; 149
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrategain_line0.attach_function(1,emptyfunction);
     dfa:	44 e2       	ldi	r20, 0x24	; 36
     dfc:	54 e0       	ldi	r21, 0x04	; 4
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	86 e2       	ldi	r24, 0x26	; 38
     e02:	95 e0       	ldi	r25, 0x05	; 5
     e04:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrategain_line1.attach_function(1, gotoCalibrationDoneScreen); //Show the calibration done screen
     e08:	4d ed       	ldi	r20, 0xDD	; 221
     e0a:	54 e0       	ldi	r21, 0x04	; 4
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrategain_line1.attach_function(2, calibrateGainADC); //Does the calibration
     e16:	47 e7       	ldi	r20, 0x77	; 119
     e18:	56 e0       	ldi	r21, 0x06	; 6
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	calibrationDone_line0.attach_function(1,emptyfunction);
     e24:	44 e2       	ldi	r20, 0x24	; 36
     e26:	54 e0       	ldi	r21, 0x04	; 4
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	82 e5       	ldi	r24, 0x52	; 82
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	calibrationDone_line1.attach_function(1,gotoMainScreen); //return to main menu
     e32:	4f eb       	ldi	r20, 0xBF	; 191
     e34:	54 e0       	ldi	r21, 0x04	; 4
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	8b e2       	ldi	r24, 0x2B	; 43
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	configureAdc_line0.attach_function(1,emptyfunction);
     e40:	44 e2       	ldi	r20, 0x24	; 36
     e42:	54 e0       	ldi	r21, 0x04	; 4
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	88 ee       	ldi	r24, 0xE8	; 232
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	configureAdc_line1.attach_function(1,gotoMainScreen);
     e4e:	4f eb       	ldi	r20, 0xBF	; 191
     e50:	54 e0       	ldi	r21, 0x04	; 4
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	81 ec       	ldi	r24, 0xC1	; 193
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	liveRead_line0.attach_function(1,emptyfunction);
     e5c:	44 e2       	ldi	r20, 0x24	; 36
     e5e:	54 e0       	ldi	r21, 0x04	; 4
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	86 e7       	ldi	r24, 0x76	; 118
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	liveRead_line1.attach_function(1,emptyfunction);
     e6a:	44 e2       	ldi	r20, 0x24	; 36
     e6c:	54 e0       	ldi	r21, 0x04	; 4
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	8f e4       	ldi	r24, 0x4F	; 79
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	liveRead_line2.attach_function(1, gotoMainScreen); //Exit live readings, go back to main menu
     e78:	4f eb       	ldi	r20, 0xBF	; 191
     e7a:	54 e0       	ldi	r21, 0x04	; 4
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	88 e2       	ldi	r24, 0x28	; 40
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	
	INA_line0.attach_function(1,emptyfunction);
     e86:	44 e2       	ldi	r20, 0x24	; 36
     e88:	54 e0       	ldi	r21, 0x04	; 4
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	8d ed       	ldi	r24, 0xDD	; 221
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line1.attach_function(1,emptyfunction);
     e94:	44 e2       	ldi	r20, 0x24	; 36
     e96:	54 e0       	ldi	r21, 0x04	; 4
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	86 eb       	ldi	r24, 0xB6	; 182
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line2.attach_function(1,emptyfunction);
     ea2:	44 e2       	ldi	r20, 0x24	; 36
     ea4:	54 e0       	ldi	r21, 0x04	; 4
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	8f e8       	ldi	r24, 0x8F	; 143
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	INA_line3.attach_function(1, gotoMainScreen);//return to main menu
     eb0:	4f eb       	ldi	r20, 0xBF	; 191
     eb2:	54 e0       	ldi	r21, 0x04	; 4
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	88 e6       	ldi	r24, 0x68	; 104
     eb8:	92 e0       	ldi	r25, 0x02	; 2
	
	enableScrolling();
     eba:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN10LiquidLine15attach_functionEhPFvvE>
	putInProgmem();
     ebe:	38 dd       	rcall	.-1424   	; 0x930 <_Z15enableScrollingv>
     ec0:	c4 dc       	rcall	.-1656   	; 0x84a <_Z12putInProgmemv>
	
	menu.add_screen(welcome_Screen);
     ec2:	65 e0       	ldi	r22, 0x05	; 5
     ec4:	76 e0       	ldi	r23, 0x06	; 6
     ec6:	81 ee       	ldi	r24, 0xE1	; 225
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(main_Screen);
     ece:	6d e4       	ldi	r22, 0x4D	; 77
     ed0:	75 e0       	ldi	r23, 0x05	; 5
     ed2:	81 ee       	ldi	r24, 0xE1	; 225
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(calibrateGain_Screen);
     eda:	63 ee       	ldi	r22, 0xE3	; 227
     edc:	74 e0       	ldi	r23, 0x04	; 4
     ede:	81 ee       	ldi	r24, 0xE1	; 225
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(calibrateOffset_Screen);
     ee6:	69 e7       	ldi	r22, 0x79	; 121
     ee8:	74 e0       	ldi	r23, 0x04	; 4
     eea:	81 ee       	ldi	r24, 0xE1	; 225
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(calibrationDone_Screen);
     ef2:	6f e0       	ldi	r22, 0x0F	; 15
     ef4:	74 e0       	ldi	r23, 0x04	; 4
     ef6:	81 ee       	ldi	r24, 0xE1	; 225
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(configureAdc_Screen);
     efe:	65 ea       	ldi	r22, 0xA5	; 165
     f00:	73 e0       	ldi	r23, 0x03	; 3
     f02:	81 ee       	ldi	r24, 0xE1	; 225
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(liveRead_Screen);
     f0a:	6c e0       	ldi	r22, 0x0C	; 12
     f0c:	73 e0       	ldi	r23, 0x03	; 3
     f0e:	81 ee       	ldi	r24, 0xE1	; 225
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	menu.add_screen(INA_Screen);
     f16:	6c e4       	ldi	r22, 0x4C	; 76
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	81 ee       	ldi	r24, 0xE1	; 225
     f1c:	96 e0       	ldi	r25, 0x06	; 6
     f1e:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN10LiquidMenu10add_screenER12LiquidScreen>
	
	menu.change_screen(welcome_Screen);
     f22:	65 e0       	ldi	r22, 0x05	; 5
     f24:	76 e0       	ldi	r23, 0x06	; 6
     f26:	81 ee       	ldi	r24, 0xE1	; 225
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>
	menu.update();
     f2e:	81 ee       	ldi	r24, 0xE1	; 225
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	0e 94 8e 1c 	call	0x391c	; 0x391c <_ZNK10LiquidMenu6updateEv>
	
	while(1)
	{
		buttonsCheck(buttonHigh, buttonDown, buttonOK, menu);
     f36:	21 ee       	ldi	r18, 0xE1	; 225
     f38:	36 e0       	ldi	r19, 0x06	; 6
     f3a:	45 ed       	ldi	r20, 0xD5	; 213
     f3c:	56 e0       	ldi	r21, 0x06	; 6
     f3e:	6d eb       	ldi	r22, 0xBD	; 189
     f40:	76 e0       	ldi	r23, 0x06	; 6
     f42:	89 ec       	ldi	r24, 0xC9	; 201
     f44:	96 e0       	ldi	r25, 0x06	; 6
     f46:	4e dc       	rcall	.-1892   	; 0x7e4 <_Z12buttonsCheckR10PushbuttonS0_S0_R10LiquidMenu>
		if(millis()-updateLastMs > updatePeriod)
     f48:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <millis>
     f4c:	00 91 37 07 	lds	r16, 0x0737	; 0x800737 <updateLastMs>
     f50:	10 91 38 07 	lds	r17, 0x0738	; 0x800738 <updateLastMs+0x1>
     f54:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <updateLastMs+0x2>
     f58:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <updateLastMs+0x3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	80 1b       	sub	r24, r16
     f62:	91 0b       	sbc	r25, r17
     f64:	a2 0b       	sbc	r26, r18
     f66:	b3 0b       	sbc	r27, r19
     f68:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <__data_start>
     f6c:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <__data_start+0x1>
     f70:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_start+0x2>
     f74:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__data_start+0x3>
     f78:	08 17       	cp	r16, r24
     f7a:	19 07       	cpc	r17, r25
     f7c:	2a 07       	cpc	r18, r26
     f7e:	3b 07       	cpc	r19, r27
     f80:	d0 f6       	brcc	.-76     	; 0xf36 <setup+0x242>
		{
			updateLastMs = millis();
     f82:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <millis>
     f86:	60 93 37 07 	sts	0x0737, r22	; 0x800737 <updateLastMs>
     f8a:	70 93 38 07 	sts	0x0738, r23	; 0x800738 <updateLastMs+0x1>
     f8e:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <updateLastMs+0x2>
     f92:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <updateLastMs+0x3>
			if (menu.get_currentScreen() == &liveRead_Screen) //Maybe stock the pointer in a variable
     f96:	81 ee       	ldi	r24, 0xE1	; 225
     f98:	96 e0       	ldi	r25, 0x06	; 6
     f9a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <_ZNK10LiquidMenu17get_currentScreenEv>
     f9e:	8c 50       	subi	r24, 0x0C	; 12
     fa0:	93 40       	sbci	r25, 0x03	; 3
			// so we don't cal it multiple times
			{
				V1Value = ads1241.getVoltage(1);
     fa2:	c9 f4       	brne	.+50     	; 0xfd6 <setup+0x2e2>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	1b db       	rcall	.-2506   	; 0x5e2 <_ZN7ADS124110getVoltageEh>
     fac:	60 93 a1 03 	sts	0x03A1, r22	; 0x8003a1 <V1Value>
     fb0:	70 93 a2 03 	sts	0x03A2, r23	; 0x8003a2 <V1Value+0x1>
     fb4:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <V1Value+0x2>
     fb8:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <V1Value+0x3>
				V2Value = ads1241.getVoltage(2);
     fbc:	62 e0       	ldi	r22, 0x02	; 2
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	97 e0       	ldi	r25, 0x07	; 7
     fc2:	0f db       	rcall	.-2530   	; 0x5e2 <_ZN7ADS124110getVoltageEh>
     fc4:	60 93 9d 03 	sts	0x039D, r22	; 0x80039d <V2Value>
     fc8:	70 93 9e 03 	sts	0x039E, r23	; 0x80039e <V2Value+0x1>
     fcc:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <V2Value+0x2>
     fd0:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <V2Value+0x3>
     fd4:	ac cf       	rjmp	.-168    	; 0xf2e <setup+0x23a>
			}
			else if (menu.get_currentScreen() == &INA_Screen)
     fd6:	81 ee       	ldi	r24, 0xE1	; 225
     fd8:	96 e0       	ldi	r25, 0x06	; 6
     fda:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <_ZNK10LiquidMenu17get_currentScreenEv>
     fde:	8c 54       	subi	r24, 0x4C	; 76
     fe0:	92 40       	sbci	r25, 0x02	; 2
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <setup+0x2f2>
			{
				I1Value = INA.getBusMicroAmps();
     fe4:	a4 cf       	rjmp	.-184    	; 0xf2e <setup+0x23a>
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	83 e0       	ldi	r24, 0x03	; 3
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	38 d7       	rcall	.+3696   	; 0x1e5e <_ZN9INA_Class15getBusMicroAmpsEh>
     fee:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <I1Value>
     ff2:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <I1Value+0x1>
     ff6:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <I1Value+0x2>
     ffa:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <I1Value+0x3>
				VBusValue = INA.getBusMilliVolts();
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	97 e0       	ldi	r25, 0x07	; 7
    1004:	dc d6       	rcall	.+3512   	; 0x1dbe <_ZN9INA_Class16getBusMilliVoltsEh>
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <VBusValue>
    100e:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <VBusValue+0x1>
    1012:	a0 93 06 03 	sts	0x0306, r26	; 0x800306 <VBusValue+0x2>
    1016:	b0 93 07 03 	sts	0x0307, r27	; 0x800307 <VBusValue+0x3>
    101a:	89 cf       	rjmp	.-238    	; 0xf2e <setup+0x23a>

0000101c <loop>:

	
	
	
	
void loop(){}
    101c:	08 95       	ret

0000101e <_GLOBAL__sub_I_updatePeriod>:
}

void calibrateGainADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateGain();
}
    101e:	af 92       	push	r10
    1020:	cf 92       	push	r12
    1022:	ef 92       	push	r14
    1024:	0f 93       	push	r16
uint32_t updateLastMs = 0;


///////OBJECT INSTANTATION///////
//LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D4, D5, D6, D7);//4 bit
    1026:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <D7>
    102a:	c0 90 0d 02 	lds	r12, 0x020D	; 0x80020d <D6>
    102e:	e0 90 0e 02 	lds	r14, 0x020E	; 0x80020e <D5>
    1032:	00 91 0f 02 	lds	r16, 0x020F	; 0x80020f <D4>
    1036:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <ENABLE_LCD>
    103a:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <RW>
    103e:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <RS>
    1042:	8f e1       	ldi	r24, 0x1F	; 31
    1044:	97 e0       	ldi	r25, 0x07	; 7
    1046:	0e 94 cb 19 	call	0x3396	; 0x3396 <_ZN13LiquidCrystalC1Ehhhhhhh>
//ADS1241 ads1241(true, true);
INA_Class INA;
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	97 e0       	ldi	r25, 0x07	; 7
    104e:	4a d1       	rcall	.+660    	; 0x12e4 <_ZN9INA_ClassC1Ev>
ADS1241 ads1241; //for debug
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	0c da       	rcall	.-3048   	; 0x46e <_ZN7ADS1241C1Ev>
LiquidMenu menu(lcd);
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	6f e1       	ldi	r22, 0x1F	; 31
    105a:	77 e0       	ldi	r23, 0x07	; 7
    105c:	81 ee       	ldi	r24, 0xE1	; 225
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <_ZN10LiquidMenuC1ER13LiquidCrystalh>
/*Pushbutton buttonOK(19);//Button OK is on pin 19 of Arduino Mega pinout
Pushbutton buttonHigh(2);
Pushbutton buttonDown(3);*/
Pushbutton buttonOK(A0);//Button OK is on pin 19 of Arduino Mega pinout
    1064:	21 e0       	ldi	r18, 0x01	; 1
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	66 e3       	ldi	r22, 0x36	; 54
    106a:	85 ed       	ldi	r24, 0xD5	; 213
    106c:	96 e0       	ldi	r25, 0x06	; 6
    106e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_ZN10PushbuttonC1Ehhh>
Pushbutton buttonHigh(A7);
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	6d e3       	ldi	r22, 0x3D	; 61
    1078:	89 ec       	ldi	r24, 0xC9	; 201
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_ZN10PushbuttonC1Ehhh>
Pushbutton buttonDown(A1);
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	67 e3       	ldi	r22, 0x37	; 55
    1086:	8d eb       	ldi	r24, 0xBD	; 189
    1088:	96 e0       	ldi	r25, 0x06	; 6
}

void calibrateGainADC(void) //Because can't assign a non static method to .attach_function method
{
	ads1241.calibrateGain();
}
    108a:	0f 91       	pop	r16
    108c:	ef 90       	pop	r14
    108e:	cf 90       	pop	r12
    1090:	af 90       	pop	r10
/*Pushbutton buttonOK(19);//Button OK is on pin 19 of Arduino Mega pinout
Pushbutton buttonHigh(2);
Pushbutton buttonDown(3);*/
Pushbutton buttonOK(A0);//Button OK is on pin 19 of Arduino Mega pinout
Pushbutton buttonHigh(A7);
Pushbutton buttonDown(A1);
    1092:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <_ZN10PushbuttonC1Ehhh>

00001096 <_GLOBAL__sub_D_updatePeriod>:
///////OBJECT INSTANTATION///////
//LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D4, D5, D6, D7);//4 bit
//ADS1241 ads1241(true, true);
INA_Class INA;
ADS1241 ads1241; //for debug
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	ea d9       	rcall	.-3116   	; 0x470 <_ZN7ADS1241D1Ev>

///////OBJECT INSTANTATION///////
//LiquidCrystal lcd(RS, RW, ENABLE_LCD, D0, D1, D2, D3, D4, D5, D6, D7);//8bit
LiquidCrystal lcd(RS, RW, ENABLE_LCD, D4, D5, D6, D7);//4 bit
//ADS1241 ads1241(true, true);
INA_Class INA;
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	97 e0       	ldi	r25, 0x07	; 7
    10a0:	26 c1       	rjmp	.+588    	; 0x12ee <_ZN9INA_ClassD1Ev>

000010a2 <_ZN6inaDetC1E9inaEEPROM>:
        default : returnCode = false;
      } // of switch type
    } // of if this device needs to be set
  } // for-next each device loop
  return(returnCode);
} // of method AlertOnPowerOverLimit
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <_ZN6inaDetC1E9inaEEPROM+0x1a>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <_ZN6inaDetC1E9inaEEPROM+0x1c>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	fc 01       	movw	r30, r24
    10c4:	a2 2f       	mov	r26, r18
    10c6:	af 70       	andi	r26, 0x0F	; 15
    10c8:	92 2f       	mov	r25, r18
    10ca:	20 83       	st	Z, r18
    10cc:	83 2f       	mov	r24, r19
    10ce:	88 1f       	adc	r24, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	88 1f       	adc	r24, r24
    10d4:	24 2f       	mov	r18, r20
    10d6:	2f 73       	andi	r18, 0x3F	; 63
    10d8:	22 0f       	add	r18, r18
    10da:	28 2b       	or	r18, r24
    10dc:	20 fb       	bst	r18, 0
    10de:	37 f9       	bld	r19, 7
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	82 2f       	mov	r24, r18
    10e4:	86 95       	lsr	r24
    10e6:	42 95       	swap	r20
    10e8:	46 95       	lsr	r20
    10ea:	46 95       	lsr	r20
    10ec:	43 70       	andi	r20, 0x03	; 3
    10ee:	35 2f       	mov	r19, r21
    10f0:	33 0f       	add	r19, r19
    10f2:	33 0f       	add	r19, r19
    10f4:	43 2b       	or	r20, r19
    10f6:	52 95       	swap	r21
    10f8:	56 95       	lsr	r21
    10fa:	56 95       	lsr	r21
    10fc:	53 70       	andi	r21, 0x03	; 3
    10fe:	36 2f       	mov	r19, r22
    1100:	33 0f       	add	r19, r19
    1102:	33 0f       	add	r19, r19
    1104:	53 2b       	or	r21, r19
    1106:	62 95       	swap	r22
    1108:	66 95       	lsr	r22
    110a:	66 95       	lsr	r22
    110c:	63 70       	andi	r22, 0x03	; 3
    110e:	73 70       	andi	r23, 0x03	; 3
    1110:	77 0f       	add	r23, r23
    1112:	77 0f       	add	r23, r23
    1114:	76 2b       	or	r23, r22
    1116:	34 2f       	mov	r19, r20
    1118:	32 95       	swap	r19
    111a:	33 0f       	add	r19, r19
    111c:	33 0f       	add	r19, r19
    111e:	30 7c       	andi	r19, 0xC0	; 192
    1120:	8f 73       	andi	r24, 0x3F	; 63
    1122:	83 2b       	or	r24, r19
    1124:	82 83       	std	Z+2, r24	; 0x02
    1126:	85 2f       	mov	r24, r21
    1128:	82 95       	swap	r24
    112a:	88 0f       	add	r24, r24
    112c:	88 0f       	add	r24, r24
    112e:	80 7c       	andi	r24, 0xC0	; 192
    1130:	46 95       	lsr	r20
    1132:	46 95       	lsr	r20
    1134:	48 2b       	or	r20, r24
    1136:	43 83       	std	Z+3, r20	; 0x03
    1138:	87 2f       	mov	r24, r23
    113a:	82 95       	swap	r24
    113c:	88 0f       	add	r24, r24
    113e:	88 0f       	add	r24, r24
    1140:	80 7c       	andi	r24, 0xC0	; 192
    1142:	56 95       	lsr	r21
    1144:	56 95       	lsr	r21
    1146:	58 2b       	or	r21, r24
    1148:	54 83       	std	Z+4, r21	; 0x04
    114a:	76 95       	lsr	r23
    114c:	76 95       	lsr	r23
    114e:	65 81       	ldd	r22, Z+5	; 0x05
    1150:	6c 7f       	andi	r22, 0xFC	; 252
    1152:	76 2b       	or	r23, r22
    1154:	75 83       	std	Z+5, r23	; 0x05
    1156:	a4 30       	cpi	r26, 0x04	; 4
    1158:	b0 f5       	brcc	.+108    	; 0x11c6 <_ZN6inaDetC1E9inaEEPROM+0x124>
    115a:	4f 01       	movw	r8, r30
    115c:	87 81       	ldd	r24, Z+7	; 0x07
    115e:	a1 30       	cpi	r26, 0x01	; 1
    1160:	c0 f5       	brcc	.+112    	; 0x11d2 <_ZN6inaDetC1E9inaEEPROM+0x130>
    1162:	9a e0       	ldi	r25, 0x0A	; 10
    1164:	96 83       	std	Z+6, r25	; 0x06
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	87 83       	std	Z+7, r24	; 0x07
    116a:	80 e9       	ldi	r24, 0x90	; 144
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	93 87       	std	Z+11, r25	; 0x0b
    1170:	82 87       	std	Z+10, r24	; 0x0a
    1172:	84 e6       	ldi	r24, 0x64	; 100
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	91 87       	std	Z+9, r25	; 0x09
    1178:	80 87       	std	Z+8, r24	; 0x08
    117a:	a1 2c       	mov	r10, r1
    117c:	fa ec       	ldi	r31, 0xCA	; 202
    117e:	bf 2e       	mov	r11, r31
    1180:	aa e9       	ldi	r26, 0x9A	; 154
    1182:	ca 2e       	mov	r12, r26
    1184:	bb e3       	ldi	r27, 0x3B	; 59
    1186:	db 2e       	mov	r13, r27
    1188:	e1 2c       	mov	r14, r1
    118a:	f1 2c       	mov	r15, r1
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	10 e0       	ldi	r17, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__muldi3>
    11a2:	aa 24       	eor	r10, r10
    11a4:	aa 94       	dec	r10
    11a6:	ef e7       	ldi	r30, 0x7F	; 127
    11a8:	be 2e       	mov	r11, r30
    11aa:	c1 2c       	mov	r12, r1
    11ac:	d1 2c       	mov	r13, r1
    11ae:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    11b2:	94 2f       	mov	r25, r20
    11b4:	85 2f       	mov	r24, r21
    11b6:	f4 01       	movw	r30, r8
    11b8:	24 87       	std	Z+12, r18	; 0x0c
    11ba:	35 87       	std	Z+13, r19	; 0x0d
    11bc:	46 87       	std	Z+14, r20	; 0x0e
    11be:	57 87       	std	Z+15, r21	; 0x0f
    11c0:	a4 e1       	ldi	r26, 0x14	; 20
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	37 c0       	rjmp	.+110    	; 0x1234 <_ZN6inaDetC1E9inaEEPROM+0x192>
    11c6:	a4 30       	cpi	r26, 0x04	; 4
    11c8:	f1 f1       	breq	.+124    	; 0x1246 <_ZN6inaDetC1E9inaEEPROM+0x1a4>
    11ca:	a8 30       	cpi	r26, 0x08	; 8
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <_ZN6inaDetC1E9inaEEPROM+0x12e>
    11ce:	55 c0       	rjmp	.+170    	; 0x127a <_ZN6inaDetC1E9inaEEPROM+0x1d8>
    11d0:	76 c0       	rjmp	.+236    	; 0x12be <_ZN6inaDetC1E9inaEEPROM+0x21c>
    11d2:	9a e0       	ldi	r25, 0x0A	; 10
    11d4:	96 83       	std	Z+6, r25	; 0x06
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	87 83       	std	Z+7, r24	; 0x07
    11da:	8d e7       	ldi	r24, 0x7D	; 125
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	93 87       	std	Z+11, r25	; 0x0b
    11e0:	82 87       	std	Z+10, r24	; 0x0a
    11e2:	89 e1       	ldi	r24, 0x19	; 25
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	91 87       	std	Z+9, r25	; 0x09
    11e8:	80 87       	std	Z+8, r24	; 0x08
    11ea:	a1 2c       	mov	r10, r1
    11ec:	8a ec       	ldi	r24, 0xCA	; 202
    11ee:	b8 2e       	mov	r11, r24
    11f0:	9a e9       	ldi	r25, 0x9A	; 154
    11f2:	c9 2e       	mov	r12, r25
    11f4:	3b e3       	ldi	r19, 0x3B	; 59
    11f6:	d3 2e       	mov	r13, r19
    11f8:	e1 2c       	mov	r14, r1
    11fa:	f1 2c       	mov	r15, r1
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__muldi3>
    1212:	aa 24       	eor	r10, r10
    1214:	aa 94       	dec	r10
    1216:	ef e7       	ldi	r30, 0x7F	; 127
    1218:	be 2e       	mov	r11, r30
    121a:	c1 2c       	mov	r12, r1
    121c:	d1 2c       	mov	r13, r1
    121e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    1222:	94 2f       	mov	r25, r20
    1224:	85 2f       	mov	r24, r21
    1226:	f4 01       	movw	r30, r8
    1228:	24 87       	std	Z+12, r18	; 0x0c
    122a:	35 87       	std	Z+13, r19	; 0x0d
    122c:	46 87       	std	Z+14, r20	; 0x0e
    122e:	57 87       	std	Z+15, r21	; 0x0f
    1230:	a9 e1       	ldi	r26, 0x19	; 25
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	49 2f       	mov	r20, r25
    1236:	58 2f       	mov	r21, r24
    1238:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muluhisi3>
    123c:	60 8b       	std	Z+16, r22	; 0x10
    123e:	71 8b       	std	Z+17, r23	; 0x11
    1240:	82 8b       	std	Z+18, r24	; 0x12
    1242:	93 8b       	std	Z+19, r25	; 0x13
    1244:	3c c0       	rjmp	.+120    	; 0x12be <_ZN6inaDetC1E9inaEEPROM+0x21c>
    1246:	82 e4       	ldi	r24, 0x42	; 66
    1248:	86 83       	std	Z+6, r24	; 0x06
    124a:	87 81       	ldd	r24, Z+7	; 0x07
    124c:	8e 7f       	andi	r24, 0xFE	; 254
    124e:	87 83       	std	Z+7, r24	; 0x07
    1250:	8d e7       	ldi	r24, 0x7D	; 125
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	93 87       	std	Z+11, r25	; 0x0b
    1256:	82 87       	std	Z+10, r24	; 0x0a
    1258:	80 ed       	ldi	r24, 0xD0	; 208
    125a:	92 e1       	ldi	r25, 0x12	; 18
    125c:	a3 e1       	ldi	r26, 0x13	; 19
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	84 87       	std	Z+12, r24	; 0x0c
    1262:	95 87       	std	Z+13, r25	; 0x0d
    1264:	a6 87       	std	Z+14, r26	; 0x0e
    1266:	b7 87       	std	Z+15, r27	; 0x0f
    1268:	80 e8       	ldi	r24, 0x80	; 128
    126a:	96 e9       	ldi	r25, 0x96	; 150
    126c:	a8 e9       	ldi	r26, 0x98	; 152
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	80 8b       	std	Z+16, r24	; 0x10
    1272:	91 8b       	std	Z+17, r25	; 0x11
    1274:	a2 8b       	std	Z+18, r26	; 0x12
    1276:	b3 8b       	std	Z+19, r27	; 0x13
    1278:	22 c0       	rjmp	.+68     	; 0x12be <_ZN6inaDetC1E9inaEEPROM+0x21c>
    127a:	86 81       	ldd	r24, Z+6	; 0x06
    127c:	80 7c       	andi	r24, 0xC0	; 192
    127e:	8a 60       	ori	r24, 0x0A	; 10
    1280:	8f 73       	andi	r24, 0x3F	; 63
    1282:	86 83       	std	Z+6, r24	; 0x06
    1284:	87 81       	ldd	r24, Z+7	; 0x07
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	87 83       	std	Z+7, r24	; 0x07
    128a:	20 e2       	ldi	r18, 0x20	; 32
    128c:	33 e0       	ldi	r19, 0x03	; 3
    128e:	33 87       	std	Z+11, r19	; 0x0b
    1290:	22 87       	std	Z+10, r18	; 0x0a
    1292:	20 e9       	ldi	r18, 0x90	; 144
    1294:	31 e0       	ldi	r19, 0x01	; 1
    1296:	31 87       	std	Z+9, r19	; 0x09
    1298:	20 87       	std	Z+8, r18	; 0x08
    129a:	14 86       	std	Z+12, r1	; 0x0c
    129c:	15 86       	std	Z+13, r1	; 0x0d
    129e:	16 86       	std	Z+14, r1	; 0x0e
    12a0:	17 86       	std	Z+15, r1	; 0x0f
    12a2:	10 8a       	std	Z+16, r1	; 0x10
    12a4:	11 8a       	std	Z+17, r1	; 0x11
    12a6:	12 8a       	std	Z+18, r1	; 0x12
    12a8:	13 8a       	std	Z+19, r1	; 0x13
    12aa:	29 2f       	mov	r18, r25
    12ac:	2f 70       	andi	r18, 0x0F	; 15
    12ae:	26 30       	cpi	r18, 0x06	; 6
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <_ZN6inaDetC1E9inaEEPROM+0x214>
    12b2:	8c e1       	ldi	r24, 0x1C	; 28
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <_ZN6inaDetC1E9inaEEPROM+0x21a>
    12b6:	27 30       	cpi	r18, 0x07	; 7
    12b8:	11 f4       	brne	.+4      	; 0x12be <_ZN6inaDetC1E9inaEEPROM+0x21c>
    12ba:	8e e2       	ldi	r24, 0x2E	; 46
    12bc:	86 83       	std	Z+6, r24	; 0x06
    12be:	26 96       	adiw	r28, 0x06	; 6
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	bf 90       	pop	r11
    12dc:	af 90       	pop	r10
    12de:	9f 90       	pop	r9
    12e0:	8f 90       	pop	r8
    12e2:	08 95       	ret

000012e4 <_ZN9INA_ClassC1Ev>:
    12e4:	fc 01       	movw	r30, r24
    12e6:	10 82       	st	Z, r1
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	21 83       	std	Z+1, r18	; 0x01
    12ec:	08 95       	ret

000012ee <_ZN9INA_ClassD1Ev>:
    12ee:	08 95       	ret

000012f0 <_ZN9INA_Class17readInafromEEPROMEh>:
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	64 97       	sbiw	r28, 0x14	; 20
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	fc 01       	movw	r30, r24
    1318:	21 81       	ldd	r18, Z+1	; 0x01
    131a:	26 17       	cp	r18, r22
    131c:	89 f1       	breq	.+98     	; 0x1380 <_ZN9INA_Class17readInafromEEPROMEh+0x90>
    131e:	20 81       	ld	r18, Z
    1320:	26 17       	cp	r18, r22
    1322:	70 f1       	brcs	.+92     	; 0x1380 <_ZN9INA_Class17readInafromEEPROMEh+0x90>
    1324:	f6 2e       	mov	r15, r22
    1326:	8c 01       	movw	r16, r24
    1328:	f6 e0       	ldi	r31, 0x06	; 6
    132a:	6f 9f       	mul	r22, r31
    132c:	50 01       	movw	r10, r0
    132e:	11 24       	eor	r1, r1
    1330:	4c 01       	movw	r8, r24
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	88 0e       	add	r8, r24
    1336:	91 1c       	adc	r9, r1
    1338:	f8 01       	movw	r30, r16
    133a:	32 96       	adiw	r30, 0x02	; 2
    133c:	6f 01       	movw	r12, r30
    133e:	ae 1a       	sub	r10, r30
    1340:	bf 0a       	sbc	r11, r31
    1342:	c5 01       	movw	r24, r10
    1344:	8c 0d       	add	r24, r12
    1346:	9d 1d       	adc	r25, r13
    1348:	0e 94 26 22 	call	0x444c	; 0x444c <eeprom_read_byte>
    134c:	f6 01       	movw	r30, r12
    134e:	81 93       	st	Z+, r24
    1350:	6f 01       	movw	r12, r30
    1352:	e8 15       	cp	r30, r8
    1354:	f9 05       	cpc	r31, r9
    1356:	a9 f7       	brne	.-22     	; 0x1342 <_ZN9INA_Class17readInafromEEPROMEh+0x52>
    1358:	f8 01       	movw	r30, r16
    135a:	f1 82       	std	Z+1, r15	; 0x01
    135c:	22 81       	ldd	r18, Z+2	; 0x02
    135e:	33 81       	ldd	r19, Z+3	; 0x03
    1360:	44 81       	ldd	r20, Z+4	; 0x04
    1362:	55 81       	ldd	r21, Z+5	; 0x05
    1364:	66 81       	ldd	r22, Z+6	; 0x06
    1366:	77 81       	ldd	r23, Z+7	; 0x07
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	9a de       	rcall	.-716    	; 0x10a2 <_ZN6inaDetC1E9inaEEPROM>
    136e:	84 e1       	ldi	r24, 0x14	; 20
    1370:	fe 01       	movw	r30, r28
    1372:	31 96       	adiw	r30, 0x01	; 1
    1374:	d8 01       	movw	r26, r16
    1376:	18 96       	adiw	r26, 0x08	; 8
    1378:	01 90       	ld	r0, Z+
    137a:	0d 92       	st	X+, r0
    137c:	8a 95       	dec	r24
    137e:	e1 f7       	brne	.-8      	; 0x1378 <_ZN9INA_Class17readInafromEEPROMEh+0x88>
    1380:	64 96       	adiw	r28, 0x14	; 20
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	9f 90       	pop	r9
    13a0:	8f 90       	pop	r8
    13a2:	08 95       	ret

000013a4 <_ZN9INA_Class16writeInatoEEPROMEh>:
    13a4:	cf 92       	push	r12
    13a6:	df 92       	push	r13
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	26 e0       	ldi	r18, 0x06	; 6
    13b4:	fc 01       	movw	r30, r24
    13b6:	38 96       	adiw	r30, 0x08	; 8
    13b8:	dc 01       	movw	r26, r24
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	01 90       	ld	r0, Z+
    13be:	0d 92       	st	X+, r0
    13c0:	2a 95       	dec	r18
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <_ZN9INA_Class16writeInatoEEPROMEh+0x18>
    13c4:	26 e0       	ldi	r18, 0x06	; 6
    13c6:	62 9f       	mul	r22, r18
    13c8:	e0 01       	movw	r28, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	8c 01       	movw	r16, r24
    13ce:	0e 5f       	subi	r16, 0xFE	; 254
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	6e 01       	movw	r12, r28
    13d4:	86 e0       	ldi	r24, 0x06	; 6
    13d6:	c8 0e       	add	r12, r24
    13d8:	d1 1c       	adc	r13, r1
    13da:	f8 01       	movw	r30, r16
    13dc:	f1 90       	ld	r15, Z+
    13de:	8f 01       	movw	r16, r30
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 26 22 	call	0x444c	; 0x444c <eeprom_read_byte>
    13e6:	f8 16       	cp	r15, r24
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <_ZN9INA_Class16writeInatoEEPROMEh+0x4e>
    13ea:	6f 2d       	mov	r22, r15
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 2e 22 	call	0x445c	; 0x445c <eeprom_write_byte>
    13f2:	21 96       	adiw	r28, 0x01	; 1
    13f4:	cc 15       	cp	r28, r12
    13f6:	dd 05       	cpc	r29, r13
    13f8:	81 f7       	brne	.-32     	; 0x13da <_ZN9INA_Class16writeInatoEEPROMEh+0x36>
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	08 95       	ret

0000140a <_ZN9INA_Class11setI2CSpeedEm>:
    140a:	89 ea       	ldi	r24, 0xA9	; 169
    140c:	97 e0       	ldi	r25, 0x07	; 7
    140e:	0c 94 06 14 	jmp	0x280c	; 0x280c <_ZN7TwoWire8setClockEm>

00001412 <_ZN9INA_Class9writeWordEhjh>:
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	16 2f       	mov	r17, r22
    141a:	ea 01       	movw	r28, r20
    141c:	62 2f       	mov	r22, r18
    141e:	89 ea       	ldi	r24, 0xA9	; 169
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN7TwoWire17beginTransmissionEh>
    1426:	61 2f       	mov	r22, r17
    1428:	89 ea       	ldi	r24, 0xA9	; 169
    142a:	97 e0       	ldi	r25, 0x07	; 7
    142c:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEh>
    1430:	6d 2f       	mov	r22, r29
    1432:	89 ea       	ldi	r24, 0xA9	; 169
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEh>
    143a:	6c 2f       	mov	r22, r28
    143c:	89 ea       	ldi	r24, 0xA9	; 169
    143e:	97 e0       	ldi	r25, 0x07	; 7
    1440:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEh>
    1444:	89 ea       	ldi	r24, 0xA9	; 169
    1446:	97 e0       	ldi	r25, 0x07	; 7
    1448:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7TwoWire15endTransmissionEv>
    144c:	8a e0       	ldi	r24, 0x0A	; 10
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <delayMicroseconds>

0000145a <_ZN9INA_Class10initDeviceEh>:
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	88 85       	ldd	r24, Y+8	; 0x08
    1474:	8f 70       	andi	r24, 0x0F	; 15
    1476:	80 67       	ori	r24, 0x70	; 112
    1478:	88 87       	std	Y+8, r24	; 0x08
    147a:	ce 01       	movw	r24, r28
    147c:	93 df       	rcall	.-218    	; 0x13a4 <_ZN9INA_Class16writeInatoEEPROMEh>
    147e:	88 85       	ldd	r24, Y+8	; 0x08
    1480:	8f 70       	andi	r24, 0x0F	; 15
    1482:	09 f4       	brne	.+2      	; 0x1486 <_ZN9INA_Class10initDeviceEh+0x2c>
    1484:	51 c0       	rjmp	.+162    	; 0x1528 <_ZN9INA_Class10initDeviceEh+0xce>
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	08 f0       	brcs	.+2      	; 0x148c <_ZN9INA_Class10initDeviceEh+0x32>
    148a:	f9 c0       	rjmp	.+498    	; 0x167e <_ZN9INA_Class10initDeviceEh+0x224>
    148c:	2c 89       	ldd	r18, Y+20	; 0x14
    148e:	3d 89       	ldd	r19, Y+21	; 0x15
    1490:	4e 89       	ldd	r20, Y+22	; 0x16
    1492:	5f 89       	ldd	r21, Y+23	; 0x17
    1494:	6a 85       	ldd	r22, Y+10	; 0x0a
    1496:	76 2f       	mov	r23, r22
    1498:	72 95       	swap	r23
    149a:	76 95       	lsr	r23
    149c:	76 95       	lsr	r23
    149e:	73 70       	andi	r23, 0x03	; 3
    14a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a2:	e6 2f       	mov	r30, r22
    14a4:	ee 0f       	add	r30, r30
    14a6:	ee 0f       	add	r30, r30
    14a8:	8e 2f       	mov	r24, r30
    14aa:	87 2b       	or	r24, r23
    14ac:	76 2f       	mov	r23, r22
    14ae:	72 95       	swap	r23
    14b0:	76 95       	lsr	r23
    14b2:	76 95       	lsr	r23
    14b4:	73 70       	andi	r23, 0x03	; 3
    14b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    14b8:	e6 2f       	mov	r30, r22
    14ba:	ee 0f       	add	r30, r30
    14bc:	ee 0f       	add	r30, r30
    14be:	9e 2f       	mov	r25, r30
    14c0:	97 2b       	or	r25, r23
    14c2:	62 95       	swap	r22
    14c4:	66 95       	lsr	r22
    14c6:	66 95       	lsr	r22
    14c8:	63 70       	andi	r22, 0x03	; 3
    14ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    14cc:	73 70       	andi	r23, 0x03	; 3
    14ce:	77 0f       	add	r23, r23
    14d0:	77 0f       	add	r23, r23
    14d2:	a7 2f       	mov	r26, r23
    14d4:	a6 2b       	or	r26, r22
    14d6:	69 85       	ldd	r22, Y+9	; 0x09
    14d8:	6f 77       	andi	r22, 0x7F	; 127
    14da:	96 2e       	mov	r9, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	8a 2f       	mov	r24, r26
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 26 21 	call	0x424c	; 0x424c <__umulsidi3>
    14e6:	e0 ea       	ldi	r30, 0xA0	; 160
    14e8:	ae 2e       	mov	r10, r30
    14ea:	f6 e8       	ldi	r31, 0x86	; 134
    14ec:	bf 2e       	mov	r11, r31
    14ee:	cc 24       	eor	r12, r12
    14f0:	c3 94       	inc	r12
    14f2:	d1 2c       	mov	r13, r1
    14f4:	e1 2c       	mov	r14, r1
    14f6:	f1 2c       	mov	r15, r1
    14f8:	00 e0       	ldi	r16, 0x00	; 0
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    1500:	59 01       	movw	r10, r18
    1502:	6a 01       	movw	r12, r20
    1504:	7b 01       	movw	r14, r22
    1506:	8c 01       	movw	r16, r24
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e4       	ldi	r19, 0x40	; 64
    150c:	4d e0       	ldi	r20, 0x0D	; 13
    150e:	53 e0       	ldi	r21, 0x03	; 3
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    151c:	82 2f       	mov	r24, r18
    151e:	29 2d       	mov	r18, r9
    1520:	48 2f       	mov	r20, r24
    1522:	53 2f       	mov	r21, r19
    1524:	65 e0       	ldi	r22, 0x05	; 5
    1526:	9e c0       	rjmp	.+316    	; 0x1664 <_ZN9INA_Class10initDeviceEh+0x20a>
    1528:	2c 89       	ldd	r18, Y+20	; 0x14
    152a:	3d 89       	ldd	r19, Y+21	; 0x15
    152c:	4e 89       	ldd	r20, Y+22	; 0x16
    152e:	5f 89       	ldd	r21, Y+23	; 0x17
    1530:	6a 85       	ldd	r22, Y+10	; 0x0a
    1532:	76 2f       	mov	r23, r22
    1534:	72 95       	swap	r23
    1536:	76 95       	lsr	r23
    1538:	76 95       	lsr	r23
    153a:	73 70       	andi	r23, 0x03	; 3
    153c:	6b 85       	ldd	r22, Y+11	; 0x0b
    153e:	e6 2f       	mov	r30, r22
    1540:	ee 0f       	add	r30, r30
    1542:	ee 0f       	add	r30, r30
    1544:	8e 2f       	mov	r24, r30
    1546:	87 2b       	or	r24, r23
    1548:	76 2f       	mov	r23, r22
    154a:	72 95       	swap	r23
    154c:	76 95       	lsr	r23
    154e:	76 95       	lsr	r23
    1550:	73 70       	andi	r23, 0x03	; 3
    1552:	6c 85       	ldd	r22, Y+12	; 0x0c
    1554:	e6 2f       	mov	r30, r22
    1556:	ee 0f       	add	r30, r30
    1558:	ee 0f       	add	r30, r30
    155a:	9e 2f       	mov	r25, r30
    155c:	97 2b       	or	r25, r23
    155e:	62 95       	swap	r22
    1560:	66 95       	lsr	r22
    1562:	66 95       	lsr	r22
    1564:	63 70       	andi	r22, 0x03	; 3
    1566:	7d 85       	ldd	r23, Y+13	; 0x0d
    1568:	73 70       	andi	r23, 0x03	; 3
    156a:	77 0f       	add	r23, r23
    156c:	77 0f       	add	r23, r23
    156e:	a7 2f       	mov	r26, r23
    1570:	a6 2b       	or	r26, r22
    1572:	69 85       	ldd	r22, Y+9	; 0x09
    1574:	6f 77       	andi	r22, 0x7F	; 127
    1576:	96 2e       	mov	r9, r22
    1578:	bc 01       	movw	r22, r24
    157a:	8a 2f       	mov	r24, r26
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 26 21 	call	0x424c	; 0x424c <__umulsidi3>
    1582:	b0 ea       	ldi	r27, 0xA0	; 160
    1584:	ab 2e       	mov	r10, r27
    1586:	16 e8       	ldi	r17, 0x86	; 134
    1588:	b1 2e       	mov	r11, r17
    158a:	cc 24       	eor	r12, r12
    158c:	c3 94       	inc	r12
    158e:	d1 2c       	mov	r13, r1
    1590:	e1 2c       	mov	r14, r1
    1592:	f1 2c       	mov	r15, r1
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    159c:	59 01       	movw	r10, r18
    159e:	6a 01       	movw	r12, r20
    15a0:	7b 01       	movw	r14, r22
    15a2:	8c 01       	movw	r16, r24
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e6       	ldi	r20, 0x6A	; 106
    15aa:	58 e1       	ldi	r21, 0x18	; 24
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__udivdi3>
    15b8:	82 2f       	mov	r24, r18
    15ba:	29 2d       	mov	r18, r9
    15bc:	48 2f       	mov	r20, r24
    15be:	53 2f       	mov	r21, r19
    15c0:	65 e0       	ldi	r22, 0x05	; 5
    15c2:	ce 01       	movw	r24, r28
    15c4:	26 df       	rcall	.-436    	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    15c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c8:	58 2f       	mov	r21, r24
    15ca:	52 95       	swap	r21
    15cc:	56 95       	lsr	r21
    15ce:	56 95       	lsr	r21
    15d0:	53 70       	andi	r21, 0x03	; 3
    15d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d4:	69 2f       	mov	r22, r25
    15d6:	66 0f       	add	r22, r22
    15d8:	66 0f       	add	r22, r22
    15da:	26 2f       	mov	r18, r22
    15dc:	25 2b       	or	r18, r21
    15de:	59 2f       	mov	r21, r25
    15e0:	52 95       	swap	r21
    15e2:	56 95       	lsr	r21
    15e4:	56 95       	lsr	r21
    15e6:	53 70       	andi	r21, 0x03	; 3
    15e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ea:	69 2f       	mov	r22, r25
    15ec:	66 0f       	add	r22, r22
    15ee:	66 0f       	add	r22, r22
    15f0:	36 2f       	mov	r19, r22
    15f2:	35 2b       	or	r19, r21
    15f4:	59 2f       	mov	r21, r25
    15f6:	52 95       	swap	r21
    15f8:	56 95       	lsr	r21
    15fa:	56 95       	lsr	r21
    15fc:	53 70       	andi	r21, 0x03	; 3
    15fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1600:	93 70       	andi	r25, 0x03	; 3
    1602:	99 0f       	add	r25, r25
    1604:	99 0f       	add	r25, r25
    1606:	49 2f       	mov	r20, r25
    1608:	45 2b       	or	r20, r21
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	19 85       	ldd	r17, Y+9	; 0x09
    160e:	a1 2f       	mov	r26, r17
    1610:	aa 1f       	adc	r26, r26
    1612:	aa 27       	eor	r26, r26
    1614:	aa 1f       	adc	r26, r26
    1616:	8f 73       	andi	r24, 0x3F	; 63
    1618:	88 0f       	add	r24, r24
    161a:	a8 2b       	or	r26, r24
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muluhisi3>
    1622:	28 ee       	ldi	r18, 0xE8	; 232
    1624:	33 e0       	ldi	r19, 0x03	; 3
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodsi4>
    162e:	29 32       	cpi	r18, 0x29	; 41
    1630:	31 05       	cpc	r19, r1
    1632:	40 f0       	brcs	.+16     	; 0x1644 <_ZN9INA_Class10initDeviceEh+0x1ea>
    1634:	21 35       	cpi	r18, 0x51	; 81
    1636:	31 05       	cpc	r19, r1
    1638:	38 f0       	brcs	.+14     	; 0x1648 <_ZN9INA_Class10initDeviceEh+0x1ee>
    163a:	21 3a       	cpi	r18, 0xA1	; 161
    163c:	31 05       	cpc	r19, r1
    163e:	30 f0       	brcs	.+12     	; 0x164c <_ZN9INA_Class10initDeviceEh+0x1f2>
    1640:	43 e0       	ldi	r20, 0x03	; 3
    1642:	05 c0       	rjmp	.+10     	; 0x164e <_ZN9INA_Class10initDeviceEh+0x1f4>
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	03 c0       	rjmp	.+6      	; 0x164e <_ZN9INA_Class10initDeviceEh+0x1f4>
    1648:	41 e0       	ldi	r20, 0x01	; 1
    164a:	01 c0       	rjmp	.+2      	; 0x164e <_ZN9INA_Class10initDeviceEh+0x1f4>
    164c:	42 e0       	ldi	r20, 0x02	; 2
    164e:	21 2f       	mov	r18, r17
    1650:	2f 77       	andi	r18, 0x7F	; 127
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	54 2f       	mov	r21, r20
    1656:	44 27       	eor	r20, r20
    1658:	55 0f       	add	r21, r21
    165a:	55 0f       	add	r21, r21
    165c:	55 0f       	add	r21, r21
    165e:	4f 69       	ori	r20, 0x9F	; 159
    1660:	51 62       	ori	r21, 0x21	; 33
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	ce 01       	movw	r24, r28
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	9f 90       	pop	r9
    167c:	ca ce       	rjmp	.-620    	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	08 95       	ret

00001696 <_ZN9INA_Class8readWordEhh>:
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	d6 2f       	mov	r29, r22
    169c:	c4 2f       	mov	r28, r20
    169e:	64 2f       	mov	r22, r20
    16a0:	89 ea       	ldi	r24, 0xA9	; 169
    16a2:	97 e0       	ldi	r25, 0x07	; 7
    16a4:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN7TwoWire17beginTransmissionEh>
    16a8:	6d 2f       	mov	r22, r29
    16aa:	89 ea       	ldi	r24, 0xA9	; 169
    16ac:	97 e0       	ldi	r25, 0x07	; 7
    16ae:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEh>
    16b2:	89 ea       	ldi	r24, 0xA9	; 169
    16b4:	97 e0       	ldi	r25, 0x07	; 7
    16b6:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7TwoWire15endTransmissionEv>
    16ba:	8a e0       	ldi	r24, 0x0A	; 10
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 38 17 	call	0x2e70	; 0x2e70 <delayMicroseconds>
    16c2:	42 e0       	ldi	r20, 0x02	; 2
    16c4:	6c 2f       	mov	r22, r28
    16c6:	89 ea       	ldi	r24, 0xA9	; 169
    16c8:	97 e0       	ldi	r25, 0x07	; 7
    16ca:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN7TwoWire11requestFromEhh>
    16ce:	89 ea       	ldi	r24, 0xA9	; 169
    16d0:	97 e0       	ldi	r25, 0x07	; 7
    16d2:	c9 d7       	rcall	.+3986   	; 0x2666 <_ZN7TwoWire4readEv>
    16d4:	d8 2f       	mov	r29, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	c8 2f       	mov	r28, r24
    16da:	89 ea       	ldi	r24, 0xA9	; 169
    16dc:	97 e0       	ldi	r25, 0x07	; 7
    16de:	c3 d7       	rcall	.+3974   	; 0x2666 <_ZN7TwoWire4readEv>
    16e0:	8c 2b       	or	r24, r28
    16e2:	9d 2b       	or	r25, r29
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <_ZN9INA_Class5beginEhmh>:
    16ea:	5f 92       	push	r5
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	64 97       	sbiw	r28, 0x14	; 20
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	7c 01       	movw	r14, r24
    171a:	96 2e       	mov	r9, r22
    171c:	b2 2e       	mov	r11, r18
    171e:	d3 2e       	mov	r13, r19
    1720:	c4 2e       	mov	r12, r20
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	81 11       	cpse	r24, r1
    1728:	ea c0       	rjmp	.+468    	; 0x18fe <_ZN9INA_Class5beginEhmh+0x214>
    172a:	89 ea       	ldi	r24, 0xA9	; 169
    172c:	97 e0       	ldi	r25, 0x07	; 7
    172e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN7TwoWire5beginEv>
    1732:	10 e4       	ldi	r17, 0x40	; 64
    1734:	89 2c       	mov	r8, r9
    1736:	87 94       	ror	r8
    1738:	88 24       	eor	r8, r8
    173a:	87 94       	ror	r8
    173c:	7b 2c       	mov	r7, r11
    173e:	72 94       	swap	r7
    1740:	77 0c       	add	r7, r7
    1742:	77 0c       	add	r7, r7
    1744:	30 ec       	ldi	r19, 0xC0	; 192
    1746:	73 22       	and	r7, r19
    1748:	0b 2d       	mov	r16, r11
    174a:	06 95       	lsr	r16
    174c:	06 95       	lsr	r16
    174e:	6d 2c       	mov	r6, r13
    1750:	62 94       	swap	r6
    1752:	66 0c       	add	r6, r6
    1754:	66 0c       	add	r6, r6
    1756:	40 ec       	ldi	r20, 0xC0	; 192
    1758:	64 22       	and	r6, r20
    175a:	d6 94       	lsr	r13
    175c:	d6 94       	lsr	r13
    175e:	5c 2c       	mov	r5, r12
    1760:	52 94       	swap	r5
    1762:	55 0c       	add	r5, r5
    1764:	55 0c       	add	r5, r5
    1766:	50 ec       	ldi	r21, 0xC0	; 192
    1768:	55 22       	and	r5, r21
    176a:	c6 94       	lsr	r12
    176c:	c6 94       	lsr	r12
    176e:	61 2f       	mov	r22, r17
    1770:	89 ea       	ldi	r24, 0xA9	; 169
    1772:	97 e0       	ldi	r25, 0x07	; 7
    1774:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN7TwoWire17beginTransmissionEh>
    1778:	89 ea       	ldi	r24, 0xA9	; 169
    177a:	97 e0       	ldi	r25, 0x07	; 7
    177c:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7TwoWire15endTransmissionEv>
    1780:	81 11       	cpse	r24, r1
    1782:	b8 c0       	rjmp	.+368    	; 0x18f4 <_ZN9INA_Class5beginEhmh+0x20a>
    1784:	f7 01       	movw	r30, r14
    1786:	80 81       	ld	r24, Z
    1788:	8f 3f       	cpi	r24, 0xFF	; 255
    178a:	09 f4       	brne	.+2      	; 0x178e <_ZN9INA_Class5beginEhmh+0xa4>
    178c:	b3 c0       	rjmp	.+358    	; 0x18f4 <_ZN9INA_Class5beginEhmh+0x20a>
    178e:	41 2f       	mov	r20, r17
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	c7 01       	movw	r24, r14
    1794:	80 df       	rcall	.-256    	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1796:	5c 01       	movw	r10, r24
    1798:	21 2f       	mov	r18, r17
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e8       	ldi	r21, 0x80	; 128
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	c7 01       	movw	r24, r14
    17a2:	37 de       	rcall	.-914    	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    17a4:	41 2f       	mov	r20, r17
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	c7 01       	movw	r24, r14
    17aa:	75 df       	rcall	.-278    	; 0x1696 <_ZN9INA_Class8readWordEhh>
    17ac:	9c 01       	movw	r18, r24
    17ae:	81 15       	cp	r24, r1
    17b0:	90 48       	sbci	r25, 0x80	; 128
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <_ZN9INA_Class5beginEhmh+0xd6>
    17b4:	21 2f       	mov	r18, r17
    17b6:	a5 01       	movw	r20, r10
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	c7 01       	movw	r24, r14
    17bc:	2a de       	rcall	.-940    	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    17be:	9a c0       	rjmp	.+308    	; 0x18f4 <_ZN9INA_Class5beginEhmh+0x20a>
    17c0:	2f 39       	cpi	r18, 0x9F	; 159
    17c2:	89 e3       	ldi	r24, 0x39	; 57
    17c4:	38 07       	cpc	r19, r24
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <_ZN9INA_Class5beginEhmh+0xe8>
    17c8:	f7 01       	movw	r30, r14
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	80 7f       	andi	r24, 0xF0	; 240
    17ce:	82 83       	std	Z+2, r24	; 0x02
    17d0:	29 c0       	rjmp	.+82     	; 0x1824 <_ZN9INA_Class5beginEhmh+0x13a>
    17d2:	27 32       	cpi	r18, 0x27	; 39
    17d4:	f1 e4       	ldi	r31, 0x41	; 65
    17d6:	3f 07       	cpc	r19, r31
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <_ZN9INA_Class5beginEhmh+0x118>
    17da:	41 2f       	mov	r20, r17
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	c7 01       	movw	r24, r14
    17e0:	5a df       	rcall	.-332    	; 0x1696 <_ZN9INA_Class8readWordEhh>
    17e2:	9c 01       	movw	r18, r24
    17e4:	f7 01       	movw	r30, r14
    17e6:	92 81       	ldd	r25, Z+2	; 0x02
    17e8:	90 7f       	andi	r25, 0xF0	; 240
    17ea:	20 36       	cpi	r18, 0x60	; 96
    17ec:	f2 e2       	ldi	r31, 0x22	; 34
    17ee:	3f 07       	cpc	r19, r31
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <_ZN9INA_Class5beginEhmh+0x10c>
    17f2:	91 60       	ori	r25, 0x01	; 1
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <_ZN9INA_Class5beginEhmh+0x136>
    17f6:	23 2b       	or	r18, r19
    17f8:	11 f0       	breq	.+4      	; 0x17fe <_ZN9INA_Class5beginEhmh+0x114>
    17fa:	92 60       	ori	r25, 0x02	; 2
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <_ZN9INA_Class5beginEhmh+0x136>
    17fe:	93 60       	ori	r25, 0x03	; 3
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <_ZN9INA_Class5beginEhmh+0x136>
    1802:	f7 01       	movw	r30, r14
    1804:	92 81       	ldd	r25, Z+2	; 0x02
    1806:	90 7f       	andi	r25, 0xF0	; 240
    1808:	27 32       	cpi	r18, 0x27	; 39
    180a:	f1 e6       	ldi	r31, 0x61	; 97
    180c:	3f 07       	cpc	r19, r31
    180e:	11 f4       	brne	.+4      	; 0x1814 <_ZN9INA_Class5beginEhmh+0x12a>
    1810:	94 60       	ori	r25, 0x04	; 4
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <_ZN9INA_Class5beginEhmh+0x136>
    1814:	27 32       	cpi	r18, 0x27	; 39
    1816:	31 47       	sbci	r19, 0x71	; 113
    1818:	11 f4       	brne	.+4      	; 0x181e <_ZN9INA_Class5beginEhmh+0x134>
    181a:	95 60       	ori	r25, 0x05	; 5
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <_ZN9INA_Class5beginEhmh+0x136>
    181e:	98 60       	ori	r25, 0x08	; 8
    1820:	f7 01       	movw	r30, r14
    1822:	92 83       	std	Z+2, r25	; 0x02
    1824:	f7 01       	movw	r30, r14
    1826:	22 81       	ldd	r18, Z+2	; 0x02
    1828:	82 2f       	mov	r24, r18
    182a:	8f 70       	andi	r24, 0x0F	; 15
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	09 f4       	brne	.+2      	; 0x1832 <_ZN9INA_Class5beginEhmh+0x148>
    1830:	61 c0       	rjmp	.+194    	; 0x18f4 <_ZN9INA_Class5beginEhmh+0x20a>
    1832:	31 2f       	mov	r19, r17
    1834:	3f 77       	andi	r19, 0x7F	; 127
    1836:	38 29       	or	r19, r8
    1838:	33 83       	std	Z+3, r19	; 0x03
    183a:	49 2d       	mov	r20, r9
    183c:	46 95       	lsr	r20
    183e:	4f 73       	andi	r20, 0x3F	; 63
    1840:	47 29       	or	r20, r7
    1842:	44 83       	std	Z+4, r20	; 0x04
    1844:	50 2f       	mov	r21, r16
    1846:	56 29       	or	r21, r6
    1848:	55 83       	std	Z+5, r21	; 0x05
    184a:	6d 2d       	mov	r22, r13
    184c:	65 29       	or	r22, r5
    184e:	66 83       	std	Z+6, r22	; 0x06
    1850:	77 81       	ldd	r23, Z+7	; 0x07
    1852:	7c 7f       	andi	r23, 0xFC	; 252
    1854:	8c 2d       	mov	r24, r12
    1856:	83 70       	andi	r24, 0x03	; 3
    1858:	78 2b       	or	r23, r24
    185a:	77 83       	std	Z+7, r23	; 0x07
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	20 dc       	rcall	.-1984   	; 0x10a2 <_ZN6inaDetC1E9inaEEPROM>
    1862:	84 e1       	ldi	r24, 0x14	; 20
    1864:	fe 01       	movw	r30, r28
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	d7 01       	movw	r26, r14
    186a:	18 96       	adiw	r26, 0x08	; 8
    186c:	01 90       	ld	r0, Z+
    186e:	0d 92       	st	X+, r0
    1870:	8a 95       	dec	r24
    1872:	e1 f7       	brne	.-8      	; 0x186c <_ZN9INA_Class5beginEhmh+0x182>
    1874:	f7 01       	movw	r30, r14
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	8f 70       	andi	r24, 0x0F	; 15
    187a:	85 30       	cpi	r24, 0x05	; 5
    187c:	71 f5       	brne	.+92     	; 0x18da <_ZN9INA_Class5beginEhmh+0x1f0>
    187e:	80 85       	ldd	r24, Z+8	; 0x08
    1880:	80 7f       	andi	r24, 0xF0	; 240
    1882:	85 60       	ori	r24, 0x05	; 5
    1884:	80 87       	std	Z+8, r24	; 0x08
    1886:	60 81       	ld	r22, Z
    1888:	c7 01       	movw	r24, r14
    188a:	e7 dd       	rcall	.-1074   	; 0x145a <_ZN9INA_Class10initDeviceEh>
    188c:	f7 01       	movw	r30, r14
    188e:	80 81       	ld	r24, Z
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	aa 24       	eor	r10, r10
    1896:	aa 94       	dec	r10
    1898:	b1 2c       	mov	r11, r1
    189a:	b5 01       	movw	r22, r10
    189c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <__udivmodhi4>
    18a0:	80 83       	st	Z, r24
    18a2:	90 85       	ldd	r25, Z+8	; 0x08
    18a4:	90 7f       	andi	r25, 0xF0	; 240
    18a6:	96 60       	ori	r25, 0x06	; 6
    18a8:	90 87       	std	Z+8, r25	; 0x08
    18aa:	68 2f       	mov	r22, r24
    18ac:	c7 01       	movw	r24, r14
    18ae:	d5 dd       	rcall	.-1110   	; 0x145a <_ZN9INA_Class10initDeviceEh>
    18b0:	f7 01       	movw	r30, r14
    18b2:	80 81       	ld	r24, Z
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	b5 01       	movw	r22, r10
    18ba:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <__udivmodhi4>
    18be:	80 83       	st	Z, r24
    18c0:	90 85       	ldd	r25, Z+8	; 0x08
    18c2:	90 7f       	andi	r25, 0xF0	; 240
    18c4:	97 60       	ori	r25, 0x07	; 7
    18c6:	90 87       	std	Z+8, r25	; 0x08
    18c8:	68 2f       	mov	r22, r24
    18ca:	c7 01       	movw	r24, r14
    18cc:	c6 dd       	rcall	.-1140   	; 0x145a <_ZN9INA_Class10initDeviceEh>
    18ce:	f7 01       	movw	r30, r14
    18d0:	80 81       	ld	r24, Z
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	b5 01       	movw	r22, r10
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <_ZN9INA_Class5beginEhmh+0x204>
    18da:	f7 01       	movw	r30, r14
    18dc:	60 81       	ld	r22, Z
    18de:	c7 01       	movw	r24, r14
    18e0:	bc dd       	rcall	.-1160   	; 0x145a <_ZN9INA_Class10initDeviceEh>
    18e2:	f7 01       	movw	r30, r14
    18e4:	80 81       	ld	r24, Z
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	6f ef       	ldi	r22, 0xFF	; 255
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <__udivmodhi4>
    18f2:	80 83       	st	Z, r24
    18f4:	1f 5f       	subi	r17, 0xFF	; 255
    18f6:	10 38       	cpi	r17, 0x80	; 128
    18f8:	09 f0       	breq	.+2      	; 0x18fc <_ZN9INA_Class5beginEhmh+0x212>
    18fa:	39 cf       	rjmp	.-398    	; 0x176e <_ZN9INA_Class5beginEhmh+0x84>
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <_ZN9INA_Class5beginEhmh+0x220>
    18fe:	60 2f       	mov	r22, r16
    1900:	c7 01       	movw	r24, r14
    1902:	f6 dc       	rcall	.-1556   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1904:	60 2f       	mov	r22, r16
    1906:	c7 01       	movw	r24, r14
    1908:	a8 dd       	rcall	.-1200   	; 0x145a <_ZN9INA_Class10initDeviceEh>
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	f7 01       	movw	r30, r14
    190e:	81 83       	std	Z+1, r24	; 0x01
    1910:	80 81       	ld	r24, Z
    1912:	64 96       	adiw	r28, 0x14	; 20
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	8f 90       	pop	r8
    1936:	7f 90       	pop	r7
    1938:	6f 90       	pop	r6
    193a:	5f 90       	pop	r5
    193c:	08 95       	ret

0000193e <_ZN9INA_Class16setBusConversionEmh>:
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
    1950:	6a 01       	movw	r12, r20
    1952:	7b 01       	movw	r14, r22
    1954:	02 2f       	mov	r16, r18
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	68 81       	ld	r22, Y
    195a:	16 17       	cp	r17, r22
    195c:	08 f0       	brcs	.+2      	; 0x1960 <_ZN9INA_Class16setBusConversionEmh+0x22>
    195e:	f2 c0       	rjmp	.+484    	; 0x1b44 <_ZN9INA_Class16setBusConversionEmh+0x206>
    1960:	0f 3f       	cpi	r16, 0xFF	; 255
    1962:	29 f0       	breq	.+10     	; 0x196e <_ZN9INA_Class16setBusConversionEmh+0x30>
    1964:	80 2f       	mov	r24, r16
    1966:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodqi4>
    196a:	19 13       	cpse	r17, r25
    196c:	e9 c0       	rjmp	.+466    	; 0x1b40 <_ZN9INA_Class16setBusConversionEmh+0x202>
    196e:	61 2f       	mov	r22, r17
    1970:	ce 01       	movw	r24, r28
    1972:	be dc       	rcall	.-1668   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1974:	49 85       	ldd	r20, Y+9	; 0x09
    1976:	4f 77       	andi	r20, 0x7F	; 127
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	ce 01       	movw	r24, r28
    197c:	8c de       	rcall	.-744    	; 0x1696 <_ZN9INA_Class8readWordEhh>
    197e:	58 85       	ldd	r21, Y+8	; 0x08
    1980:	25 2f       	mov	r18, r21
    1982:	2f 70       	andi	r18, 0x0F	; 15
    1984:	21 f0       	breq	.+8      	; 0x198e <_ZN9INA_Class16setBusConversionEmh+0x50>
    1986:	28 30       	cpi	r18, 0x08	; 8
    1988:	08 f0       	brcs	.+2      	; 0x198c <_ZN9INA_Class16setBusConversionEmh+0x4e>
    198a:	d4 c0       	rjmp	.+424    	; 0x1b34 <_ZN9INA_Class16setBusConversionEmh+0x1f6>
    198c:	74 c0       	rjmp	.+232    	; 0x1a76 <_ZN9INA_Class16setBusConversionEmh+0x138>
    198e:	24 e0       	ldi	r18, 0x04	; 4
    1990:	c2 16       	cp	r12, r18
    1992:	2a e0       	ldi	r18, 0x0A	; 10
    1994:	d2 06       	cpc	r13, r18
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	e2 06       	cpc	r14, r18
    199a:	f1 04       	cpc	r15, r1
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <_ZN9INA_Class16setBusConversionEmh+0x62>
    199e:	45 c0       	rjmp	.+138    	; 0x1a2a <_ZN9INA_Class16setBusConversionEmh+0xec>
    19a0:	42 e0       	ldi	r20, 0x02	; 2
    19a2:	c4 16       	cp	r12, r20
    19a4:	45 e8       	ldi	r20, 0x85	; 133
    19a6:	d4 06       	cpc	r13, r20
    19a8:	e1 04       	cpc	r14, r1
    19aa:	f1 04       	cpc	r15, r1
    19ac:	08 f0       	brcs	.+2      	; 0x19b0 <_ZN9INA_Class16setBusConversionEmh+0x72>
    19ae:	40 c0       	rjmp	.+128    	; 0x1a30 <_ZN9INA_Class16setBusConversionEmh+0xf2>
    19b0:	2c e7       	ldi	r18, 0x7C	; 124
    19b2:	c2 16       	cp	r12, r18
    19b4:	22 e4       	ldi	r18, 0x42	; 66
    19b6:	d2 06       	cpc	r13, r18
    19b8:	e1 04       	cpc	r14, r1
    19ba:	f1 04       	cpc	r15, r1
    19bc:	e0 f5       	brcc	.+120    	; 0x1a36 <_ZN9INA_Class16setBusConversionEmh+0xf8>
    19be:	4e e3       	ldi	r20, 0x3E	; 62
    19c0:	c4 16       	cp	r12, r20
    19c2:	41 e2       	ldi	r20, 0x21	; 33
    19c4:	d4 06       	cpc	r13, r20
    19c6:	e1 04       	cpc	r14, r1
    19c8:	f1 04       	cpc	r15, r1
    19ca:	c0 f5       	brcc	.+112    	; 0x1a3c <_ZN9INA_Class16setBusConversionEmh+0xfe>
    19cc:	24 ea       	ldi	r18, 0xA4	; 164
    19ce:	c2 16       	cp	r12, r18
    19d0:	20 e1       	ldi	r18, 0x10	; 16
    19d2:	d2 06       	cpc	r13, r18
    19d4:	e1 04       	cpc	r14, r1
    19d6:	f1 04       	cpc	r15, r1
    19d8:	a0 f5       	brcc	.+104    	; 0x1a42 <_ZN9INA_Class16setBusConversionEmh+0x104>
    19da:	42 e5       	ldi	r20, 0x52	; 82
    19dc:	c4 16       	cp	r12, r20
    19de:	48 e0       	ldi	r20, 0x08	; 8
    19e0:	d4 06       	cpc	r13, r20
    19e2:	e1 04       	cpc	r14, r1
    19e4:	f1 04       	cpc	r15, r1
    19e6:	80 f5       	brcc	.+96     	; 0x1a48 <_ZN9INA_Class16setBusConversionEmh+0x10a>
    19e8:	24 e2       	ldi	r18, 0x24	; 36
    19ea:	c2 16       	cp	r12, r18
    19ec:	24 e0       	ldi	r18, 0x04	; 4
    19ee:	d2 06       	cpc	r13, r18
    19f0:	e1 04       	cpc	r14, r1
    19f2:	f1 04       	cpc	r15, r1
    19f4:	60 f5       	brcc	.+88     	; 0x1a4e <_ZN9INA_Class16setBusConversionEmh+0x110>
    19f6:	44 e1       	ldi	r20, 0x14	; 20
    19f8:	c4 16       	cp	r12, r20
    19fa:	42 e0       	ldi	r20, 0x02	; 2
    19fc:	d4 06       	cpc	r13, r20
    19fe:	e1 04       	cpc	r14, r1
    1a00:	f1 04       	cpc	r15, r1
    1a02:	40 f5       	brcc	.+80     	; 0x1a54 <_ZN9INA_Class16setBusConversionEmh+0x116>
    1a04:	24 e1       	ldi	r18, 0x14	; 20
    1a06:	c2 16       	cp	r12, r18
    1a08:	21 e0       	ldi	r18, 0x01	; 1
    1a0a:	d2 06       	cpc	r13, r18
    1a0c:	e1 04       	cpc	r14, r1
    1a0e:	f1 04       	cpc	r15, r1
    1a10:	20 f5       	brcc	.+72     	; 0x1a5a <_ZN9INA_Class16setBusConversionEmh+0x11c>
    1a12:	31 e0       	ldi	r19, 0x01	; 1
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	44 e9       	ldi	r20, 0x94	; 148
    1a18:	c4 16       	cp	r12, r20
    1a1a:	d1 04       	cpc	r13, r1
    1a1c:	e1 04       	cpc	r14, r1
    1a1e:	f1 04       	cpc	r15, r1
    1a20:	08 f4       	brcc	.+2      	; 0x1a24 <_ZN9INA_Class16setBusConversionEmh+0xe6>
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	63 2f       	mov	r22, r19
    1a26:	72 2f       	mov	r23, r18
    1a28:	1a c0       	rjmp	.+52     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a2a:	6f e0       	ldi	r22, 0x0F	; 15
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	17 c0       	rjmp	.+46     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a30:	6e e0       	ldi	r22, 0x0E	; 14
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a36:	6d e0       	ldi	r22, 0x0D	; 13
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	11 c0       	rjmp	.+34     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a3c:	6c e0       	ldi	r22, 0x0C	; 12
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	0e c0       	rjmp	.+28     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a42:	6b e0       	ldi	r22, 0x0B	; 11
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0b c0       	rjmp	.+22     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a48:	6a e0       	ldi	r22, 0x0A	; 10
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	08 c0       	rjmp	.+16     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a4e:	69 e0       	ldi	r22, 0x09	; 9
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a54:	68 e0       	ldi	r22, 0x08	; 8
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <_ZN9INA_Class16setBusConversionEmh+0x120>
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	9c 01       	movw	r18, r24
    1a60:	2f 77       	andi	r18, 0x7F	; 127
    1a62:	38 7f       	andi	r19, 0xF8	; 248
    1a64:	76 95       	lsr	r23
    1a66:	76 2f       	mov	r23, r22
    1a68:	66 27       	eor	r22, r22
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	cb 01       	movw	r24, r22
    1a70:	82 2b       	or	r24, r18
    1a72:	93 2b       	or	r25, r19
    1a74:	5f c0       	rjmp	.+190    	; 0x1b34 <_ZN9INA_Class16setBusConversionEmh+0x1f6>
    1a76:	28 e0       	ldi	r18, 0x08	; 8
    1a78:	c2 16       	cp	r12, r18
    1a7a:	22 e4       	ldi	r18, 0x42	; 66
    1a7c:	d2 06       	cpc	r13, r18
    1a7e:	21 e0       	ldi	r18, 0x01	; 1
    1a80:	e2 06       	cpc	r14, r18
    1a82:	f1 04       	cpc	r15, r1
    1a84:	78 f5       	brcc	.+94     	; 0x1ae4 <_ZN9INA_Class16setBusConversionEmh+0x1a6>
    1a86:	48 e5       	ldi	r20, 0x58	; 88
    1a88:	c4 16       	cp	r12, r20
    1a8a:	42 ea       	ldi	r20, 0xA2	; 162
    1a8c:	d4 06       	cpc	r13, r20
    1a8e:	e1 04       	cpc	r14, r1
    1a90:	f1 04       	cpc	r15, r1
    1a92:	58 f5       	brcc	.+86     	; 0x1aea <_ZN9INA_Class16setBusConversionEmh+0x1ac>
    1a94:	28 ea       	ldi	r18, 0xA8	; 168
    1a96:	c2 16       	cp	r12, r18
    1a98:	22 e5       	ldi	r18, 0x52	; 82
    1a9a:	d2 06       	cpc	r13, r18
    1a9c:	e1 04       	cpc	r14, r1
    1a9e:	f1 04       	cpc	r15, r1
    1aa0:	38 f5       	brcc	.+78     	; 0x1af0 <_ZN9INA_Class16setBusConversionEmh+0x1b2>
    1aa2:	48 ef       	ldi	r20, 0xF8	; 248
    1aa4:	c4 16       	cp	r12, r20
    1aa6:	4a e2       	ldi	r20, 0x2A	; 42
    1aa8:	d4 06       	cpc	r13, r20
    1aaa:	e1 04       	cpc	r14, r1
    1aac:	f1 04       	cpc	r15, r1
    1aae:	18 f5       	brcc	.+70     	; 0x1af6 <_ZN9INA_Class16setBusConversionEmh+0x1b8>
    1ab0:	2c e4       	ldi	r18, 0x4C	; 76
    1ab2:	c2 16       	cp	r12, r18
    1ab4:	22 e0       	ldi	r18, 0x02	; 2
    1ab6:	d2 06       	cpc	r13, r18
    1ab8:	e1 04       	cpc	r14, r1
    1aba:	f1 04       	cpc	r15, r1
    1abc:	f8 f4       	brcc	.+62     	; 0x1afc <_ZN9INA_Class16setBusConversionEmh+0x1be>
    1abe:	4c e4       	ldi	r20, 0x4C	; 76
    1ac0:	c4 16       	cp	r12, r20
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	d4 06       	cpc	r13, r20
    1ac6:	e1 04       	cpc	r14, r1
    1ac8:	f1 04       	cpc	r15, r1
    1aca:	d8 f4       	brcc	.+54     	; 0x1b02 <_ZN9INA_Class16setBusConversionEmh+0x1c4>
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	2c ec       	ldi	r18, 0xCC	; 204
    1ad2:	c2 16       	cp	r12, r18
    1ad4:	d1 04       	cpc	r13, r1
    1ad6:	e1 04       	cpc	r14, r1
    1ad8:	f1 04       	cpc	r15, r1
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <_ZN9INA_Class16setBusConversionEmh+0x1a0>
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	26 2f       	mov	r18, r22
    1ae0:	34 2f       	mov	r19, r20
    1ae2:	11 c0       	rjmp	.+34     	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1ae4:	27 e0       	ldi	r18, 0x07	; 7
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1aea:	26 e0       	ldi	r18, 0x06	; 6
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	0b c0       	rjmp	.+22     	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1af0:	25 e0       	ldi	r18, 0x05	; 5
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	08 c0       	rjmp	.+16     	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1af6:	24 e0       	ldi	r18, 0x04	; 4
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1afc:	23 e0       	ldi	r18, 0x03	; 3
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <_ZN9INA_Class16setBusConversionEmh+0x1c8>
    1b02:	22 e0       	ldi	r18, 0x02	; 2
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	5f 70       	andi	r21, 0x0F	; 15
    1b08:	bc 01       	movw	r22, r24
    1b0a:	6f 73       	andi	r22, 0x3F	; 63
    1b0c:	7e 7f       	andi	r23, 0xFE	; 254
    1b0e:	51 30       	cpi	r21, 0x01	; 1
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <_ZN9INA_Class16setBusConversionEmh+0x1da>
    1b12:	55 50       	subi	r21, 0x05	; 5
    1b14:	53 30       	cpi	r21, 0x03	; 3
    1b16:	30 f4       	brcc	.+12     	; 0x1b24 <_ZN9INA_Class16setBusConversionEmh+0x1e6>
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	9a 95       	dec	r25
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <_ZN9INA_Class16setBusConversionEmh+0x1dc>
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <_ZN9INA_Class16setBusConversionEmh+0x1f0>
    1b24:	36 95       	lsr	r19
    1b26:	32 2f       	mov	r19, r18
    1b28:	22 27       	eor	r18, r18
    1b2a:	37 95       	ror	r19
    1b2c:	27 95       	ror	r18
    1b2e:	c9 01       	movw	r24, r18
    1b30:	86 2b       	or	r24, r22
    1b32:	97 2b       	or	r25, r23
    1b34:	29 85       	ldd	r18, Y+9	; 0x09
    1b36:	2f 77       	andi	r18, 0x7F	; 127
    1b38:	ac 01       	movw	r20, r24
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	69 dc       	rcall	.-1838   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    1b40:	1f 5f       	subi	r17, 0xFF	; 255
    1b42:	0a cf       	rjmp	.-492    	; 0x1958 <_ZN9INA_Class16setBusConversionEmh+0x1a>
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	08 95       	ret

00001b56 <_ZN9INA_Class18setShuntConversionEmh>:
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	ec 01       	movw	r28, r24
    1b68:	6a 01       	movw	r12, r20
    1b6a:	7b 01       	movw	r14, r22
    1b6c:	02 2f       	mov	r16, r18
    1b6e:	10 e0       	ldi	r17, 0x00	; 0
    1b70:	68 81       	ld	r22, Y
    1b72:	16 17       	cp	r17, r22
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <_ZN9INA_Class18setShuntConversionEmh+0x22>
    1b76:	e8 c0       	rjmp	.+464    	; 0x1d48 <_ZN9INA_Class18setShuntConversionEmh+0x1f2>
    1b78:	0f 3f       	cpi	r16, 0xFF	; 255
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <_ZN9INA_Class18setShuntConversionEmh+0x30>
    1b7c:	80 2f       	mov	r24, r16
    1b7e:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodqi4>
    1b82:	19 13       	cpse	r17, r25
    1b84:	df c0       	rjmp	.+446    	; 0x1d44 <_ZN9INA_Class18setShuntConversionEmh+0x1ee>
    1b86:	61 2f       	mov	r22, r17
    1b88:	ce 01       	movw	r24, r28
    1b8a:	b2 db       	rcall	.-2204   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1b8c:	49 85       	ldd	r20, Y+9	; 0x09
    1b8e:	4f 77       	andi	r20, 0x7F	; 127
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	80 dd       	rcall	.-1280   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1b96:	ac 01       	movw	r20, r24
    1b98:	88 85       	ldd	r24, Y+8	; 0x08
    1b9a:	98 2f       	mov	r25, r24
    1b9c:	9f 70       	andi	r25, 0x0F	; 15
    1b9e:	21 f0       	breq	.+8      	; 0x1ba8 <_ZN9INA_Class18setShuntConversionEmh+0x52>
    1ba0:	98 30       	cpi	r25, 0x08	; 8
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <_ZN9INA_Class18setShuntConversionEmh+0x50>
    1ba4:	ca c0       	rjmp	.+404    	; 0x1d3a <_ZN9INA_Class18setShuntConversionEmh+0x1e4>
    1ba6:	6f c0       	rjmp	.+222    	; 0x1c86 <_ZN9INA_Class18setShuntConversionEmh+0x130>
    1ba8:	24 e0       	ldi	r18, 0x04	; 4
    1baa:	c2 16       	cp	r12, r18
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	d2 06       	cpc	r13, r18
    1bb0:	21 e0       	ldi	r18, 0x01	; 1
    1bb2:	e2 06       	cpc	r14, r18
    1bb4:	f1 04       	cpc	r15, r1
    1bb6:	08 f0       	brcs	.+2      	; 0x1bba <_ZN9INA_Class18setShuntConversionEmh+0x64>
    1bb8:	45 c0       	rjmp	.+138    	; 0x1c44 <_ZN9INA_Class18setShuntConversionEmh+0xee>
    1bba:	32 e0       	ldi	r19, 0x02	; 2
    1bbc:	c3 16       	cp	r12, r19
    1bbe:	35 e8       	ldi	r19, 0x85	; 133
    1bc0:	d3 06       	cpc	r13, r19
    1bc2:	e1 04       	cpc	r14, r1
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <_ZN9INA_Class18setShuntConversionEmh+0x74>
    1bc8:	40 c0       	rjmp	.+128    	; 0x1c4a <_ZN9INA_Class18setShuntConversionEmh+0xf4>
    1bca:	8c e7       	ldi	r24, 0x7C	; 124
    1bcc:	c8 16       	cp	r12, r24
    1bce:	82 e4       	ldi	r24, 0x42	; 66
    1bd0:	d8 06       	cpc	r13, r24
    1bd2:	e1 04       	cpc	r14, r1
    1bd4:	f1 04       	cpc	r15, r1
    1bd6:	e0 f5       	brcc	.+120    	; 0x1c50 <_ZN9INA_Class18setShuntConversionEmh+0xfa>
    1bd8:	9e e3       	ldi	r25, 0x3E	; 62
    1bda:	c9 16       	cp	r12, r25
    1bdc:	91 e2       	ldi	r25, 0x21	; 33
    1bde:	d9 06       	cpc	r13, r25
    1be0:	e1 04       	cpc	r14, r1
    1be2:	f1 04       	cpc	r15, r1
    1be4:	c0 f5       	brcc	.+112    	; 0x1c56 <_ZN9INA_Class18setShuntConversionEmh+0x100>
    1be6:	24 ea       	ldi	r18, 0xA4	; 164
    1be8:	c2 16       	cp	r12, r18
    1bea:	20 e1       	ldi	r18, 0x10	; 16
    1bec:	d2 06       	cpc	r13, r18
    1bee:	e1 04       	cpc	r14, r1
    1bf0:	f1 04       	cpc	r15, r1
    1bf2:	a0 f5       	brcc	.+104    	; 0x1c5c <_ZN9INA_Class18setShuntConversionEmh+0x106>
    1bf4:	32 e5       	ldi	r19, 0x52	; 82
    1bf6:	c3 16       	cp	r12, r19
    1bf8:	38 e0       	ldi	r19, 0x08	; 8
    1bfa:	d3 06       	cpc	r13, r19
    1bfc:	e1 04       	cpc	r14, r1
    1bfe:	f1 04       	cpc	r15, r1
    1c00:	80 f5       	brcc	.+96     	; 0x1c62 <_ZN9INA_Class18setShuntConversionEmh+0x10c>
    1c02:	84 e2       	ldi	r24, 0x24	; 36
    1c04:	c8 16       	cp	r12, r24
    1c06:	84 e0       	ldi	r24, 0x04	; 4
    1c08:	d8 06       	cpc	r13, r24
    1c0a:	e1 04       	cpc	r14, r1
    1c0c:	f1 04       	cpc	r15, r1
    1c0e:	60 f5       	brcc	.+88     	; 0x1c68 <_ZN9INA_Class18setShuntConversionEmh+0x112>
    1c10:	94 e1       	ldi	r25, 0x14	; 20
    1c12:	c9 16       	cp	r12, r25
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	d9 06       	cpc	r13, r25
    1c18:	e1 04       	cpc	r14, r1
    1c1a:	f1 04       	cpc	r15, r1
    1c1c:	40 f5       	brcc	.+80     	; 0x1c6e <_ZN9INA_Class18setShuntConversionEmh+0x118>
    1c1e:	24 e1       	ldi	r18, 0x14	; 20
    1c20:	c2 16       	cp	r12, r18
    1c22:	21 e0       	ldi	r18, 0x01	; 1
    1c24:	d2 06       	cpc	r13, r18
    1c26:	e1 04       	cpc	r14, r1
    1c28:	f1 04       	cpc	r15, r1
    1c2a:	20 f5       	brcc	.+72     	; 0x1c74 <_ZN9INA_Class18setShuntConversionEmh+0x11e>
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	34 e9       	ldi	r19, 0x94	; 148
    1c32:	c3 16       	cp	r12, r19
    1c34:	d1 04       	cpc	r13, r1
    1c36:	e1 04       	cpc	r14, r1
    1c38:	f1 04       	cpc	r15, r1
    1c3a:	08 f4       	brcc	.+2      	; 0x1c3e <_ZN9INA_Class18setShuntConversionEmh+0xe8>
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	29 2f       	mov	r18, r25
    1c40:	38 2f       	mov	r19, r24
    1c42:	1a c0       	rjmp	.+52     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c44:	2f e0       	ldi	r18, 0x0F	; 15
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	17 c0       	rjmp	.+46     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c4a:	2e e0       	ldi	r18, 0x0E	; 14
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c50:	2d e0       	ldi	r18, 0x0D	; 13
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	11 c0       	rjmp	.+34     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c56:	2c e0       	ldi	r18, 0x0C	; 12
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c5c:	2b e0       	ldi	r18, 0x0B	; 11
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c62:	2a e0       	ldi	r18, 0x0A	; 10
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	08 c0       	rjmp	.+16     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c68:	29 e0       	ldi	r18, 0x09	; 9
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c6e:	28 e0       	ldi	r18, 0x08	; 8
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <_ZN9INA_Class18setShuntConversionEmh+0x122>
    1c74:	22 e0       	ldi	r18, 0x02	; 2
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	47 7c       	andi	r20, 0xC7	; 199
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	9a 95       	dec	r25
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <_ZN9INA_Class18setShuntConversionEmh+0x126>
    1c84:	58 c0       	rjmp	.+176    	; 0x1d36 <_ZN9INA_Class18setShuntConversionEmh+0x1e0>
    1c86:	98 e0       	ldi	r25, 0x08	; 8
    1c88:	c9 16       	cp	r12, r25
    1c8a:	92 e4       	ldi	r25, 0x42	; 66
    1c8c:	d9 06       	cpc	r13, r25
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	e9 06       	cpc	r14, r25
    1c92:	f1 04       	cpc	r15, r1
    1c94:	78 f5       	brcc	.+94     	; 0x1cf4 <_ZN9INA_Class18setShuntConversionEmh+0x19e>
    1c96:	28 e5       	ldi	r18, 0x58	; 88
    1c98:	c2 16       	cp	r12, r18
    1c9a:	22 ea       	ldi	r18, 0xA2	; 162
    1c9c:	d2 06       	cpc	r13, r18
    1c9e:	e1 04       	cpc	r14, r1
    1ca0:	f1 04       	cpc	r15, r1
    1ca2:	58 f5       	brcc	.+86     	; 0x1cfa <_ZN9INA_Class18setShuntConversionEmh+0x1a4>
    1ca4:	38 ea       	ldi	r19, 0xA8	; 168
    1ca6:	c3 16       	cp	r12, r19
    1ca8:	32 e5       	ldi	r19, 0x52	; 82
    1caa:	d3 06       	cpc	r13, r19
    1cac:	e1 04       	cpc	r14, r1
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	38 f5       	brcc	.+78     	; 0x1d00 <_ZN9INA_Class18setShuntConversionEmh+0x1aa>
    1cb2:	98 ef       	ldi	r25, 0xF8	; 248
    1cb4:	c9 16       	cp	r12, r25
    1cb6:	9a e2       	ldi	r25, 0x2A	; 42
    1cb8:	d9 06       	cpc	r13, r25
    1cba:	e1 04       	cpc	r14, r1
    1cbc:	f1 04       	cpc	r15, r1
    1cbe:	18 f5       	brcc	.+70     	; 0x1d06 <_ZN9INA_Class18setShuntConversionEmh+0x1b0>
    1cc0:	2c e4       	ldi	r18, 0x4C	; 76
    1cc2:	c2 16       	cp	r12, r18
    1cc4:	22 e0       	ldi	r18, 0x02	; 2
    1cc6:	d2 06       	cpc	r13, r18
    1cc8:	e1 04       	cpc	r14, r1
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	f8 f4       	brcc	.+62     	; 0x1d0c <_ZN9INA_Class18setShuntConversionEmh+0x1b6>
    1cce:	3c e4       	ldi	r19, 0x4C	; 76
    1cd0:	c3 16       	cp	r12, r19
    1cd2:	31 e0       	ldi	r19, 0x01	; 1
    1cd4:	d3 06       	cpc	r13, r19
    1cd6:	e1 04       	cpc	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	d8 f4       	brcc	.+54     	; 0x1d12 <_ZN9INA_Class18setShuntConversionEmh+0x1bc>
    1cdc:	21 e0       	ldi	r18, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	3c ec       	ldi	r19, 0xCC	; 204
    1ce2:	c3 16       	cp	r12, r19
    1ce4:	d1 04       	cpc	r13, r1
    1ce6:	e1 04       	cpc	r14, r1
    1ce8:	f1 04       	cpc	r15, r1
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <_ZN9INA_Class18setShuntConversionEmh+0x198>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	62 2f       	mov	r22, r18
    1cf0:	79 2f       	mov	r23, r25
    1cf2:	11 c0       	rjmp	.+34     	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1cf4:	67 e0       	ldi	r22, 0x07	; 7
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	0b c0       	rjmp	.+22     	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1d00:	65 e0       	ldi	r22, 0x05	; 5
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	05 c0       	rjmp	.+10     	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1d0c:	63 e0       	ldi	r22, 0x03	; 3
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <_ZN9INA_Class18setShuntConversionEmh+0x1c0>
    1d12:	62 e0       	ldi	r22, 0x02	; 2
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	8f 70       	andi	r24, 0x0F	; 15
    1d18:	9a 01       	movw	r18, r20
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <_ZN9INA_Class18setShuntConversionEmh+0x1ce>
    1d1e:	85 50       	subi	r24, 0x05	; 5
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	10 f4       	brcc	.+4      	; 0x1d28 <_ZN9INA_Class18setShuntConversionEmh+0x1d2>
    1d24:	27 7e       	andi	r18, 0xE7	; 231
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <_ZN9INA_Class18setShuntConversionEmh+0x1d4>
    1d28:	27 7c       	andi	r18, 0xC7	; 199
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	66 0f       	add	r22, r22
    1d2e:	77 1f       	adc	r23, r23
    1d30:	8a 95       	dec	r24
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <_ZN9INA_Class18setShuntConversionEmh+0x1d6>
    1d34:	ab 01       	movw	r20, r22
    1d36:	42 2b       	or	r20, r18
    1d38:	53 2b       	or	r21, r19
    1d3a:	29 85       	ldd	r18, Y+9	; 0x09
    1d3c:	2f 77       	andi	r18, 0x7F	; 127
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	ce 01       	movw	r24, r28
    1d42:	67 db       	rcall	.-2354   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    1d44:	1f 5f       	subi	r17, 0xFF	; 255
    1d46:	14 cf       	rjmp	.-472    	; 0x1b70 <_ZN9INA_Class18setShuntConversionEmh+0x1a>
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	08 95       	ret

00001d5a <_ZN9INA_Class9getBusRawEh>:
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	ec 01       	movw	r28, r24
    1d64:	c5 da       	rcall	.-2678   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1d66:	49 85       	ldd	r20, Y+9	; 0x09
    1d68:	4f 77       	andi	r20, 0x7F	; 127
    1d6a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d6c:	67 70       	andi	r22, 0x07	; 7
    1d6e:	ce 01       	movw	r24, r28
    1d70:	92 dc       	rcall	.-1756   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1d72:	8c 01       	movw	r16, r24
    1d74:	88 85       	ldd	r24, Y+8	; 0x08
    1d76:	98 2f       	mov	r25, r24
    1d78:	9f 70       	andi	r25, 0x0F	; 15
    1d7a:	2b ef       	ldi	r18, 0xFB	; 251
    1d7c:	29 0f       	add	r18, r25
    1d7e:	23 30       	cpi	r18, 0x03	; 3
    1d80:	10 f0       	brcs	.+4      	; 0x1d86 <_ZN9INA_Class9getBusRawEh+0x2c>
    1d82:	91 11       	cpse	r25, r1
    1d84:	05 c0       	rjmp	.+10     	; 0x1d90 <_ZN9INA_Class9getBusRawEh+0x36>
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	16 95       	lsr	r17
    1d8a:	07 95       	ror	r16
    1d8c:	9a 95       	dec	r25
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <_ZN9INA_Class9getBusRawEh+0x2e>
    1d90:	82 95       	swap	r24
    1d92:	8f 70       	andi	r24, 0x0F	; 15
    1d94:	82 fd       	sbrc	r24, 2
    1d96:	0d c0       	rjmp	.+26     	; 0x1db2 <_ZN9INA_Class9getBusRawEh+0x58>
    1d98:	81 ff       	sbrs	r24, 1
    1d9a:	0b c0       	rjmp	.+22     	; 0x1db2 <_ZN9INA_Class9getBusRawEh+0x58>
    1d9c:	49 85       	ldd	r20, Y+9	; 0x09
    1d9e:	4f 77       	andi	r20, 0x7F	; 127
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	ce 01       	movw	r24, r28
    1da4:	78 dc       	rcall	.-1808   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1da6:	29 85       	ldd	r18, Y+9	; 0x09
    1da8:	2f 77       	andi	r18, 0x7F	; 127
    1daa:	ac 01       	movw	r20, r24
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	ce 01       	movw	r24, r28
    1db0:	30 db       	rcall	.-2464   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    1db2:	c8 01       	movw	r24, r16
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <_ZN9INA_Class16getBusMilliVoltsEh>:
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	ca df       	rcall	.-108    	; 0x1d5a <_ZN9INA_Class9getBusRawEh>
    1dc6:	aa 89       	ldd	r26, Y+18	; 0x12
    1dc8:	bb 89       	ldd	r27, Y+19	; 0x13
    1dca:	9c 01       	movw	r18, r24
    1dcc:	0e 94 b6 20 	call	0x416c	; 0x416c <__umulhisi3>
    1dd0:	24 e6       	ldi	r18, 0x64	; 100
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodsi4>
    1ddc:	c9 01       	movw	r24, r18
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <_ZN9INA_Class18getShuntMicroVoltsEh>:
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	ec 01       	movw	r28, r24
    1df2:	f6 2e       	mov	r15, r22
    1df4:	c8 d0       	rcall	.+400    	; 0x1f86 <_ZN9INA_Class11getShuntRawEh>
    1df6:	dc 01       	movw	r26, r24
    1df8:	98 85       	ldd	r25, Y+8	; 0x08
    1dfa:	9f 70       	andi	r25, 0x0F	; 15
    1dfc:	94 30       	cpi	r25, 0x04	; 4
    1dfe:	41 f4       	brne	.+16     	; 0x1e10 <_ZN9INA_Class18getShuntMicroVoltsEh+0x2c>
    1e00:	6f 2d       	mov	r22, r15
    1e02:	ce 01       	movw	r24, r28
    1e04:	2c d0       	rcall	.+88     	; 0x1e5e <_ZN9INA_Class15getBusMicroAmpsEh>
    1e06:	28 ec       	ldi	r18, 0xC8	; 200
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <_ZN9INA_Class18getShuntMicroVoltsEh+0x3c>
    1e10:	28 89       	ldd	r18, Y+16	; 0x10
    1e12:	39 89       	ldd	r19, Y+17	; 0x11
    1e14:	0e 94 c5 20 	call	0x418a	; 0x418a <__usmulhisi3>
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	0e 94 92 20 	call	0x4124	; 0x4124 <__divmodsi4>
    1e24:	69 01       	movw	r12, r18
    1e26:	7a 01       	movw	r14, r20
    1e28:	88 85       	ldd	r24, Y+8	; 0x08
    1e2a:	82 95       	swap	r24
    1e2c:	8f 70       	andi	r24, 0x0F	; 15
    1e2e:	82 fd       	sbrc	r24, 2
    1e30:	0d c0       	rjmp	.+26     	; 0x1e4c <_ZN9INA_Class18getShuntMicroVoltsEh+0x68>
    1e32:	80 ff       	sbrs	r24, 0
    1e34:	0b c0       	rjmp	.+22     	; 0x1e4c <_ZN9INA_Class18getShuntMicroVoltsEh+0x68>
    1e36:	49 85       	ldd	r20, Y+9	; 0x09
    1e38:	4f 77       	andi	r20, 0x7F	; 127
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	2b dc       	rcall	.-1962   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1e40:	29 85       	ldd	r18, Y+9	; 0x09
    1e42:	2f 77       	andi	r18, 0x7F	; 127
    1e44:	ac 01       	movw	r20, r24
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	ce 01       	movw	r24, r28
    1e4a:	e3 da       	rcall	.-2618   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	b6 01       	movw	r22, r12
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	08 95       	ret

00001e5e <_ZN9INA_Class15getBusMicroAmpsEh>:
    1e5e:	2f 92       	push	r2
    1e60:	3f 92       	push	r3
    1e62:	4f 92       	push	r4
    1e64:	5f 92       	push	r5
    1e66:	6f 92       	push	r6
    1e68:	7f 92       	push	r7
    1e6a:	8f 92       	push	r8
    1e6c:	9f 92       	push	r9
    1e6e:	af 92       	push	r10
    1e70:	bf 92       	push	r11
    1e72:	cf 92       	push	r12
    1e74:	df 92       	push	r13
    1e76:	ef 92       	push	r14
    1e78:	ff 92       	push	r15
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	ec 01       	movw	r28, r24
    1e84:	16 2f       	mov	r17, r22
    1e86:	34 da       	rcall	.-2968   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1e88:	88 85       	ldd	r24, Y+8	; 0x08
    1e8a:	8f 70       	andi	r24, 0x0F	; 15
    1e8c:	85 50       	subi	r24, 0x05	; 5
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	90 f5       	brcc	.+100    	; 0x1ef6 <_ZN9INA_Class15getBusMicroAmpsEh+0x98>
    1e92:	61 2f       	mov	r22, r17
    1e94:	ce 01       	movw	r24, r28
    1e96:	a6 df       	rcall	.-180    	; 0x1de4 <_ZN9INA_Class18getShuntMicroVoltsEh>
    1e98:	2b 01       	movw	r4, r22
    1e9a:	3c 01       	movw	r6, r24
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	92 95       	swap	r25
    1ea0:	96 95       	lsr	r25
    1ea2:	96 95       	lsr	r25
    1ea4:	93 70       	andi	r25, 0x03	; 3
    1ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea8:	58 2f       	mov	r21, r24
    1eaa:	55 0f       	add	r21, r21
    1eac:	55 0f       	add	r21, r21
    1eae:	25 2f       	mov	r18, r21
    1eb0:	29 2b       	or	r18, r25
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	92 95       	swap	r25
    1eb6:	96 95       	lsr	r25
    1eb8:	96 95       	lsr	r25
    1eba:	93 70       	andi	r25, 0x03	; 3
    1ebc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ebe:	58 2f       	mov	r21, r24
    1ec0:	55 0f       	add	r21, r21
    1ec2:	55 0f       	add	r21, r21
    1ec4:	35 2f       	mov	r19, r21
    1ec6:	39 2b       	or	r19, r25
    1ec8:	98 2f       	mov	r25, r24
    1eca:	92 95       	swap	r25
    1ecc:	96 95       	lsr	r25
    1ece:	96 95       	lsr	r25
    1ed0:	93 70       	andi	r25, 0x03	; 3
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	83 70       	andi	r24, 0x03	; 3
    1ed6:	88 0f       	add	r24, r24
    1ed8:	88 0f       	add	r24, r24
    1eda:	48 2f       	mov	r20, r24
    1edc:	49 2b       	or	r20, r25
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	60 e4       	ldi	r22, 0x40	; 64
    1ee2:	72 e4       	ldi	r23, 0x42	; 66
    1ee4:	8f e0       	ldi	r24, 0x0F	; 15
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 92 20 	call	0x4124	; 0x4124 <__divmodsi4>
    1eec:	c3 01       	movw	r24, r6
    1eee:	b2 01       	movw	r22, r4
    1ef0:	0e 94 41 20 	call	0x4082	; 0x4082 <__mulsi3>
    1ef4:	35 c0       	rjmp	.+106    	; 0x1f60 <_ZN9INA_Class15getBusMicroAmpsEh+0x102>
    1ef6:	49 85       	ldd	r20, Y+9	; 0x09
    1ef8:	4f 77       	andi	r20, 0x7F	; 127
    1efa:	6e 85       	ldd	r22, Y+14	; 0x0e
    1efc:	86 2f       	mov	r24, r22
    1efe:	82 95       	swap	r24
    1f00:	86 95       	lsr	r24
    1f02:	86 95       	lsr	r24
    1f04:	83 70       	andi	r24, 0x03	; 3
    1f06:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f08:	61 70       	andi	r22, 0x01	; 1
    1f0a:	66 0f       	add	r22, r22
    1f0c:	66 0f       	add	r22, r22
    1f0e:	68 2b       	or	r22, r24
    1f10:	ce 01       	movw	r24, r28
    1f12:	c1 db       	rcall	.-2174   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1f14:	4c 89       	ldd	r20, Y+20	; 0x14
    1f16:	5d 89       	ldd	r21, Y+21	; 0x15
    1f18:	6e 89       	ldd	r22, Y+22	; 0x16
    1f1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1f1c:	1a 01       	movw	r2, r20
    1f1e:	2b 01       	movw	r4, r22
    1f20:	a8 2e       	mov	r10, r24
    1f22:	19 2f       	mov	r17, r25
    1f24:	11 0f       	add	r17, r17
    1f26:	11 0b       	sbc	r17, r17
    1f28:	b9 2e       	mov	r11, r25
    1f2a:	c1 2e       	mov	r12, r17
    1f2c:	d1 2e       	mov	r13, r17
    1f2e:	e1 2e       	mov	r14, r17
    1f30:	f1 2e       	mov	r15, r17
    1f32:	01 2f       	mov	r16, r17
    1f34:	9a 01       	movw	r18, r20
    1f36:	a2 01       	movw	r20, r4
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 d5 20 	call	0x41aa	; 0x41aa <__muldi3>
    1f44:	e8 ee       	ldi	r30, 0xE8	; 232
    1f46:	ae 2e       	mov	r10, r30
    1f48:	f3 e0       	ldi	r31, 0x03	; 3
    1f4a:	bf 2e       	mov	r11, r31
    1f4c:	c1 2c       	mov	r12, r1
    1f4e:	d1 2c       	mov	r13, r1
    1f50:	e1 2c       	mov	r14, r1
    1f52:	f1 2c       	mov	r15, r1
    1f54:	00 e0       	ldi	r16, 0x00	; 0
    1f56:	10 e0       	ldi	r17, 0x00	; 0
    1f58:	0e 94 4f 21 	call	0x429e	; 0x429e <__divdi3>
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	ca 01       	movw	r24, r20
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	df 90       	pop	r13
    1f6e:	cf 90       	pop	r12
    1f70:	bf 90       	pop	r11
    1f72:	af 90       	pop	r10
    1f74:	9f 90       	pop	r9
    1f76:	8f 90       	pop	r8
    1f78:	7f 90       	pop	r7
    1f7a:	6f 90       	pop	r6
    1f7c:	5f 90       	pop	r5
    1f7e:	4f 90       	pop	r4
    1f80:	3f 90       	pop	r3
    1f82:	2f 90       	pop	r2
    1f84:	08 95       	ret

00001f86 <_ZN9INA_Class11getShuntRawEh>:
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	16 2f       	mov	r17, r22
    1f92:	ae d9       	rcall	.-3236   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    1f94:	88 85       	ldd	r24, Y+8	; 0x08
    1f96:	8f 70       	andi	r24, 0x0F	; 15
    1f98:	84 30       	cpi	r24, 0x04	; 4
    1f9a:	59 f4       	brne	.+22     	; 0x1fb2 <_ZN9INA_Class11getShuntRawEh+0x2c>
    1f9c:	61 2f       	mov	r22, r17
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	5e df       	rcall	.-324    	; 0x1e5e <_ZN9INA_Class15getBusMicroAmpsEh>
    1fa2:	20 e4       	ldi	r18, 0x40	; 64
    1fa4:	3d e0       	ldi	r19, 0x0D	; 13
    1fa6:	43 e0       	ldi	r20, 0x03	; 3
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	0e 94 92 20 	call	0x4124	; 0x4124 <__divmodsi4>
    1fae:	89 01       	movw	r16, r18
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <_ZN9INA_Class11getShuntRawEh+0x54>
    1fb2:	49 85       	ldd	r20, Y+9	; 0x09
    1fb4:	4f 77       	andi	r20, 0x7F	; 127
    1fb6:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fb8:	66 95       	lsr	r22
    1fba:	66 95       	lsr	r22
    1fbc:	66 95       	lsr	r22
    1fbe:	67 70       	andi	r22, 0x07	; 7
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	69 db       	rcall	.-2350   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1fc4:	8c 01       	movw	r16, r24
    1fc6:	88 85       	ldd	r24, Y+8	; 0x08
    1fc8:	8f 70       	andi	r24, 0x0F	; 15
    1fca:	85 50       	subi	r24, 0x05	; 5
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	28 f4       	brcc	.+10     	; 0x1fda <_ZN9INA_Class11getShuntRawEh+0x54>
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	15 95       	asr	r17
    1fd4:	07 95       	ror	r16
    1fd6:	8a 95       	dec	r24
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <_ZN9INA_Class11getShuntRawEh+0x4c>
    1fda:	88 85       	ldd	r24, Y+8	; 0x08
    1fdc:	82 95       	swap	r24
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	82 fd       	sbrc	r24, 2
    1fe2:	0d c0       	rjmp	.+26     	; 0x1ffe <_ZN9INA_Class11getShuntRawEh+0x78>
    1fe4:	80 ff       	sbrs	r24, 0
    1fe6:	0b c0       	rjmp	.+22     	; 0x1ffe <_ZN9INA_Class11getShuntRawEh+0x78>
    1fe8:	49 85       	ldd	r20, Y+9	; 0x09
    1fea:	4f 77       	andi	r20, 0x7F	; 127
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	ce 01       	movw	r24, r28
    1ff0:	52 db       	rcall	.-2396   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    1ff2:	29 85       	ldd	r18, Y+9	; 0x09
    1ff4:	2f 77       	andi	r18, 0x7F	; 127
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0a da       	rcall	.-3052   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    1ffe:	c8 01       	movw	r24, r16
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <_ZN9INA_Class7setModeEhh>:
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	ec 01       	movw	r28, r24
    201a:	d4 2e       	mov	r13, r20
    201c:	10 e0       	ldi	r17, 0x00	; 0
    201e:	67 70       	andi	r22, 0x07	; 7
    2020:	06 2f       	mov	r16, r22
    2022:	02 95       	swap	r16
    2024:	00 7f       	andi	r16, 0xF0	; 240
    2026:	68 81       	ld	r22, Y
    2028:	16 17       	cp	r17, r22
    202a:	28 f5       	brcc	.+74     	; 0x2076 <_ZN9INA_Class7setModeEhh+0x6c>
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	d8 16       	cp	r13, r24
    2030:	29 f0       	breq	.+10     	; 0x203c <_ZN9INA_Class7setModeEhh+0x32>
    2032:	8d 2d       	mov	r24, r13
    2034:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodqi4>
    2038:	19 13       	cpse	r17, r25
    203a:	1b c0       	rjmp	.+54     	; 0x2072 <_ZN9INA_Class7setModeEhh+0x68>
    203c:	61 2f       	mov	r22, r17
    203e:	ce 01       	movw	r24, r28
    2040:	57 d9       	rcall	.-3410   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
    2042:	49 85       	ldd	r20, Y+9	; 0x09
    2044:	4f 77       	andi	r20, 0x7F	; 127
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	ce 01       	movw	r24, r28
    204a:	25 db       	rcall	.-2486   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    204c:	88 7f       	andi	r24, 0xF8	; 248
    204e:	7c 01       	movw	r14, r24
    2050:	88 85       	ldd	r24, Y+8	; 0x08
    2052:	8f 70       	andi	r24, 0x0F	; 15
    2054:	80 2b       	or	r24, r16
    2056:	88 87       	std	Y+8, r24	; 0x08
    2058:	61 2f       	mov	r22, r17
    205a:	ce 01       	movw	r24, r28
    205c:	a3 d9       	rcall	.-3258   	; 0x13a4 <_ZN9INA_Class16writeInatoEEPROMEh>
    205e:	29 85       	ldd	r18, Y+9	; 0x09
    2060:	2f 77       	andi	r18, 0x7F	; 127
    2062:	88 85       	ldd	r24, Y+8	; 0x08
    2064:	82 95       	swap	r24
    2066:	8f 70       	andi	r24, 0x0F	; 15
    2068:	a7 01       	movw	r20, r14
    206a:	48 2b       	or	r20, r24
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	ce 01       	movw	r24, r28
    2070:	d0 d9       	rcall	.-3168   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
    2072:	1f 5f       	subi	r17, 0xFF	; 255
    2074:	d8 cf       	rjmp	.-80     	; 0x2026 <_ZN9INA_Class7setModeEhh+0x1c>
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	08 95       	ret

00002086 <_ZN9INA_Class12setAveragingEjh>:
* @details   Out-of-Range averaging is brought down to the highest allowed value
* @param[in] averages Number of  averages to set (0-128)
* @param[in] deviceNumber to reset (Optional, when not set then all devices have their averaging changed)
*******************************************************************************************************************/
void INA_Class::setAveraging(const uint16_t averages, const uint8_t deviceNumber)
{
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	8c 01       	movw	r16, r24
    2098:	eb 01       	movw	r28, r22
    209a:	c4 2e       	mov	r12, r20
  uint16_t averageIndex;
  int16_t  configRegister;
  for(uint8_t i=0;i<_DeviceCount;i++) // Loop for each device found
    209c:	d1 2c       	mov	r13, r1
    209e:	f8 01       	movw	r30, r16
    20a0:	60 81       	ld	r22, Z
    20a2:	d6 16       	cp	r13, r22
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <_ZN9INA_Class12setAveragingEjh+0x22>
    20a6:	8c c0       	rjmp	.+280    	; 0x21c0 <_ZN9INA_Class12setAveragingEjh+0x13a>
  {
    if(deviceNumber==UINT8_MAX || deviceNumber%_DeviceCount==i ) // If this device needs setting
    20a8:	ff ef       	ldi	r31, 0xFF	; 255
    20aa:	cf 16       	cp	r12, r31
    20ac:	29 f0       	breq	.+10     	; 0x20b8 <_ZN9INA_Class12setAveragingEjh+0x32>
    20ae:	8c 2d       	mov	r24, r12
    20b0:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__udivmodqi4>
    20b4:	d9 12       	cpse	r13, r25
    20b6:	82 c0       	rjmp	.+260    	; 0x21bc <_ZN9INA_Class12setAveragingEjh+0x136>
    {
      readInafromEEPROM(i);                                             // Load EEPROM to ina structure
    20b8:	6d 2d       	mov	r22, r13
    20ba:	c8 01       	movw	r24, r16
    20bc:	19 d9       	rcall	.-3534   	; 0x12f0 <_ZN9INA_Class17readInafromEEPROMEh>
      configRegister = readWord(INA_CONFIGURATION_REGISTER,ina.address);// Get current register from device
    20be:	f8 01       	movw	r30, r16
    20c0:	41 85       	ldd	r20, Z+9	; 0x09
    20c2:	4f 77       	andi	r20, 0x7F	; 127
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	c8 01       	movw	r24, r16
    20c8:	e6 da       	rcall	.-2612   	; 0x1696 <_ZN9INA_Class8readWordEhh>
    20ca:	ac 01       	movw	r20, r24
      switch (ina.type)
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 85       	ldd	r24, Z+8	; 0x08
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	21 f0       	breq	.+8      	; 0x20dc <_ZN9INA_Class12setAveragingEjh+0x56>
    20d4:	88 30       	cpi	r24, 0x08	; 8
    20d6:	08 f0       	brcs	.+2      	; 0x20da <_ZN9INA_Class12setAveragingEjh+0x54>
    20d8:	6b c0       	rjmp	.+214    	; 0x21b0 <_ZN9INA_Class12setAveragingEjh+0x12a>
    20da:	3e c0       	rjmp	.+124    	; 0x2158 <_ZN9INA_Class12setAveragingEjh+0xd2>
      {
        case INA219 : if      (averages>= 128) averageIndex = 15;
    20dc:	c0 38       	cpi	r28, 0x80	; 128
    20de:	d1 05       	cpc	r29, r1
    20e0:	a8 f4       	brcc	.+42     	; 0x210c <_ZN9INA_Class12setAveragingEjh+0x86>
                      else if (averages>=  64) averageIndex = 14;
    20e2:	c0 34       	cpi	r28, 0x40	; 64
    20e4:	d1 05       	cpc	r29, r1
    20e6:	a8 f4       	brcc	.+42     	; 0x2112 <_ZN9INA_Class12setAveragingEjh+0x8c>
                      else if (averages>=  32) averageIndex = 13;
    20e8:	c0 32       	cpi	r28, 0x20	; 32
    20ea:	d1 05       	cpc	r29, r1
    20ec:	a8 f4       	brcc	.+42     	; 0x2118 <_ZN9INA_Class12setAveragingEjh+0x92>
                      else if (averages>=  16) averageIndex = 12;
    20ee:	c0 31       	cpi	r28, 0x10	; 16
    20f0:	d1 05       	cpc	r29, r1
    20f2:	a8 f4       	brcc	.+42     	; 0x211e <_ZN9INA_Class12setAveragingEjh+0x98>
                      else if (averages>=   8) averageIndex = 11;
    20f4:	c8 30       	cpi	r28, 0x08	; 8
    20f6:	d1 05       	cpc	r29, r1
    20f8:	a8 f4       	brcc	.+42     	; 0x2124 <_ZN9INA_Class12setAveragingEjh+0x9e>
                      else if (averages>=   4) averageIndex = 10;
    20fa:	c4 30       	cpi	r28, 0x04	; 4
    20fc:	d1 05       	cpc	r29, r1
    20fe:	a8 f4       	brcc	.+42     	; 0x212a <_ZN9INA_Class12setAveragingEjh+0xa4>
                      else if (averages>=   2) averageIndex =  9;
    2100:	c2 30       	cpi	r28, 0x02	; 2
    2102:	d1 05       	cpc	r29, r1
    2104:	a8 f4       	brcc	.+42     	; 0x2130 <_ZN9INA_Class12setAveragingEjh+0xaa>
                      else                     averageIndex =  8;
    2106:	28 e0       	ldi	r18, 0x08	; 8
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
    {
      readInafromEEPROM(i);                                             // Load EEPROM to ina structure
      configRegister = readWord(INA_CONFIGURATION_REGISTER,ina.address);// Get current register from device
      switch (ina.type)
      {
        case INA219 : if      (averages>= 128) averageIndex = 15;
    210c:	2f e0       	ldi	r18, 0x0F	; 15
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	11 c0       	rjmp	.+34     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  64) averageIndex = 14;
    2112:	2e e0       	ldi	r18, 0x0E	; 14
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	0e c0       	rjmp	.+28     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  32) averageIndex = 13;
    2118:	2d e0       	ldi	r18, 0x0D	; 13
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=  16) averageIndex = 12;
    211e:	2c e0       	ldi	r18, 0x0C	; 12
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	08 c0       	rjmp	.+16     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   8) averageIndex = 11;
    2124:	2b e0       	ldi	r18, 0x0B	; 11
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   4) averageIndex = 10;
    212a:	2a e0       	ldi	r18, 0x0A	; 10
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <_ZN9INA_Class12setAveragingEjh+0xae>
                      else if (averages>=   2) averageIndex =  9;
    2130:	29 e0       	ldi	r18, 0x09	; 9
    2132:	30 e0       	ldi	r19, 0x00	; 0
                      else                     averageIndex =  8;
                      configRegister &= ~INA219_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 3;       // shift in the SADC averages
                      configRegister |= averageIndex << 7;       // shift in the BADC averages
    2134:	c9 01       	movw	r24, r18
    2136:	63 e0       	ldi	r22, 0x03	; 3
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	6a 95       	dec	r22
    213e:	e1 f7       	brne	.-8      	; 0x2138 <_ZN9INA_Class12setAveragingEjh+0xb2>
    2140:	36 95       	lsr	r19
    2142:	32 2f       	mov	r19, r18
    2144:	22 27       	eor	r18, r18
    2146:	37 95       	ror	r19
    2148:	27 95       	ror	r18
    214a:	28 2b       	or	r18, r24
    214c:	39 2b       	or	r19, r25
    214e:	47 70       	andi	r20, 0x07	; 7
    2150:	58 7f       	andi	r21, 0xF8	; 248
    2152:	42 2b       	or	r20, r18
    2154:	53 2b       	or	r21, r19
                      break;
    2156:	2c c0       	rjmp	.+88     	; 0x21b0 <_ZN9INA_Class12setAveragingEjh+0x12a>
        case INA226 : case INA230 : case INA231 : case INA3221_0: case INA3221_1: case INA3221_2:
        case INA260 : if      (averages>=1024) averageIndex = 7;
    2158:	c1 15       	cp	r28, r1
    215a:	f4 e0       	ldi	r31, 0x04	; 4
    215c:	df 07       	cpc	r29, r31
    215e:	b8 f4       	brcc	.+46     	; 0x218e <_ZN9INA_Class12setAveragingEjh+0x108>
                      else if (averages>= 512) averageIndex = 6;
    2160:	c1 15       	cp	r28, r1
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	d8 07       	cpc	r29, r24
    2166:	a8 f4       	brcc	.+42     	; 0x2192 <_ZN9INA_Class12setAveragingEjh+0x10c>
                      else if (averages>= 256) averageIndex = 5;
    2168:	cf 3f       	cpi	r28, 0xFF	; 255
    216a:	d1 05       	cpc	r29, r1
    216c:	09 f0       	breq	.+2      	; 0x2170 <_ZN9INA_Class12setAveragingEjh+0xea>
    216e:	98 f4       	brcc	.+38     	; 0x2196 <_ZN9INA_Class12setAveragingEjh+0x110>
                      else if (averages>= 128) averageIndex = 4;
    2170:	c0 38       	cpi	r28, 0x80	; 128
    2172:	d1 05       	cpc	r29, r1
    2174:	90 f4       	brcc	.+36     	; 0x219a <_ZN9INA_Class12setAveragingEjh+0x114>
                      else if (averages>=  64) averageIndex = 3;
    2176:	c0 34       	cpi	r28, 0x40	; 64
    2178:	d1 05       	cpc	r29, r1
    217a:	88 f4       	brcc	.+34     	; 0x219e <_ZN9INA_Class12setAveragingEjh+0x118>
                      else if (averages>=  16) averageIndex = 2;
    217c:	c0 31       	cpi	r28, 0x10	; 16
    217e:	d1 05       	cpc	r29, r1
    2180:	80 f4       	brcc	.+32     	; 0x21a2 <_ZN9INA_Class12setAveragingEjh+0x11c>
                      configRegister &= ~INA219_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 3;       // shift in the SADC averages
                      configRegister |= averageIndex << 7;       // shift in the BADC averages
                      break;
        case INA226 : case INA230 : case INA231 : case INA3221_0: case INA3221_1: case INA3221_2:
        case INA260 : if      (averages>=1024) averageIndex = 7;
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	c4 30       	cpi	r28, 0x04	; 4
    2186:	d1 05       	cpc	r29, r1
    2188:	68 f4       	brcc	.+26     	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0b c0       	rjmp	.+22     	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
    218e:	97 e0       	ldi	r25, 0x07	; 7
    2190:	09 c0       	rjmp	.+18     	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 512) averageIndex = 6;
    2192:	96 e0       	ldi	r25, 0x06	; 6
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 256) averageIndex = 5;
    2196:	95 e0       	ldi	r25, 0x05	; 5
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>= 128) averageIndex = 4;
    219a:	94 e0       	ldi	r25, 0x04	; 4
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>=  64) averageIndex = 3;
    219e:	93 e0       	ldi	r25, 0x03	; 3
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <_ZN9INA_Class12setAveragingEjh+0x11e>
                      else if (averages>=  16) averageIndex = 2;
    21a2:	92 e0       	ldi	r25, 0x02	; 2
                      else if (averages>=   4) averageIndex = 1;
                      else                     averageIndex = 0;
                      configRegister &= ~INA226_CONFIG_AVG_MASK; // zero out the averages part
                      configRegister |= averageIndex << 9;       // shift in the averages to register
    21a4:	f9 2e       	mov	r15, r25
    21a6:	ff 0c       	add	r15, r15
    21a8:	e1 2c       	mov	r14, r1
    21aa:	51 7f       	andi	r21, 0xF1	; 241
    21ac:	4e 29       	or	r20, r14
    21ae:	5f 29       	or	r21, r15
                      break;
      } // of switch type
      writeWord(INA_CONFIGURATION_REGISTER,configRegister,ina.address); // Save new value back to device
    21b0:	f8 01       	movw	r30, r16
    21b2:	21 85       	ldd	r18, Z+9	; 0x09
    21b4:	2f 77       	andi	r18, 0x7F	; 127
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	c8 01       	movw	r24, r16
    21ba:	2b d9       	rcall	.-3498   	; 0x1412 <_ZN9INA_Class9writeWordEhjh>
*******************************************************************************************************************/
void INA_Class::setAveraging(const uint16_t averages, const uint8_t deviceNumber)
{
  uint16_t averageIndex;
  int16_t  configRegister;
  for(uint8_t i=0;i<_DeviceCount;i++) // Loop for each device found
    21bc:	d3 94       	inc	r13
    21be:	6f cf       	rjmp	.-290    	; 0x209e <_ZN9INA_Class12setAveragingEjh+0x18>
                      break;
      } // of switch type
      writeWord(INA_CONFIGURATION_REGISTER,configRegister,ina.address); // Save new value back to device
    } // of if this device needs to be set
  } // for-next each device loop
} // of method setAveraging()
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	08 95       	ret

000021d2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21d2:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <twi_state>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <twi_sendStop>
    21dc:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <twi_inRepStart>
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	84 e1       	ldi	r24, 0x14	; 20
    21e4:	44 d7       	rcall	.+3720   	; 0x306e <digitalWrite>
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	85 e1       	ldi	r24, 0x15	; 21
    21ea:	41 d7       	rcall	.+3714   	; 0x306e <digitalWrite>
    21ec:	e9 eb       	ldi	r30, 0xB9	; 185
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8e 7f       	andi	r24, 0xFE	; 254
    21f4:	80 83       	st	Z, r24
    21f6:	80 81       	ld	r24, Z
    21f8:	8d 7f       	andi	r24, 0xFD	; 253
    21fa:	80 83       	st	Z, r24
    21fc:	88 e4       	ldi	r24, 0x48	; 72
    21fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2202:	85 e4       	ldi	r24, 0x45	; 69
    2204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2208:	08 95       	ret

0000220a <twi_setFrequency>:
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	74 e2       	ldi	r23, 0x24	; 36
    2212:	84 ef       	ldi	r24, 0xF4	; 244
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodsi4>
    221a:	da 01       	movw	r26, r20
    221c:	c9 01       	movw	r24, r18
    221e:	40 97       	sbiw	r24, 0x10	; 16
    2220:	a1 09       	sbc	r26, r1
    2222:	b1 09       	sbc	r27, r1
    2224:	b6 95       	lsr	r27
    2226:	a7 95       	ror	r26
    2228:	97 95       	ror	r25
    222a:	87 95       	ror	r24
    222c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2230:	08 95       	ret

00002232 <twi_readFrom>:
    2232:	41 32       	cpi	r20, 0x21	; 33
    2234:	08 f0       	brcs	.+2      	; 0x2238 <twi_readFrom+0x6>
    2236:	43 c0       	rjmp	.+134    	; 0x22be <twi_readFrom+0x8c>
    2238:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <twi_state>
    223c:	91 11       	cpse	r25, r1
    223e:	fc cf       	rjmp	.-8      	; 0x2238 <twi_readFrom+0x6>
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <twi_state>
    2246:	20 93 a6 07 	sts	0x07A6, r18	; 0x8007a6 <twi_sendStop>
    224a:	2f ef       	ldi	r18, 0xFF	; 255
    224c:	20 93 3b 07 	sts	0x073B, r18	; 0x80073b <twi_error>
    2250:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <twi_masterBufferIndex>
    2254:	24 0f       	add	r18, r20
    2256:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <twi_masterBufferLength>
    225a:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <twi_slarw>
    225e:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <twi_slarw>
    2262:	88 0f       	add	r24, r24
    2264:	89 2b       	or	r24, r25
    2266:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <twi_slarw>
    226a:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <twi_inRepStart>
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	61 f4       	brne	.+24     	; 0x228a <twi_readFrom+0x58>
    2272:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <twi_inRepStart>
    2276:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <twi_slarw>
    227a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    227e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2282:	83 fd       	sbrc	r24, 3
    2284:	f8 cf       	rjmp	.-16     	; 0x2276 <twi_readFrom+0x44>
    2286:	85 ec       	ldi	r24, 0xC5	; 197
    2288:	01 c0       	rjmp	.+2      	; 0x228c <twi_readFrom+0x5a>
    228a:	85 ee       	ldi	r24, 0xE5	; 229
    228c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2290:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <twi_state>
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	e1 f3       	breq	.-8      	; 0x2290 <twi_readFrom+0x5e>
    2298:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <twi_masterBufferIndex>
    229c:	84 17       	cp	r24, r20
    229e:	10 f4       	brcc	.+4      	; 0x22a4 <twi_readFrom+0x72>
    22a0:	40 91 80 07 	lds	r20, 0x0780	; 0x800780 <twi_masterBufferIndex>
    22a4:	a1 e8       	ldi	r26, 0x81	; 129
    22a6:	b7 e0       	ldi	r27, 0x07	; 7
    22a8:	96 2f       	mov	r25, r22
    22aa:	fb 01       	movw	r30, r22
    22ac:	8e 2f       	mov	r24, r30
    22ae:	89 1b       	sub	r24, r25
    22b0:	84 17       	cp	r24, r20
    22b2:	18 f4       	brcc	.+6      	; 0x22ba <twi_readFrom+0x88>
    22b4:	8d 91       	ld	r24, X+
    22b6:	81 93       	st	Z+, r24
    22b8:	f9 cf       	rjmp	.-14     	; 0x22ac <twi_readFrom+0x7a>
    22ba:	84 2f       	mov	r24, r20
    22bc:	08 95       	ret
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	08 95       	ret

000022c2 <twi_writeTo>:
    22c2:	0f 93       	push	r16
    22c4:	41 32       	cpi	r20, 0x21	; 33
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <twi_writeTo+0x8>
    22c8:	4a c0       	rjmp	.+148    	; 0x235e <twi_writeTo+0x9c>
    22ca:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <twi_state>
    22ce:	91 11       	cpse	r25, r1
    22d0:	fc cf       	rjmp	.-8      	; 0x22ca <twi_writeTo+0x8>
    22d2:	32 e0       	ldi	r19, 0x02	; 2
    22d4:	30 93 a8 07 	sts	0x07A8, r19	; 0x8007a8 <twi_state>
    22d8:	00 93 a6 07 	sts	0x07A6, r16	; 0x8007a6 <twi_sendStop>
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	30 93 3b 07 	sts	0x073B, r19	; 0x80073b <twi_error>
    22e2:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <twi_masterBufferIndex>
    22e6:	40 93 7f 07 	sts	0x077F, r20	; 0x80077f <twi_masterBufferLength>
    22ea:	56 2f       	mov	r21, r22
    22ec:	a1 e8       	ldi	r26, 0x81	; 129
    22ee:	b7 e0       	ldi	r27, 0x07	; 7
    22f0:	fb 01       	movw	r30, r22
    22f2:	3e 2f       	mov	r19, r30
    22f4:	35 1b       	sub	r19, r21
    22f6:	34 17       	cp	r19, r20
    22f8:	18 f4       	brcc	.+6      	; 0x2300 <twi_writeTo+0x3e>
    22fa:	31 91       	ld	r19, Z+
    22fc:	3d 93       	st	X+, r19
    22fe:	f9 cf       	rjmp	.-14     	; 0x22f2 <twi_writeTo+0x30>
    2300:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <twi_slarw>
    2304:	30 91 a7 07 	lds	r19, 0x07A7	; 0x8007a7 <twi_slarw>
    2308:	88 0f       	add	r24, r24
    230a:	83 2b       	or	r24, r19
    230c:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <twi_slarw>
    2310:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <twi_inRepStart>
    2314:	81 30       	cpi	r24, 0x01	; 1
    2316:	61 f4       	brne	.+24     	; 0x2330 <twi_writeTo+0x6e>
    2318:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <twi_inRepStart>
    231c:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <twi_slarw>
    2320:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2324:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2328:	83 fd       	sbrc	r24, 3
    232a:	f8 cf       	rjmp	.-16     	; 0x231c <twi_writeTo+0x5a>
    232c:	85 ec       	ldi	r24, 0xC5	; 197
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <twi_writeTo+0x70>
    2330:	85 ee       	ldi	r24, 0xE5	; 229
    2332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2336:	22 23       	and	r18, r18
    2338:	21 f0       	breq	.+8      	; 0x2342 <twi_writeTo+0x80>
    233a:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <twi_state>
    233e:	82 30       	cpi	r24, 0x02	; 2
    2340:	d1 f3       	breq	.-12     	; 0x2336 <twi_writeTo+0x74>
    2342:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <twi_error>
    2346:	8f 3f       	cpi	r24, 0xFF	; 255
    2348:	79 f0       	breq	.+30     	; 0x2368 <twi_writeTo+0xa6>
    234a:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <twi_error>
    234e:	80 32       	cpi	r24, 0x20	; 32
    2350:	41 f0       	breq	.+16     	; 0x2362 <twi_writeTo+0xa0>
    2352:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <twi_error>
    2356:	80 33       	cpi	r24, 0x30	; 48
    2358:	31 f0       	breq	.+12     	; 0x2366 <twi_writeTo+0xa4>
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <twi_writeTo+0xa6>
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	03 c0       	rjmp	.+6      	; 0x2368 <twi_writeTo+0xa6>
    2362:	92 e0       	ldi	r25, 0x02	; 2
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <twi_writeTo+0xa6>
    2366:	93 e0       	ldi	r25, 0x03	; 3
    2368:	89 2f       	mov	r24, r25
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <twi_transmit>:
    236e:	40 91 5d 07 	lds	r20, 0x075D	; 0x80075d <twi_txBufferLength>
    2372:	26 2f       	mov	r18, r22
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	24 0f       	add	r18, r20
    2378:	31 1d       	adc	r19, r1
    237a:	21 32       	cpi	r18, 0x21	; 33
    237c:	31 05       	cpc	r19, r1
    237e:	dc f4       	brge	.+54     	; 0x23b6 <twi_transmit+0x48>
    2380:	20 91 a8 07 	lds	r18, 0x07A8	; 0x8007a8 <twi_state>
    2384:	24 30       	cpi	r18, 0x04	; 4
    2386:	c9 f4       	brne	.+50     	; 0x23ba <twi_transmit+0x4c>
    2388:	fc 01       	movw	r30, r24
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	86 17       	cp	r24, r22
    2390:	58 f4       	brcc	.+22     	; 0x23a8 <twi_transmit+0x3a>
    2392:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <twi_txBufferLength>
    2396:	21 91       	ld	r18, Z+
    2398:	dc 01       	movw	r26, r24
    239a:	a1 5a       	subi	r26, 0xA1	; 161
    239c:	b8 4f       	sbci	r27, 0xF8	; 248
    239e:	a3 0f       	add	r26, r19
    23a0:	b1 1d       	adc	r27, r1
    23a2:	2c 93       	st	X, r18
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	f3 cf       	rjmp	.-26     	; 0x238e <twi_transmit+0x20>
    23a8:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <twi_txBufferLength>
    23ac:	68 0f       	add	r22, r24
    23ae:	60 93 5d 07 	sts	0x075D, r22	; 0x80075d <twi_txBufferLength>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	08 95       	ret
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	08 95       	ret
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	08 95       	ret

000023be <twi_attachSlaveRxEvent>:
    23be:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <twi_onSlaveReceive+0x1>
    23c2:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <twi_onSlaveReceive>
    23c6:	08 95       	ret

000023c8 <twi_attachSlaveTxEvent>:
    23c8:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <twi_onSlaveTransmit+0x1>
    23cc:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <twi_onSlaveTransmit>
    23d0:	08 95       	ret

000023d2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    23d2:	85 ed       	ldi	r24, 0xD5	; 213
    23d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    23d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23dc:	84 fd       	sbrc	r24, 4
    23de:	fc cf       	rjmp	.-8      	; 0x23d8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    23e0:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <twi_state>
    23e4:	08 95       	ret

000023e6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    23e6:	85 ec       	ldi	r24, 0xC5	; 197
    23e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    23ec:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <twi_state>
    23f0:	08 95       	ret

000023f2 <__vector_39>:
}

ISR(TWI_vect)
{
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	0b b6       	in	r0, 0x3b	; 59
    23fe:	0f 92       	push	r0
    2400:	2f 93       	push	r18
    2402:	3f 93       	push	r19
    2404:	4f 93       	push	r20
    2406:	5f 93       	push	r21
    2408:	6f 93       	push	r22
    240a:	7f 93       	push	r23
    240c:	8f 93       	push	r24
    240e:	9f 93       	push	r25
    2410:	af 93       	push	r26
    2412:	bf 93       	push	r27
    2414:	ef 93       	push	r30
    2416:	ff 93       	push	r31
  switch(TW_STATUS){
    2418:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    241c:	88 7f       	andi	r24, 0xF8	; 248
    241e:	80 36       	cpi	r24, 0x60	; 96
    2420:	09 f4       	brne	.+2      	; 0x2424 <__vector_39+0x32>
    2422:	9d c0       	rjmp	.+314    	; 0x255e <__vector_39+0x16c>
    2424:	70 f5       	brcc	.+92     	; 0x2482 <__vector_39+0x90>
    2426:	88 32       	cpi	r24, 0x28	; 40
    2428:	09 f4       	brne	.+2      	; 0x242c <__vector_39+0x3a>
    242a:	5c c0       	rjmp	.+184    	; 0x24e4 <__vector_39+0xf2>
    242c:	90 f4       	brcc	.+36     	; 0x2452 <__vector_39+0x60>
    242e:	80 31       	cpi	r24, 0x10	; 16
    2430:	09 f4       	brne	.+2      	; 0x2434 <__vector_39+0x42>
    2432:	55 c0       	rjmp	.+170    	; 0x24de <__vector_39+0xec>
    2434:	38 f4       	brcc	.+14     	; 0x2444 <__vector_39+0x52>
    2436:	88 23       	and	r24, r24
    2438:	09 f4       	brne	.+2      	; 0x243c <__vector_39+0x4a>
    243a:	f3 c0       	rjmp	.+486    	; 0x2622 <__vector_39+0x230>
    243c:	88 30       	cpi	r24, 0x08	; 8
    243e:	09 f4       	brne	.+2      	; 0x2442 <__vector_39+0x50>
    2440:	4e c0       	rjmp	.+156    	; 0x24de <__vector_39+0xec>
    2442:	f2 c0       	rjmp	.+484    	; 0x2628 <__vector_39+0x236>
    2444:	88 31       	cpi	r24, 0x18	; 24
    2446:	09 f4       	brne	.+2      	; 0x244a <__vector_39+0x58>
    2448:	4d c0       	rjmp	.+154    	; 0x24e4 <__vector_39+0xf2>
    244a:	80 32       	cpi	r24, 0x20	; 32
    244c:	09 f4       	brne	.+2      	; 0x2450 <__vector_39+0x5e>
    244e:	5e c0       	rjmp	.+188    	; 0x250c <__vector_39+0x11a>
    2450:	eb c0       	rjmp	.+470    	; 0x2628 <__vector_39+0x236>
    2452:	80 34       	cpi	r24, 0x40	; 64
    2454:	09 f4       	brne	.+2      	; 0x2458 <__vector_39+0x66>
    2456:	69 c0       	rjmp	.+210    	; 0x252a <__vector_39+0x138>
    2458:	50 f4       	brcc	.+20     	; 0x246e <__vector_39+0x7c>
    245a:	80 33       	cpi	r24, 0x30	; 48
    245c:	09 f4       	brne	.+2      	; 0x2460 <__vector_39+0x6e>
    245e:	56 c0       	rjmp	.+172    	; 0x250c <__vector_39+0x11a>
    2460:	88 33       	cpi	r24, 0x38	; 56
    2462:	09 f0       	breq	.+2      	; 0x2466 <__vector_39+0x74>
    2464:	e1 c0       	rjmp	.+450    	; 0x2628 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2466:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <twi_error>
      twi_releaseBus();
    246a:	bd df       	rcall	.-134    	; 0x23e6 <twi_releaseBus>
      break;
    246c:	dd c0       	rjmp	.+442    	; 0x2628 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    246e:	80 35       	cpi	r24, 0x50	; 80
    2470:	09 f4       	brne	.+2      	; 0x2474 <__vector_39+0x82>
    2472:	4f c0       	rjmp	.+158    	; 0x2512 <__vector_39+0x120>
    2474:	88 35       	cpi	r24, 0x58	; 88
    2476:	09 f4       	brne	.+2      	; 0x247a <__vector_39+0x88>
    2478:	5d c0       	rjmp	.+186    	; 0x2534 <__vector_39+0x142>
    247a:	88 34       	cpi	r24, 0x48	; 72
    247c:	09 f0       	breq	.+2      	; 0x2480 <__vector_39+0x8e>
    247e:	d4 c0       	rjmp	.+424    	; 0x2628 <__vector_39+0x236>
    2480:	d2 c0       	rjmp	.+420    	; 0x2626 <__vector_39+0x234>
    2482:	88 39       	cpi	r24, 0x98	; 152
    2484:	09 f4       	brne	.+2      	; 0x2488 <__vector_39+0x96>
    2486:	c3 c0       	rjmp	.+390    	; 0x260e <__vector_39+0x21c>
    2488:	a8 f4       	brcc	.+42     	; 0x24b4 <__vector_39+0xc2>
    248a:	88 37       	cpi	r24, 0x78	; 120
    248c:	09 f4       	brne	.+2      	; 0x2490 <__vector_39+0x9e>
    248e:	67 c0       	rjmp	.+206    	; 0x255e <__vector_39+0x16c>
    2490:	38 f4       	brcc	.+14     	; 0x24a0 <__vector_39+0xae>
    2492:	88 36       	cpi	r24, 0x68	; 104
    2494:	09 f4       	brne	.+2      	; 0x2498 <__vector_39+0xa6>
    2496:	63 c0       	rjmp	.+198    	; 0x255e <__vector_39+0x16c>
    2498:	80 37       	cpi	r24, 0x70	; 112
    249a:	09 f4       	brne	.+2      	; 0x249e <__vector_39+0xac>
    249c:	60 c0       	rjmp	.+192    	; 0x255e <__vector_39+0x16c>
    249e:	c4 c0       	rjmp	.+392    	; 0x2628 <__vector_39+0x236>
    24a0:	88 38       	cpi	r24, 0x88	; 136
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__vector_39+0xb4>
    24a4:	b4 c0       	rjmp	.+360    	; 0x260e <__vector_39+0x21c>
    24a6:	80 39       	cpi	r24, 0x90	; 144
    24a8:	09 f4       	brne	.+2      	; 0x24ac <__vector_39+0xba>
    24aa:	5f c0       	rjmp	.+190    	; 0x256a <__vector_39+0x178>
    24ac:	80 38       	cpi	r24, 0x80	; 128
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <__vector_39+0xc0>
    24b0:	bb c0       	rjmp	.+374    	; 0x2628 <__vector_39+0x236>
    24b2:	5b c0       	rjmp	.+182    	; 0x256a <__vector_39+0x178>
    24b4:	80 3b       	cpi	r24, 0xB0	; 176
    24b6:	09 f4       	brne	.+2      	; 0x24ba <__vector_39+0xc8>
    24b8:	82 c0       	rjmp	.+260    	; 0x25be <__vector_39+0x1cc>
    24ba:	38 f4       	brcc	.+14     	; 0x24ca <__vector_39+0xd8>
    24bc:	80 3a       	cpi	r24, 0xA0	; 160
    24be:	09 f4       	brne	.+2      	; 0x24c2 <__vector_39+0xd0>
    24c0:	66 c0       	rjmp	.+204    	; 0x258e <__vector_39+0x19c>
    24c2:	88 3a       	cpi	r24, 0xA8	; 168
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <__vector_39+0xd6>
    24c6:	7b c0       	rjmp	.+246    	; 0x25be <__vector_39+0x1cc>
    24c8:	af c0       	rjmp	.+350    	; 0x2628 <__vector_39+0x236>
    24ca:	80 3c       	cpi	r24, 0xC0	; 192
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <__vector_39+0xde>
    24ce:	a3 c0       	rjmp	.+326    	; 0x2616 <__vector_39+0x224>
    24d0:	88 3c       	cpi	r24, 0xC8	; 200
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__vector_39+0xe4>
    24d4:	a0 c0       	rjmp	.+320    	; 0x2616 <__vector_39+0x224>
    24d6:	88 3b       	cpi	r24, 0xB8	; 184
    24d8:	09 f4       	brne	.+2      	; 0x24dc <__vector_39+0xea>
    24da:	86 c0       	rjmp	.+268    	; 0x25e8 <__vector_39+0x1f6>
    24dc:	a5 c0       	rjmp	.+330    	; 0x2628 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    24de:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <twi_slarw>
    24e2:	10 c0       	rjmp	.+32     	; 0x2504 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24e4:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <twi_masterBufferIndex>
    24e8:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <twi_masterBufferLength>
    24ec:	98 17       	cp	r25, r24
    24ee:	70 f5       	brcc	.+92     	; 0x254c <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24f0:	e0 91 80 07 	lds	r30, 0x0780	; 0x800780 <twi_masterBufferIndex>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	8e 0f       	add	r24, r30
    24f8:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <twi_masterBufferIndex>
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	ef 57       	subi	r30, 0x7F	; 127
    2500:	f8 4f       	sbci	r31, 0xF8	; 248
    2502:	80 81       	ld	r24, Z
    2504:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2508:	85 ec       	ldi	r24, 0xC5	; 197
    250a:	82 c0       	rjmp	.+260    	; 0x2610 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    250c:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <twi_error>
    2510:	8a c0       	rjmp	.+276    	; 0x2626 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2512:	e0 91 80 07 	lds	r30, 0x0780	; 0x800780 <twi_masterBufferIndex>
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	8e 0f       	add	r24, r30
    251a:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <twi_masterBufferIndex>
    251e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	ef 57       	subi	r30, 0x7F	; 127
    2526:	f8 4f       	sbci	r31, 0xF8	; 248
    2528:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    252a:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <twi_masterBufferIndex>
    252e:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <twi_masterBufferLength>
    2532:	6a c0       	rjmp	.+212    	; 0x2608 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2534:	e0 91 80 07 	lds	r30, 0x0780	; 0x800780 <twi_masterBufferIndex>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	8e 0f       	add	r24, r30
    253c:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <twi_masterBufferIndex>
    2540:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ef 57       	subi	r30, 0x7F	; 127
    2548:	f8 4f       	sbci	r31, 0xF8	; 248
    254a:	80 83       	st	Z, r24
	if (twi_sendStop)
    254c:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <twi_sendStop>
    2550:	81 11       	cpse	r24, r1
    2552:	69 c0       	rjmp	.+210    	; 0x2626 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    255a:	84 ea       	ldi	r24, 0xA4	; 164
    255c:	5d c0       	rjmp	.+186    	; 0x2618 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    255e:	83 e0       	ldi	r24, 0x03	; 3
    2560:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2564:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <twi_rxBufferIndex>
    2568:	cf cf       	rjmp	.-98     	; 0x2508 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    256a:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <twi_rxBufferIndex>
    256e:	80 32       	cpi	r24, 0x20	; 32
    2570:	08 f0       	brcs	.+2      	; 0x2574 <__vector_39+0x182>
    2572:	4d c0       	rjmp	.+154    	; 0x260e <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2574:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <twi_rxBufferIndex>
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	8e 0f       	add	r24, r30
    257c:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <twi_rxBufferIndex>
    2580:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	e3 5c       	subi	r30, 0xC3	; 195
    2588:	f8 4f       	sbci	r31, 0xF8	; 248
    258a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    258c:	bd cf       	rjmp	.-134    	; 0x2508 <__vector_39+0x116>
    258e:	2b df       	rcall	.-426    	; 0x23e6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2590:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <twi_rxBufferIndex>
    2594:	80 32       	cpi	r24, 0x20	; 32
    2596:	30 f4       	brcc	.+12     	; 0x25a4 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2598:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <twi_rxBufferIndex>
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	e3 5c       	subi	r30, 0xC3	; 195
    25a0:	f8 4f       	sbci	r31, 0xF8	; 248
    25a2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    25a4:	60 91 3c 07 	lds	r22, 0x073C	; 0x80073c <twi_rxBufferIndex>
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	e0 91 a1 07 	lds	r30, 0x07A1	; 0x8007a1 <twi_onSlaveReceive>
    25ae:	f0 91 a2 07 	lds	r31, 0x07A2	; 0x8007a2 <twi_onSlaveReceive+0x1>
    25b2:	8d e3       	ldi	r24, 0x3D	; 61
    25b4:	97 e0       	ldi	r25, 0x07	; 7
    25b6:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    25b8:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <twi_rxBufferIndex>
      break;
    25bc:	35 c0       	rjmp	.+106    	; 0x2628 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25be:	84 e0       	ldi	r24, 0x04	; 4
    25c0:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25c4:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25c8:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25cc:	e0 91 a3 07 	lds	r30, 0x07A3	; 0x8007a3 <twi_onSlaveTransmit>
    25d0:	f0 91 a4 07 	lds	r31, 0x07A4	; 0x8007a4 <twi_onSlaveTransmit+0x1>
    25d4:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25d6:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <twi_txBufferLength>
    25da:	81 11       	cpse	r24, r1
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25e4:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25e8:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <twi_txBufferIndex>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	8e 0f       	add	r24, r30
    25f0:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <twi_txBufferIndex>
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	e1 5a       	subi	r30, 0xA1	; 161
    25f8:	f8 4f       	sbci	r31, 0xF8	; 248
    25fa:	80 81       	ld	r24, Z
    25fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2600:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <twi_txBufferIndex>
    2604:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <twi_txBufferLength>
    2608:	98 17       	cp	r25, r24
    260a:	08 f4       	brcc	.+2      	; 0x260e <__vector_39+0x21c>
    260c:	7d cf       	rjmp	.-262    	; 0x2508 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    260e:	85 e8       	ldi	r24, 0x85	; 133
    2610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2614:	09 c0       	rjmp	.+18     	; 0x2628 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2616:	85 ec       	ldi	r24, 0xC5	; 197
    2618:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    261c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <twi_state>
      break;
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2622:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <twi_error>
      twi_stop();
    2626:	d5 de       	rcall	.-598    	; 0x23d2 <twi_stop>
      break;
  }
}
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	bf 91       	pop	r27
    262e:	af 91       	pop	r26
    2630:	9f 91       	pop	r25
    2632:	8f 91       	pop	r24
    2634:	7f 91       	pop	r23
    2636:	6f 91       	pop	r22
    2638:	5f 91       	pop	r21
    263a:	4f 91       	pop	r20
    263c:	3f 91       	pop	r19
    263e:	2f 91       	pop	r18
    2640:	0f 90       	pop	r0
    2642:	0b be       	out	0x3b, r0	; 59
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	0f 90       	pop	r0
    264a:	1f 90       	pop	r1
    264c:	18 95       	reti

0000264e <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	08 95       	ret

00002654 <_ZN5Print5flushEv>:
    2654:	08 95       	ret

00002656 <_ZN7TwoWire9availableEv>:
    2656:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    2660:	82 1b       	sub	r24, r18
    2662:	91 09       	sbc	r25, r1
    2664:	08 95       	ret

00002666 <_ZN7TwoWire4readEv>:
    2666:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    266a:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    266e:	98 17       	cp	r25, r24
    2670:	50 f4       	brcc	.+20     	; 0x2686 <_ZN7TwoWire4readEv+0x20>
    2672:	e9 2f       	mov	r30, r25
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	e1 52       	subi	r30, 0x21	; 33
    2678:	f8 4f       	sbci	r31, 0xF8	; 248
    267a:	20 81       	ld	r18, Z
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	9f 5f       	subi	r25, 0xFF	; 255
    2680:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    2684:	02 c0       	rjmp	.+4      	; 0x268a <_ZN7TwoWire4readEv+0x24>
    2686:	2f ef       	ldi	r18, 0xFF	; 255
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	c9 01       	movw	r24, r18
    268c:	08 95       	ret

0000268e <_ZN7TwoWire4peekEv>:
    268e:	e0 91 de 07 	lds	r30, 0x07DE	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    2692:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    2696:	e8 17       	cp	r30, r24
    2698:	30 f4       	brcc	.+12     	; 0x26a6 <_ZN7TwoWire4peekEv+0x18>
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	e1 52       	subi	r30, 0x21	; 33
    269e:	f8 4f       	sbci	r31, 0xF8	; 248
    26a0:	80 81       	ld	r24, Z
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	08 95       	ret
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	08 95       	ret

000026ac <_ZN7TwoWire5flushEv>:
    26ac:	08 95       	ret

000026ae <_ZN7TwoWire16onReceiveServiceEPhi>:
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	ec 01       	movw	r28, r24
    26b4:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <_ZN7TwoWire14user_onReceiveE>
    26b8:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <_ZN7TwoWire14user_onReceiveE+0x1>
    26bc:	30 97       	sbiw	r30, 0x00	; 0
    26be:	f1 f0       	breq	.+60     	; 0x26fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    26c0:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    26c4:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    26c8:	98 17       	cp	r25, r24
    26ca:	c0 f0       	brcs	.+48     	; 0x26fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	29 2f       	mov	r18, r25
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	26 17       	cp	r18, r22
    26d4:	37 07       	cpc	r19, r23
    26d6:	54 f4       	brge	.+20     	; 0x26ec <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    26d8:	de 01       	movw	r26, r28
    26da:	a2 0f       	add	r26, r18
    26dc:	b3 1f       	adc	r27, r19
    26de:	4c 91       	ld	r20, X
    26e0:	d9 01       	movw	r26, r18
    26e2:	a1 52       	subi	r26, 0x21	; 33
    26e4:	b8 4f       	sbci	r27, 0xF8	; 248
    26e6:	4c 93       	st	X, r20
    26e8:	9f 5f       	subi	r25, 0xFF	; 255
    26ea:	f1 cf       	rjmp	.-30     	; 0x26ce <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    26ec:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    26f0:	60 93 dd 07 	sts	0x07DD, r22	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    26f4:	cb 01       	movw	r24, r22
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	19 94       	eijmp
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <_ZN7TwoWire16onRequestServiceEv>:
    2702:	e0 91 b7 07 	lds	r30, 0x07B7	; 0x8007b7 <_ZN7TwoWire14user_onRequestE>
    2706:	f0 91 b8 07 	lds	r31, 0x07B8	; 0x8007b8 <_ZN7TwoWire14user_onRequestE+0x1>
    270a:	30 97       	sbiw	r30, 0x00	; 0
    270c:	29 f0       	breq	.+10     	; 0x2718 <_ZN7TwoWire16onRequestServiceEv+0x16>
    270e:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    2712:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    2716:	19 94       	eijmp
    2718:	08 95       	ret

0000271a <_ZN7TwoWire5writeEPKhj>:
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	7c 01       	movw	r14, r24
    272c:	cb 01       	movw	r24, r22
    272e:	8a 01       	movw	r16, r20
    2730:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <_ZN7TwoWire12transmittingE>
    2734:	22 23       	and	r18, r18
    2736:	89 f0       	breq	.+34     	; 0x275a <_ZN7TwoWire5writeEPKhj+0x40>
    2738:	eb 01       	movw	r28, r22
    273a:	6b 01       	movw	r12, r22
    273c:	c4 0e       	add	r12, r20
    273e:	d5 1e       	adc	r13, r21
    2740:	cc 15       	cp	r28, r12
    2742:	dd 05       	cpc	r29, r13
    2744:	61 f0       	breq	.+24     	; 0x275e <_ZN7TwoWire5writeEPKhj+0x44>
    2746:	69 91       	ld	r22, Y+
    2748:	d7 01       	movw	r26, r14
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	01 90       	ld	r0, Z+
    2750:	f0 81       	ld	r31, Z
    2752:	e0 2d       	mov	r30, r0
    2754:	c7 01       	movw	r24, r14
    2756:	19 95       	eicall
    2758:	f3 cf       	rjmp	.-26     	; 0x2740 <_ZN7TwoWire5writeEPKhj+0x26>
    275a:	64 2f       	mov	r22, r20
    275c:	08 de       	rcall	.-1008   	; 0x236e <twi_transmit>
    275e:	c8 01       	movw	r24, r16
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	08 95       	ret

00002772 <_ZN7TwoWire5writeEh>:
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	1f 92       	push	r1
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	69 83       	std	Y+1, r22	; 0x01
    277e:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <_ZN7TwoWire12transmittingE>
    2782:	22 23       	and	r18, r18
    2784:	d1 f0       	breq	.+52     	; 0x27ba <_ZN7TwoWire5writeEh+0x48>
    2786:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    278a:	20 32       	cpi	r18, 0x20	; 32
    278c:	40 f0       	brcs	.+16     	; 0x279e <_ZN7TwoWire5writeEh+0x2c>
    278e:	21 e0       	ldi	r18, 0x01	; 1
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	fc 01       	movw	r30, r24
    2794:	33 83       	std	Z+3, r19	; 0x03
    2796:	22 83       	std	Z+2, r18	; 0x02
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <_ZN7TwoWire5writeEh+0x54>
    279e:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    27a2:	e8 2f       	mov	r30, r24
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	e4 54       	subi	r30, 0x44	; 68
    27a8:	f8 4f       	sbci	r31, 0xF8	; 248
    27aa:	99 81       	ldd	r25, Y+1	; 0x01
    27ac:	90 83       	st	Z, r25
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    27b4:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <_ZN7TwoWire5writeEh+0x50>
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	ce 01       	movw	r24, r28
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	d6 dd       	rcall	.-1108   	; 0x236e <twi_transmit>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0f 90       	pop	r0
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <_ZN7TwoWireC1Ev>:
    27ce:	fc 01       	movw	r30, r24
    27d0:	13 82       	std	Z+3, r1	; 0x03
    27d2:	12 82       	std	Z+2, r1	; 0x02
    27d4:	88 ee       	ldi	r24, 0xE8	; 232
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	84 83       	std	Z+4, r24	; 0x04
    27de:	95 83       	std	Z+5, r25	; 0x05
    27e0:	a6 83       	std	Z+6, r26	; 0x06
    27e2:	b7 83       	std	Z+7, r27	; 0x07
    27e4:	8d e1       	ldi	r24, 0x1D	; 29
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	08 95       	ret

000027ee <_ZN7TwoWire5beginEv>:
    27ee:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    27f2:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    27f6:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    27fa:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    27fe:	e9 dc       	rcall	.-1582   	; 0x21d2 <twi_init>
    2800:	81 e8       	ldi	r24, 0x81	; 129
    2802:	93 e1       	ldi	r25, 0x13	; 19
    2804:	e1 dd       	rcall	.-1086   	; 0x23c8 <twi_attachSlaveTxEvent>
    2806:	87 e5       	ldi	r24, 0x57	; 87
    2808:	93 e1       	ldi	r25, 0x13	; 19
    280a:	d9 cd       	rjmp	.-1102   	; 0x23be <twi_attachSlaveRxEvent>

0000280c <_ZN7TwoWire8setClockEm>:
    280c:	cb 01       	movw	r24, r22
    280e:	ba 01       	movw	r22, r20
    2810:	fc cc       	rjmp	.-1544   	; 0x220a <twi_setFrequency>

00002812 <_ZN7TwoWire17beginTransmissionEh>:
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <_ZN7TwoWire12transmittingE>
    2818:	60 93 dc 07 	sts	0x07DC, r22	; 0x8007dc <_ZN7TwoWire9txAddressE>
    281c:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    2820:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    2824:	08 95       	ret

00002826 <_ZN7TwoWire15endTransmissionEh>:
    2826:	0f 93       	push	r16
    2828:	06 2f       	mov	r16, r22
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	40 91 ba 07 	lds	r20, 0x07BA	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    2830:	6c eb       	ldi	r22, 0xBC	; 188
    2832:	77 e0       	ldi	r23, 0x07	; 7
    2834:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <_ZN7TwoWire9txAddressE>
    2838:	44 dd       	rcall	.-1400   	; 0x22c2 <twi_writeTo>
    283a:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <_ZN7TwoWire13txBufferIndexE>
    283e:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <_ZN7TwoWire14txBufferLengthE>
    2842:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <_ZN7TwoWire12transmittingE>
    2846:	0f 91       	pop	r16
    2848:	08 95       	ret

0000284a <_ZN7TwoWire11requestFromEhhmhh>:
    284a:	4f 92       	push	r4
    284c:	5f 92       	push	r5
    284e:	6f 92       	push	r6
    2850:	7f 92       	push	r7
    2852:	af 92       	push	r10
    2854:	bf 92       	push	r11
    2856:	cf 92       	push	r12
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	5c 01       	movw	r10, r24
    2866:	f6 2e       	mov	r15, r22
    2868:	d4 2f       	mov	r29, r20
    286a:	28 01       	movw	r4, r16
    286c:	39 01       	movw	r6, r18
    286e:	ee 20       	and	r14, r14
    2870:	11 f1       	breq	.+68     	; 0x28b6 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    2872:	cf df       	rcall	.-98     	; 0x2812 <_ZN7TwoWire17beginTransmissionEh>
    2874:	ce 2d       	mov	r28, r14
    2876:	c4 30       	cpi	r28, 0x04	; 4
    2878:	08 f0       	brcs	.+2      	; 0x287c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    287a:	c3 e0       	ldi	r28, 0x03	; 3
    287c:	c1 50       	subi	r28, 0x01	; 1
    287e:	c0 f0       	brcs	.+48     	; 0x28b0 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    2880:	28 e0       	ldi	r18, 0x08	; 8
    2882:	c2 9f       	mul	r28, r18
    2884:	c0 01       	movw	r24, r0
    2886:	11 24       	eor	r1, r1
    2888:	a3 01       	movw	r20, r6
    288a:	92 01       	movw	r18, r4
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    288e:	56 95       	lsr	r21
    2890:	47 95       	ror	r20
    2892:	37 95       	ror	r19
    2894:	27 95       	ror	r18
    2896:	8a 95       	dec	r24
    2898:	d2 f7       	brpl	.-12     	; 0x288e <_ZN7TwoWire11requestFromEhhmhh+0x44>
    289a:	ca 01       	movw	r24, r20
    289c:	b9 01       	movw	r22, r18
    289e:	d5 01       	movw	r26, r10
    28a0:	ed 91       	ld	r30, X+
    28a2:	fc 91       	ld	r31, X
    28a4:	01 90       	ld	r0, Z+
    28a6:	f0 81       	ld	r31, Z
    28a8:	e0 2d       	mov	r30, r0
    28aa:	c5 01       	movw	r24, r10
    28ac:	19 95       	eicall
    28ae:	e6 cf       	rjmp	.-52     	; 0x287c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	c5 01       	movw	r24, r10
    28b4:	b8 df       	rcall	.-144    	; 0x2826 <_ZN7TwoWire15endTransmissionEh>
    28b6:	4d 2f       	mov	r20, r29
    28b8:	d1 32       	cpi	r29, 0x21	; 33
    28ba:	08 f0       	brcs	.+2      	; 0x28be <_ZN7TwoWire11requestFromEhhmhh+0x74>
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	2c 2d       	mov	r18, r12
    28c0:	6f ed       	ldi	r22, 0xDF	; 223
    28c2:	77 e0       	ldi	r23, 0x07	; 7
    28c4:	8f 2d       	mov	r24, r15
    28c6:	b5 dc       	rcall	.-1686   	; 0x2232 <twi_readFrom>
    28c8:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <_ZN7TwoWire13rxBufferIndexE>
    28cc:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <_ZN7TwoWire14rxBufferLengthE>
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	1f 91       	pop	r17
    28d6:	0f 91       	pop	r16
    28d8:	ff 90       	pop	r15
    28da:	ef 90       	pop	r14
    28dc:	cf 90       	pop	r12
    28de:	bf 90       	pop	r11
    28e0:	af 90       	pop	r10
    28e2:	7f 90       	pop	r7
    28e4:	6f 90       	pop	r6
    28e6:	5f 90       	pop	r5
    28e8:	4f 90       	pop	r4
    28ea:	08 95       	ret

000028ec <_ZN7TwoWire11requestFromEhhh>:
    28ec:	cf 92       	push	r12
    28ee:	ef 92       	push	r14
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	c2 2e       	mov	r12, r18
    28f6:	e1 2c       	mov	r14, r1
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
    28fc:	98 01       	movw	r18, r16
    28fe:	a5 df       	rcall	.-182    	; 0x284a <_ZN7TwoWire11requestFromEhhmhh>
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ef 90       	pop	r14
    2906:	cf 90       	pop	r12
    2908:	08 95       	ret

0000290a <_ZN7TwoWire11requestFromEhh>:
    290a:	21 e0       	ldi	r18, 0x01	; 1
    290c:	ef cf       	rjmp	.-34     	; 0x28ec <_ZN7TwoWire11requestFromEhhh>

0000290e <_ZN7TwoWire15endTransmissionEv>:
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	8a cf       	rjmp	.-236    	; 0x2826 <_ZN7TwoWire15endTransmissionEh>

00002912 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2912:	89 ea       	ldi	r24, 0xA9	; 169
    2914:	97 e0       	ldi	r25, 0x07	; 7
    2916:	5b cf       	rjmp	.-330    	; 0x27ce <_ZN7TwoWireC1Ev>

00002918 <__subsf3>:
    2918:	50 58       	subi	r21, 0x80	; 128

0000291a <__addsf3>:
    291a:	bb 27       	eor	r27, r27
    291c:	aa 27       	eor	r26, r26
    291e:	0e d0       	rcall	.+28     	; 0x293c <__addsf3x>
    2920:	48 c1       	rjmp	.+656    	; 0x2bb2 <__fp_round>
    2922:	39 d1       	rcall	.+626    	; 0x2b96 <__fp_pscA>
    2924:	30 f0       	brcs	.+12     	; 0x2932 <__addsf3+0x18>
    2926:	3e d1       	rcall	.+636    	; 0x2ba4 <__fp_pscB>
    2928:	20 f0       	brcs	.+8      	; 0x2932 <__addsf3+0x18>
    292a:	31 f4       	brne	.+12     	; 0x2938 <__addsf3+0x1e>
    292c:	9f 3f       	cpi	r25, 0xFF	; 255
    292e:	11 f4       	brne	.+4      	; 0x2934 <__addsf3+0x1a>
    2930:	1e f4       	brtc	.+6      	; 0x2938 <__addsf3+0x1e>
    2932:	2e c1       	rjmp	.+604    	; 0x2b90 <__fp_nan>
    2934:	0e f4       	brtc	.+2      	; 0x2938 <__addsf3+0x1e>
    2936:	e0 95       	com	r30
    2938:	e7 fb       	bst	r30, 7
    293a:	24 c1       	rjmp	.+584    	; 0x2b84 <__fp_inf>

0000293c <__addsf3x>:
    293c:	e9 2f       	mov	r30, r25
    293e:	4a d1       	rcall	.+660    	; 0x2bd4 <__fp_split3>
    2940:	80 f3       	brcs	.-32     	; 0x2922 <__addsf3+0x8>
    2942:	ba 17       	cp	r27, r26
    2944:	62 07       	cpc	r22, r18
    2946:	73 07       	cpc	r23, r19
    2948:	84 07       	cpc	r24, r20
    294a:	95 07       	cpc	r25, r21
    294c:	18 f0       	brcs	.+6      	; 0x2954 <__addsf3x+0x18>
    294e:	71 f4       	brne	.+28     	; 0x296c <__addsf3x+0x30>
    2950:	9e f5       	brtc	.+102    	; 0x29b8 <__addsf3x+0x7c>
    2952:	62 c1       	rjmp	.+708    	; 0x2c18 <__fp_zero>
    2954:	0e f4       	brtc	.+2      	; 0x2958 <__addsf3x+0x1c>
    2956:	e0 95       	com	r30
    2958:	0b 2e       	mov	r0, r27
    295a:	ba 2f       	mov	r27, r26
    295c:	a0 2d       	mov	r26, r0
    295e:	0b 01       	movw	r0, r22
    2960:	b9 01       	movw	r22, r18
    2962:	90 01       	movw	r18, r0
    2964:	0c 01       	movw	r0, r24
    2966:	ca 01       	movw	r24, r20
    2968:	a0 01       	movw	r20, r0
    296a:	11 24       	eor	r1, r1
    296c:	ff 27       	eor	r31, r31
    296e:	59 1b       	sub	r21, r25
    2970:	99 f0       	breq	.+38     	; 0x2998 <__addsf3x+0x5c>
    2972:	59 3f       	cpi	r21, 0xF9	; 249
    2974:	50 f4       	brcc	.+20     	; 0x298a <__addsf3x+0x4e>
    2976:	50 3e       	cpi	r21, 0xE0	; 224
    2978:	68 f1       	brcs	.+90     	; 0x29d4 <__addsf3x+0x98>
    297a:	1a 16       	cp	r1, r26
    297c:	f0 40       	sbci	r31, 0x00	; 0
    297e:	a2 2f       	mov	r26, r18
    2980:	23 2f       	mov	r18, r19
    2982:	34 2f       	mov	r19, r20
    2984:	44 27       	eor	r20, r20
    2986:	58 5f       	subi	r21, 0xF8	; 248
    2988:	f3 cf       	rjmp	.-26     	; 0x2970 <__addsf3x+0x34>
    298a:	46 95       	lsr	r20
    298c:	37 95       	ror	r19
    298e:	27 95       	ror	r18
    2990:	a7 95       	ror	r26
    2992:	f0 40       	sbci	r31, 0x00	; 0
    2994:	53 95       	inc	r21
    2996:	c9 f7       	brne	.-14     	; 0x298a <__addsf3x+0x4e>
    2998:	7e f4       	brtc	.+30     	; 0x29b8 <__addsf3x+0x7c>
    299a:	1f 16       	cp	r1, r31
    299c:	ba 0b       	sbc	r27, r26
    299e:	62 0b       	sbc	r22, r18
    29a0:	73 0b       	sbc	r23, r19
    29a2:	84 0b       	sbc	r24, r20
    29a4:	ba f0       	brmi	.+46     	; 0x29d4 <__addsf3x+0x98>
    29a6:	91 50       	subi	r25, 0x01	; 1
    29a8:	a1 f0       	breq	.+40     	; 0x29d2 <__addsf3x+0x96>
    29aa:	ff 0f       	add	r31, r31
    29ac:	bb 1f       	adc	r27, r27
    29ae:	66 1f       	adc	r22, r22
    29b0:	77 1f       	adc	r23, r23
    29b2:	88 1f       	adc	r24, r24
    29b4:	c2 f7       	brpl	.-16     	; 0x29a6 <__addsf3x+0x6a>
    29b6:	0e c0       	rjmp	.+28     	; 0x29d4 <__addsf3x+0x98>
    29b8:	ba 0f       	add	r27, r26
    29ba:	62 1f       	adc	r22, r18
    29bc:	73 1f       	adc	r23, r19
    29be:	84 1f       	adc	r24, r20
    29c0:	48 f4       	brcc	.+18     	; 0x29d4 <__addsf3x+0x98>
    29c2:	87 95       	ror	r24
    29c4:	77 95       	ror	r23
    29c6:	67 95       	ror	r22
    29c8:	b7 95       	ror	r27
    29ca:	f7 95       	ror	r31
    29cc:	9e 3f       	cpi	r25, 0xFE	; 254
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <__addsf3x+0x96>
    29d0:	b3 cf       	rjmp	.-154    	; 0x2938 <__addsf3+0x1e>
    29d2:	93 95       	inc	r25
    29d4:	88 0f       	add	r24, r24
    29d6:	08 f0       	brcs	.+2      	; 0x29da <__addsf3x+0x9e>
    29d8:	99 27       	eor	r25, r25
    29da:	ee 0f       	add	r30, r30
    29dc:	97 95       	ror	r25
    29de:	87 95       	ror	r24
    29e0:	08 95       	ret

000029e2 <__divsf3>:
    29e2:	0c d0       	rcall	.+24     	; 0x29fc <__divsf3x>
    29e4:	e6 c0       	rjmp	.+460    	; 0x2bb2 <__fp_round>
    29e6:	de d0       	rcall	.+444    	; 0x2ba4 <__fp_pscB>
    29e8:	40 f0       	brcs	.+16     	; 0x29fa <__divsf3+0x18>
    29ea:	d5 d0       	rcall	.+426    	; 0x2b96 <__fp_pscA>
    29ec:	30 f0       	brcs	.+12     	; 0x29fa <__divsf3+0x18>
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <__divsf3+0x16>
    29f0:	5f 3f       	cpi	r21, 0xFF	; 255
    29f2:	19 f0       	breq	.+6      	; 0x29fa <__divsf3+0x18>
    29f4:	c7 c0       	rjmp	.+398    	; 0x2b84 <__fp_inf>
    29f6:	51 11       	cpse	r21, r1
    29f8:	10 c1       	rjmp	.+544    	; 0x2c1a <__fp_szero>
    29fa:	ca c0       	rjmp	.+404    	; 0x2b90 <__fp_nan>

000029fc <__divsf3x>:
    29fc:	eb d0       	rcall	.+470    	; 0x2bd4 <__fp_split3>
    29fe:	98 f3       	brcs	.-26     	; 0x29e6 <__divsf3+0x4>

00002a00 <__divsf3_pse>:
    2a00:	99 23       	and	r25, r25
    2a02:	c9 f3       	breq	.-14     	; 0x29f6 <__divsf3+0x14>
    2a04:	55 23       	and	r21, r21
    2a06:	b1 f3       	breq	.-20     	; 0x29f4 <__divsf3+0x12>
    2a08:	95 1b       	sub	r25, r21
    2a0a:	55 0b       	sbc	r21, r21
    2a0c:	bb 27       	eor	r27, r27
    2a0e:	aa 27       	eor	r26, r26
    2a10:	62 17       	cp	r22, r18
    2a12:	73 07       	cpc	r23, r19
    2a14:	84 07       	cpc	r24, r20
    2a16:	38 f0       	brcs	.+14     	; 0x2a26 <__divsf3_pse+0x26>
    2a18:	9f 5f       	subi	r25, 0xFF	; 255
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1c:	22 0f       	add	r18, r18
    2a1e:	33 1f       	adc	r19, r19
    2a20:	44 1f       	adc	r20, r20
    2a22:	aa 1f       	adc	r26, r26
    2a24:	a9 f3       	breq	.-22     	; 0x2a10 <__divsf3_pse+0x10>
    2a26:	33 d0       	rcall	.+102    	; 0x2a8e <__divsf3_pse+0x8e>
    2a28:	0e 2e       	mov	r0, r30
    2a2a:	3a f0       	brmi	.+14     	; 0x2a3a <__divsf3_pse+0x3a>
    2a2c:	e0 e8       	ldi	r30, 0x80	; 128
    2a2e:	30 d0       	rcall	.+96     	; 0x2a90 <__divsf3_pse+0x90>
    2a30:	91 50       	subi	r25, 0x01	; 1
    2a32:	50 40       	sbci	r21, 0x00	; 0
    2a34:	e6 95       	lsr	r30
    2a36:	00 1c       	adc	r0, r0
    2a38:	ca f7       	brpl	.-14     	; 0x2a2c <__divsf3_pse+0x2c>
    2a3a:	29 d0       	rcall	.+82     	; 0x2a8e <__divsf3_pse+0x8e>
    2a3c:	fe 2f       	mov	r31, r30
    2a3e:	27 d0       	rcall	.+78     	; 0x2a8e <__divsf3_pse+0x8e>
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	bb 1f       	adc	r27, r27
    2a48:	26 17       	cp	r18, r22
    2a4a:	37 07       	cpc	r19, r23
    2a4c:	48 07       	cpc	r20, r24
    2a4e:	ab 07       	cpc	r26, r27
    2a50:	b0 e8       	ldi	r27, 0x80	; 128
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <__divsf3_pse+0x56>
    2a54:	bb 0b       	sbc	r27, r27
    2a56:	80 2d       	mov	r24, r0
    2a58:	bf 01       	movw	r22, r30
    2a5a:	ff 27       	eor	r31, r31
    2a5c:	93 58       	subi	r25, 0x83	; 131
    2a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a60:	2a f0       	brmi	.+10     	; 0x2a6c <__divsf3_pse+0x6c>
    2a62:	9e 3f       	cpi	r25, 0xFE	; 254
    2a64:	51 05       	cpc	r21, r1
    2a66:	68 f0       	brcs	.+26     	; 0x2a82 <__divsf3_pse+0x82>
    2a68:	8d c0       	rjmp	.+282    	; 0x2b84 <__fp_inf>
    2a6a:	d7 c0       	rjmp	.+430    	; 0x2c1a <__fp_szero>
    2a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a6e:	ec f3       	brlt	.-6      	; 0x2a6a <__divsf3_pse+0x6a>
    2a70:	98 3e       	cpi	r25, 0xE8	; 232
    2a72:	dc f3       	brlt	.-10     	; 0x2a6a <__divsf3_pse+0x6a>
    2a74:	86 95       	lsr	r24
    2a76:	77 95       	ror	r23
    2a78:	67 95       	ror	r22
    2a7a:	b7 95       	ror	r27
    2a7c:	f7 95       	ror	r31
    2a7e:	9f 5f       	subi	r25, 0xFF	; 255
    2a80:	c9 f7       	brne	.-14     	; 0x2a74 <__divsf3_pse+0x74>
    2a82:	88 0f       	add	r24, r24
    2a84:	91 1d       	adc	r25, r1
    2a86:	96 95       	lsr	r25
    2a88:	87 95       	ror	r24
    2a8a:	97 f9       	bld	r25, 7
    2a8c:	08 95       	ret
    2a8e:	e1 e0       	ldi	r30, 0x01	; 1
    2a90:	66 0f       	add	r22, r22
    2a92:	77 1f       	adc	r23, r23
    2a94:	88 1f       	adc	r24, r24
    2a96:	bb 1f       	adc	r27, r27
    2a98:	62 17       	cp	r22, r18
    2a9a:	73 07       	cpc	r23, r19
    2a9c:	84 07       	cpc	r24, r20
    2a9e:	ba 07       	cpc	r27, r26
    2aa0:	20 f0       	brcs	.+8      	; 0x2aaa <__divsf3_pse+0xaa>
    2aa2:	62 1b       	sub	r22, r18
    2aa4:	73 0b       	sbc	r23, r19
    2aa6:	84 0b       	sbc	r24, r20
    2aa8:	ba 0b       	sbc	r27, r26
    2aaa:	ee 1f       	adc	r30, r30
    2aac:	88 f7       	brcc	.-30     	; 0x2a90 <__divsf3_pse+0x90>
    2aae:	e0 95       	com	r30
    2ab0:	08 95       	ret

00002ab2 <__fixunssfsi>:
    2ab2:	98 d0       	rcall	.+304    	; 0x2be4 <__fp_splitA>
    2ab4:	88 f0       	brcs	.+34     	; 0x2ad8 <__fixunssfsi+0x26>
    2ab6:	9f 57       	subi	r25, 0x7F	; 127
    2ab8:	90 f0       	brcs	.+36     	; 0x2ade <__fixunssfsi+0x2c>
    2aba:	b9 2f       	mov	r27, r25
    2abc:	99 27       	eor	r25, r25
    2abe:	b7 51       	subi	r27, 0x17	; 23
    2ac0:	a0 f0       	brcs	.+40     	; 0x2aea <__fixunssfsi+0x38>
    2ac2:	d1 f0       	breq	.+52     	; 0x2af8 <__fixunssfsi+0x46>
    2ac4:	66 0f       	add	r22, r22
    2ac6:	77 1f       	adc	r23, r23
    2ac8:	88 1f       	adc	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	1a f0       	brmi	.+6      	; 0x2ad4 <__fixunssfsi+0x22>
    2ace:	ba 95       	dec	r27
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <__fixunssfsi+0x12>
    2ad2:	12 c0       	rjmp	.+36     	; 0x2af8 <__fixunssfsi+0x46>
    2ad4:	b1 30       	cpi	r27, 0x01	; 1
    2ad6:	81 f0       	breq	.+32     	; 0x2af8 <__fixunssfsi+0x46>
    2ad8:	9f d0       	rcall	.+318    	; 0x2c18 <__fp_zero>
    2ada:	b1 e0       	ldi	r27, 0x01	; 1
    2adc:	08 95       	ret
    2ade:	9c c0       	rjmp	.+312    	; 0x2c18 <__fp_zero>
    2ae0:	67 2f       	mov	r22, r23
    2ae2:	78 2f       	mov	r23, r24
    2ae4:	88 27       	eor	r24, r24
    2ae6:	b8 5f       	subi	r27, 0xF8	; 248
    2ae8:	39 f0       	breq	.+14     	; 0x2af8 <__fixunssfsi+0x46>
    2aea:	b9 3f       	cpi	r27, 0xF9	; 249
    2aec:	cc f3       	brlt	.-14     	; 0x2ae0 <__fixunssfsi+0x2e>
    2aee:	86 95       	lsr	r24
    2af0:	77 95       	ror	r23
    2af2:	67 95       	ror	r22
    2af4:	b3 95       	inc	r27
    2af6:	d9 f7       	brne	.-10     	; 0x2aee <__fixunssfsi+0x3c>
    2af8:	3e f4       	brtc	.+14     	; 0x2b08 <__fixunssfsi+0x56>
    2afa:	90 95       	com	r25
    2afc:	80 95       	com	r24
    2afe:	70 95       	com	r23
    2b00:	61 95       	neg	r22
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	8f 4f       	sbci	r24, 0xFF	; 255
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	08 95       	ret

00002b0a <__floatunsisf>:
    2b0a:	e8 94       	clt
    2b0c:	09 c0       	rjmp	.+18     	; 0x2b20 <__floatsisf+0x12>

00002b0e <__floatsisf>:
    2b0e:	97 fb       	bst	r25, 7
    2b10:	3e f4       	brtc	.+14     	; 0x2b20 <__floatsisf+0x12>
    2b12:	90 95       	com	r25
    2b14:	80 95       	com	r24
    2b16:	70 95       	com	r23
    2b18:	61 95       	neg	r22
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	99 23       	and	r25, r25
    2b22:	a9 f0       	breq	.+42     	; 0x2b4e <__floatsisf+0x40>
    2b24:	f9 2f       	mov	r31, r25
    2b26:	96 e9       	ldi	r25, 0x96	; 150
    2b28:	bb 27       	eor	r27, r27
    2b2a:	93 95       	inc	r25
    2b2c:	f6 95       	lsr	r31
    2b2e:	87 95       	ror	r24
    2b30:	77 95       	ror	r23
    2b32:	67 95       	ror	r22
    2b34:	b7 95       	ror	r27
    2b36:	f1 11       	cpse	r31, r1
    2b38:	f8 cf       	rjmp	.-16     	; 0x2b2a <__floatsisf+0x1c>
    2b3a:	fa f4       	brpl	.+62     	; 0x2b7a <__floatsisf+0x6c>
    2b3c:	bb 0f       	add	r27, r27
    2b3e:	11 f4       	brne	.+4      	; 0x2b44 <__floatsisf+0x36>
    2b40:	60 ff       	sbrs	r22, 0
    2b42:	1b c0       	rjmp	.+54     	; 0x2b7a <__floatsisf+0x6c>
    2b44:	6f 5f       	subi	r22, 0xFF	; 255
    2b46:	7f 4f       	sbci	r23, 0xFF	; 255
    2b48:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	16 c0       	rjmp	.+44     	; 0x2b7a <__floatsisf+0x6c>
    2b4e:	88 23       	and	r24, r24
    2b50:	11 f0       	breq	.+4      	; 0x2b56 <__floatsisf+0x48>
    2b52:	96 e9       	ldi	r25, 0x96	; 150
    2b54:	11 c0       	rjmp	.+34     	; 0x2b78 <__floatsisf+0x6a>
    2b56:	77 23       	and	r23, r23
    2b58:	21 f0       	breq	.+8      	; 0x2b62 <__floatsisf+0x54>
    2b5a:	9e e8       	ldi	r25, 0x8E	; 142
    2b5c:	87 2f       	mov	r24, r23
    2b5e:	76 2f       	mov	r23, r22
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <__floatsisf+0x5e>
    2b62:	66 23       	and	r22, r22
    2b64:	71 f0       	breq	.+28     	; 0x2b82 <__floatsisf+0x74>
    2b66:	96 e8       	ldi	r25, 0x86	; 134
    2b68:	86 2f       	mov	r24, r22
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	2a f0       	brmi	.+10     	; 0x2b7a <__floatsisf+0x6c>
    2b70:	9a 95       	dec	r25
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	88 1f       	adc	r24, r24
    2b78:	da f7       	brpl	.-10     	; 0x2b70 <__floatsisf+0x62>
    2b7a:	88 0f       	add	r24, r24
    2b7c:	96 95       	lsr	r25
    2b7e:	87 95       	ror	r24
    2b80:	97 f9       	bld	r25, 7
    2b82:	08 95       	ret

00002b84 <__fp_inf>:
    2b84:	97 f9       	bld	r25, 7
    2b86:	9f 67       	ori	r25, 0x7F	; 127
    2b88:	80 e8       	ldi	r24, 0x80	; 128
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	08 95       	ret

00002b90 <__fp_nan>:
    2b90:	9f ef       	ldi	r25, 0xFF	; 255
    2b92:	80 ec       	ldi	r24, 0xC0	; 192
    2b94:	08 95       	ret

00002b96 <__fp_pscA>:
    2b96:	00 24       	eor	r0, r0
    2b98:	0a 94       	dec	r0
    2b9a:	16 16       	cp	r1, r22
    2b9c:	17 06       	cpc	r1, r23
    2b9e:	18 06       	cpc	r1, r24
    2ba0:	09 06       	cpc	r0, r25
    2ba2:	08 95       	ret

00002ba4 <__fp_pscB>:
    2ba4:	00 24       	eor	r0, r0
    2ba6:	0a 94       	dec	r0
    2ba8:	12 16       	cp	r1, r18
    2baa:	13 06       	cpc	r1, r19
    2bac:	14 06       	cpc	r1, r20
    2bae:	05 06       	cpc	r0, r21
    2bb0:	08 95       	ret

00002bb2 <__fp_round>:
    2bb2:	09 2e       	mov	r0, r25
    2bb4:	03 94       	inc	r0
    2bb6:	00 0c       	add	r0, r0
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <__fp_round+0xc>
    2bba:	88 23       	and	r24, r24
    2bbc:	52 f0       	brmi	.+20     	; 0x2bd2 <__fp_round+0x20>
    2bbe:	bb 0f       	add	r27, r27
    2bc0:	40 f4       	brcc	.+16     	; 0x2bd2 <__fp_round+0x20>
    2bc2:	bf 2b       	or	r27, r31
    2bc4:	11 f4       	brne	.+4      	; 0x2bca <__fp_round+0x18>
    2bc6:	60 ff       	sbrs	r22, 0
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <__fp_round+0x20>
    2bca:	6f 5f       	subi	r22, 0xFF	; 255
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd2:	08 95       	ret

00002bd4 <__fp_split3>:
    2bd4:	57 fd       	sbrc	r21, 7
    2bd6:	90 58       	subi	r25, 0x80	; 128
    2bd8:	44 0f       	add	r20, r20
    2bda:	55 1f       	adc	r21, r21
    2bdc:	59 f0       	breq	.+22     	; 0x2bf4 <__fp_splitA+0x10>
    2bde:	5f 3f       	cpi	r21, 0xFF	; 255
    2be0:	71 f0       	breq	.+28     	; 0x2bfe <__fp_splitA+0x1a>
    2be2:	47 95       	ror	r20

00002be4 <__fp_splitA>:
    2be4:	88 0f       	add	r24, r24
    2be6:	97 fb       	bst	r25, 7
    2be8:	99 1f       	adc	r25, r25
    2bea:	61 f0       	breq	.+24     	; 0x2c04 <__fp_splitA+0x20>
    2bec:	9f 3f       	cpi	r25, 0xFF	; 255
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <__fp_splitA+0x2a>
    2bf0:	87 95       	ror	r24
    2bf2:	08 95       	ret
    2bf4:	12 16       	cp	r1, r18
    2bf6:	13 06       	cpc	r1, r19
    2bf8:	14 06       	cpc	r1, r20
    2bfa:	55 1f       	adc	r21, r21
    2bfc:	f2 cf       	rjmp	.-28     	; 0x2be2 <__fp_split3+0xe>
    2bfe:	46 95       	lsr	r20
    2c00:	f1 df       	rcall	.-30     	; 0x2be4 <__fp_splitA>
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <__fp_splitA+0x30>
    2c04:	16 16       	cp	r1, r22
    2c06:	17 06       	cpc	r1, r23
    2c08:	18 06       	cpc	r1, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	f1 cf       	rjmp	.-30     	; 0x2bf0 <__fp_splitA+0xc>
    2c0e:	86 95       	lsr	r24
    2c10:	71 05       	cpc	r23, r1
    2c12:	61 05       	cpc	r22, r1
    2c14:	08 94       	sec
    2c16:	08 95       	ret

00002c18 <__fp_zero>:
    2c18:	e8 94       	clt

00002c1a <__fp_szero>:
    2c1a:	bb 27       	eor	r27, r27
    2c1c:	66 27       	eor	r22, r22
    2c1e:	77 27       	eor	r23, r23
    2c20:	cb 01       	movw	r24, r22
    2c22:	97 f9       	bld	r25, 7
    2c24:	08 95       	ret

00002c26 <__mulsf3>:
    2c26:	0b d0       	rcall	.+22     	; 0x2c3e <__mulsf3x>
    2c28:	c4 cf       	rjmp	.-120    	; 0x2bb2 <__fp_round>
    2c2a:	b5 df       	rcall	.-150    	; 0x2b96 <__fp_pscA>
    2c2c:	28 f0       	brcs	.+10     	; 0x2c38 <__mulsf3+0x12>
    2c2e:	ba df       	rcall	.-140    	; 0x2ba4 <__fp_pscB>
    2c30:	18 f0       	brcs	.+6      	; 0x2c38 <__mulsf3+0x12>
    2c32:	95 23       	and	r25, r21
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <__mulsf3+0x12>
    2c36:	a6 cf       	rjmp	.-180    	; 0x2b84 <__fp_inf>
    2c38:	ab cf       	rjmp	.-170    	; 0x2b90 <__fp_nan>
    2c3a:	11 24       	eor	r1, r1
    2c3c:	ee cf       	rjmp	.-36     	; 0x2c1a <__fp_szero>

00002c3e <__mulsf3x>:
    2c3e:	ca df       	rcall	.-108    	; 0x2bd4 <__fp_split3>
    2c40:	a0 f3       	brcs	.-24     	; 0x2c2a <__mulsf3+0x4>

00002c42 <__mulsf3_pse>:
    2c42:	95 9f       	mul	r25, r21
    2c44:	d1 f3       	breq	.-12     	; 0x2c3a <__mulsf3+0x14>
    2c46:	95 0f       	add	r25, r21
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	55 1f       	adc	r21, r21
    2c4c:	62 9f       	mul	r22, r18
    2c4e:	f0 01       	movw	r30, r0
    2c50:	72 9f       	mul	r23, r18
    2c52:	bb 27       	eor	r27, r27
    2c54:	f0 0d       	add	r31, r0
    2c56:	b1 1d       	adc	r27, r1
    2c58:	63 9f       	mul	r22, r19
    2c5a:	aa 27       	eor	r26, r26
    2c5c:	f0 0d       	add	r31, r0
    2c5e:	b1 1d       	adc	r27, r1
    2c60:	aa 1f       	adc	r26, r26
    2c62:	64 9f       	mul	r22, r20
    2c64:	66 27       	eor	r22, r22
    2c66:	b0 0d       	add	r27, r0
    2c68:	a1 1d       	adc	r26, r1
    2c6a:	66 1f       	adc	r22, r22
    2c6c:	82 9f       	mul	r24, r18
    2c6e:	22 27       	eor	r18, r18
    2c70:	b0 0d       	add	r27, r0
    2c72:	a1 1d       	adc	r26, r1
    2c74:	62 1f       	adc	r22, r18
    2c76:	73 9f       	mul	r23, r19
    2c78:	b0 0d       	add	r27, r0
    2c7a:	a1 1d       	adc	r26, r1
    2c7c:	62 1f       	adc	r22, r18
    2c7e:	83 9f       	mul	r24, r19
    2c80:	a0 0d       	add	r26, r0
    2c82:	61 1d       	adc	r22, r1
    2c84:	22 1f       	adc	r18, r18
    2c86:	74 9f       	mul	r23, r20
    2c88:	33 27       	eor	r19, r19
    2c8a:	a0 0d       	add	r26, r0
    2c8c:	61 1d       	adc	r22, r1
    2c8e:	23 1f       	adc	r18, r19
    2c90:	84 9f       	mul	r24, r20
    2c92:	60 0d       	add	r22, r0
    2c94:	21 1d       	adc	r18, r1
    2c96:	82 2f       	mov	r24, r18
    2c98:	76 2f       	mov	r23, r22
    2c9a:	6a 2f       	mov	r22, r26
    2c9c:	11 24       	eor	r1, r1
    2c9e:	9f 57       	subi	r25, 0x7F	; 127
    2ca0:	50 40       	sbci	r21, 0x00	; 0
    2ca2:	8a f0       	brmi	.+34     	; 0x2cc6 <__mulsf3_pse+0x84>
    2ca4:	e1 f0       	breq	.+56     	; 0x2cde <__mulsf3_pse+0x9c>
    2ca6:	88 23       	and	r24, r24
    2ca8:	4a f0       	brmi	.+18     	; 0x2cbc <__mulsf3_pse+0x7a>
    2caa:	ee 0f       	add	r30, r30
    2cac:	ff 1f       	adc	r31, r31
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	66 1f       	adc	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	91 50       	subi	r25, 0x01	; 1
    2cb8:	50 40       	sbci	r21, 0x00	; 0
    2cba:	a9 f7       	brne	.-22     	; 0x2ca6 <__mulsf3_pse+0x64>
    2cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    2cbe:	51 05       	cpc	r21, r1
    2cc0:	70 f0       	brcs	.+28     	; 0x2cde <__mulsf3_pse+0x9c>
    2cc2:	60 cf       	rjmp	.-320    	; 0x2b84 <__fp_inf>
    2cc4:	aa cf       	rjmp	.-172    	; 0x2c1a <__fp_szero>
    2cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cc8:	ec f3       	brlt	.-6      	; 0x2cc4 <__mulsf3_pse+0x82>
    2cca:	98 3e       	cpi	r25, 0xE8	; 232
    2ccc:	dc f3       	brlt	.-10     	; 0x2cc4 <__mulsf3_pse+0x82>
    2cce:	86 95       	lsr	r24
    2cd0:	77 95       	ror	r23
    2cd2:	67 95       	ror	r22
    2cd4:	b7 95       	ror	r27
    2cd6:	f7 95       	ror	r31
    2cd8:	e7 95       	ror	r30
    2cda:	9f 5f       	subi	r25, 0xFF	; 255
    2cdc:	c1 f7       	brne	.-16     	; 0x2cce <__mulsf3_pse+0x8c>
    2cde:	fe 2b       	or	r31, r30
    2ce0:	88 0f       	add	r24, r24
    2ce2:	91 1d       	adc	r25, r1
    2ce4:	96 95       	lsr	r25
    2ce6:	87 95       	ror	r24
    2ce8:	97 f9       	bld	r25, 7
    2cea:	08 95       	ret

00002cec <initVariant>:
    2cec:	08 95       	ret

00002cee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2cee:	cb d0       	rcall	.+406    	; 0x2e86 <init>

	initVariant();
    2cf0:	fd df       	rcall	.-6      	; 0x2cec <initVariant>
    2cf2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2cf6:	c0 e0       	ldi	r28, 0x00	; 0
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2cf8:	d0 e0       	ldi	r29, 0x00	; 0
    2cfa:	0e 94 0e 08 	call	0x101c	; 0x101c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    2cfe:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    2d00:	e1 f3       	breq	.-8      	; 0x2cfa <main+0xc>
    2d02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d06:	f9 cf       	rjmp	.-14     	; 0x2cfa <main+0xc>

00002d08 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2d08:	1f 92       	push	r1
    2d0a:	0f 92       	push	r0
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	0f 92       	push	r0
    2d10:	11 24       	eor	r1, r1
    2d12:	2f 93       	push	r18
    2d14:	3f 93       	push	r19
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	af 93       	push	r26
    2d1c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2d1e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <timer0_millis>
    2d22:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <timer0_millis+0x1>
    2d26:	a0 91 02 08 	lds	r26, 0x0802	; 0x800802 <timer0_millis+0x2>
    2d2a:	b0 91 03 08 	lds	r27, 0x0803	; 0x800803 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2d2e:	30 91 ff 07 	lds	r19, 0x07FF	; 0x8007ff <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2d32:	23 e0       	ldi	r18, 0x03	; 3
    2d34:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2d36:	2d 37       	cpi	r18, 0x7D	; 125
    2d38:	20 f4       	brcc	.+8      	; 0x2d42 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	a1 1d       	adc	r26, r1
    2d3e:	b1 1d       	adc	r27, r1
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2d42:	26 e8       	ldi	r18, 0x86	; 134
    2d44:	23 0f       	add	r18, r19
		m += 1;
    2d46:	02 96       	adiw	r24, 0x02	; 2
    2d48:	a1 1d       	adc	r26, r1
    2d4a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2d4c:	20 93 ff 07 	sts	0x07FF, r18	; 0x8007ff <timer0_fract>
	timer0_millis = m;
    2d50:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <timer0_millis>
    2d54:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <timer0_millis+0x1>
    2d58:	a0 93 02 08 	sts	0x0802, r26	; 0x800802 <timer0_millis+0x2>
    2d5c:	b0 93 03 08 	sts	0x0803, r27	; 0x800803 <timer0_millis+0x3>
	timer0_overflow_count++;
    2d60:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <timer0_overflow_count>
    2d64:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <timer0_overflow_count+0x1>
    2d68:	a0 91 06 08 	lds	r26, 0x0806	; 0x800806 <timer0_overflow_count+0x2>
    2d6c:	b0 91 07 08 	lds	r27, 0x0807	; 0x800807 <timer0_overflow_count+0x3>
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	a1 1d       	adc	r26, r1
    2d74:	b1 1d       	adc	r27, r1
    2d76:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <timer0_overflow_count>
    2d7a:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <timer0_overflow_count+0x1>
    2d7e:	a0 93 06 08 	sts	0x0806, r26	; 0x800806 <timer0_overflow_count+0x2>
    2d82:	b0 93 07 08 	sts	0x0807, r27	; 0x800807 <timer0_overflow_count+0x3>
}
    2d86:	bf 91       	pop	r27
    2d88:	af 91       	pop	r26
    2d8a:	9f 91       	pop	r25
    2d8c:	8f 91       	pop	r24
    2d8e:	3f 91       	pop	r19
    2d90:	2f 91       	pop	r18
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2d9c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2d9e:	f8 94       	cli
	m = timer0_millis;
    2da0:	60 91 00 08 	lds	r22, 0x0800	; 0x800800 <timer0_millis>
    2da4:	70 91 01 08 	lds	r23, 0x0801	; 0x800801 <timer0_millis+0x1>
    2da8:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <timer0_millis+0x2>
    2dac:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <timer0_millis+0x3>
	SREG = oldSREG;
    2db0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2db2:	08 95       	ret

00002db4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2db4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2db6:	f8 94       	cli
	m = timer0_overflow_count;
    2db8:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <timer0_overflow_count>
    2dbc:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <timer0_overflow_count+0x1>
    2dc0:	a0 91 06 08 	lds	r26, 0x0806	; 0x800806 <timer0_overflow_count+0x2>
    2dc4:	b0 91 07 08 	lds	r27, 0x0807	; 0x800807 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2dc8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2dca:	a8 9b       	sbis	0x15, 0	; 21
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <micros+0x24>
    2dce:	2f 3f       	cpi	r18, 0xFF	; 255
    2dd0:	19 f0       	breq	.+6      	; 0x2dd8 <micros+0x24>
		m++;
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2dd8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2dda:	ba 2f       	mov	r27, r26
    2ddc:	a9 2f       	mov	r26, r25
    2dde:	98 2f       	mov	r25, r24
    2de0:	88 27       	eor	r24, r24
    2de2:	82 0f       	add	r24, r18
    2de4:	91 1d       	adc	r25, r1
    2de6:	a1 1d       	adc	r26, r1
    2de8:	b1 1d       	adc	r27, r1
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	42 e0       	ldi	r20, 0x02	; 2
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	88 1f       	adc	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	4a 95       	dec	r20
    2dfa:	d1 f7       	brne	.-12     	; 0x2df0 <micros+0x3c>
}
    2dfc:	08 95       	ret

00002dfe <delay>:

void delay(unsigned long ms)
{
    2dfe:	8f 92       	push	r8
    2e00:	9f 92       	push	r9
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	6b 01       	movw	r12, r22
    2e10:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2e12:	d0 df       	rcall	.-96     	; 0x2db4 <micros>
    2e14:	4b 01       	movw	r8, r22
    2e16:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2e18:	c1 14       	cp	r12, r1
    2e1a:	d1 04       	cpc	r13, r1
    2e1c:	e1 04       	cpc	r14, r1
    2e1e:	f1 04       	cpc	r15, r1
		yield();
    2e20:	f1 f0       	breq	.+60     	; 0x2e5e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e22:	3d d7       	rcall	.+3706   	; 0x3c9e <yield>
    2e24:	c7 df       	rcall	.-114    	; 0x2db4 <micros>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	88 19       	sub	r24, r8
    2e2c:	99 09       	sbc	r25, r9
    2e2e:	aa 09       	sbc	r26, r10
    2e30:	bb 09       	sbc	r27, r11
    2e32:	88 3e       	cpi	r24, 0xE8	; 232
    2e34:	93 40       	sbci	r25, 0x03	; 3
    2e36:	a1 05       	cpc	r26, r1
    2e38:	b1 05       	cpc	r27, r1
    2e3a:	70 f3       	brcs	.-36     	; 0x2e18 <delay+0x1a>
			ms--;
    2e3c:	21 e0       	ldi	r18, 0x01	; 1
    2e3e:	c2 1a       	sub	r12, r18
    2e40:	d1 08       	sbc	r13, r1
    2e42:	e1 08       	sbc	r14, r1
    2e44:	f1 08       	sbc	r15, r1
			start += 1000;
    2e46:	88 ee       	ldi	r24, 0xE8	; 232
    2e48:	88 0e       	add	r8, r24
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	98 1e       	adc	r9, r24
    2e4e:	a1 1c       	adc	r10, r1
    2e50:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2e52:	c1 14       	cp	r12, r1
    2e54:	d1 04       	cpc	r13, r1
    2e56:	e1 04       	cpc	r14, r1
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	21 f7       	brne	.-56     	; 0x2e24 <delay+0x26>
    2e5c:	dd cf       	rjmp	.-70     	; 0x2e18 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	df 90       	pop	r13
    2e64:	cf 90       	pop	r12
    2e66:	bf 90       	pop	r11
    2e68:	af 90       	pop	r10
    2e6a:	9f 90       	pop	r9
    2e6c:	8f 90       	pop	r8
    2e6e:	08 95       	ret

00002e70 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	91 05       	cpc	r25, r1
    2e74:	38 f0       	brcs	.+14     	; 0x2e84 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2e7e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <delayMicroseconds+0x10>
    2e84:	08 95       	ret

00002e86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2e86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2e88:	84 b5       	in	r24, 0x24	; 36
    2e8a:	82 60       	ori	r24, 0x02	; 2
    2e8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2e8e:	84 b5       	in	r24, 0x24	; 36
    2e90:	81 60       	ori	r24, 0x01	; 1
    2e92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2e94:	85 b5       	in	r24, 0x25	; 37
    2e96:	82 60       	ori	r24, 0x02	; 2
    2e98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2e9a:	85 b5       	in	r24, 0x25	; 37
    2e9c:	81 60       	ori	r24, 0x01	; 1
    2e9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ea0:	ee e6       	ldi	r30, 0x6E	; 110
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	81 60       	ori	r24, 0x01	; 1
    2ea8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2eaa:	e1 e8       	ldi	r30, 0x81	; 129
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2eb0:	80 81       	ld	r24, Z
    2eb2:	82 60       	ori	r24, 0x02	; 2
    2eb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2eb6:	80 81       	ld	r24, Z
    2eb8:	81 60       	ori	r24, 0x01	; 1
    2eba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2ebc:	e0 e8       	ldi	r30, 0x80	; 128
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	81 60       	ori	r24, 0x01	; 1
    2ec4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ec6:	e1 eb       	ldi	r30, 0xB1	; 177
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	84 60       	ori	r24, 0x04	; 4
    2ece:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2ed0:	e0 eb       	ldi	r30, 0xB0	; 176
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	81 60       	ori	r24, 0x01	; 1
    2ed8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2eda:	e1 e9       	ldi	r30, 0x91	; 145
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	82 60       	ori	r24, 0x02	; 2
    2ee2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2ee4:	80 81       	ld	r24, Z
    2ee6:	81 60       	ori	r24, 0x01	; 1
    2ee8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2eea:	e0 e9       	ldi	r30, 0x90	; 144
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2ef4:	e1 ea       	ldi	r30, 0xA1	; 161
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 60       	ori	r24, 0x02	; 2
    2efc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2efe:	80 81       	ld	r24, Z
    2f00:	81 60       	ori	r24, 0x01	; 1
    2f02:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2f04:	e0 ea       	ldi	r30, 0xA0	; 160
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	81 60       	ori	r24, 0x01	; 1
    2f0c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2f0e:	e1 e2       	ldi	r30, 0x21	; 33
    2f10:	f1 e0       	ldi	r31, 0x01	; 1
    2f12:	80 81       	ld	r24, Z
    2f14:	82 60       	ori	r24, 0x02	; 2
    2f16:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2f18:	80 81       	ld	r24, Z
    2f1a:	81 60       	ori	r24, 0x01	; 1
    2f1c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2f1e:	e0 e2       	ldi	r30, 0x20	; 32
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	80 81       	ld	r24, Z
    2f24:	81 60       	ori	r24, 0x01	; 1
    2f26:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2f28:	ea e7       	ldi	r30, 0x7A	; 122
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	84 60       	ori	r24, 0x04	; 4
    2f30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2f32:	80 81       	ld	r24, Z
    2f34:	82 60       	ori	r24, 0x02	; 2
    2f36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2f38:	80 81       	ld	r24, Z
    2f3a:	81 60       	ori	r24, 0x01	; 1
    2f3c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2f3e:	80 81       	ld	r24, Z
    2f40:	80 68       	ori	r24, 0x80	; 128
    2f42:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2f44:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    2f48:	08 95       	ret

00002f4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	31 97       	sbiw	r30, 0x01	; 1
    2f50:	e2 31       	cpi	r30, 0x12	; 18
    2f52:	f1 05       	cpc	r31, r1
    2f54:	08 f0       	brcs	.+2      	; 0x2f58 <turnOffPWM+0xe>
    2f56:	4e c0       	rjmp	.+156    	; 0x2ff4 <turnOffPWM+0xaa>
    2f58:	88 27       	eor	r24, r24
    2f5a:	ee 58       	subi	r30, 0x8E	; 142
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f60:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2f64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f68:	8f 77       	andi	r24, 0x7F	; 127
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2f6c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f70:	8f 7d       	andi	r24, 0xDF	; 223
    2f72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f76:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2f78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f7c:	87 7f       	andi	r24, 0xF7	; 247
    2f7e:	f9 cf       	rjmp	.-14     	; 0x2f72 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2f80:	84 b5       	in	r24, 0x24	; 36
    2f82:	8f 77       	andi	r24, 0x7F	; 127
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2f86:	84 b5       	in	r24, 0x24	; 36
    2f88:	8f 7d       	andi	r24, 0xDF	; 223
    2f8a:	84 bd       	out	0x24, r24	; 36
    2f8c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2f8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2f92:	8f 77       	andi	r24, 0x7F	; 127
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2f96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2f9a:	8f 7d       	andi	r24, 0xDF	; 223
    2f9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2fa0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2fa2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2fa6:	8f 77       	andi	r24, 0x7F	; 127
    2fa8:	07 c0       	rjmp	.+14     	; 0x2fb8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2faa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2fae:	8f 7d       	andi	r24, 0xDF	; 223
    2fb0:	03 c0       	rjmp	.+6      	; 0x2fb8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2fb2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2fb6:	87 7f       	andi	r24, 0xF7	; 247
    2fb8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2fbc:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2fbe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2fc2:	8f 77       	andi	r24, 0x7F	; 127
    2fc4:	07 c0       	rjmp	.+14     	; 0x2fd4 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2fc6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2fca:	8f 7d       	andi	r24, 0xDF	; 223
    2fcc:	03 c0       	rjmp	.+6      	; 0x2fd4 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2fce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2fd2:	87 7f       	andi	r24, 0xF7	; 247
    2fd4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2fd8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2fda:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2fde:	8f 77       	andi	r24, 0x7F	; 127
    2fe0:	07 c0       	rjmp	.+14     	; 0x2ff0 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2fe2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2fe6:	8f 7d       	andi	r24, 0xDF	; 223
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2fea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2fee:	87 7f       	andi	r24, 0xF7	; 247
    2ff0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2ff4:	08 95       	ret

00002ff6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	e7 58       	subi	r30, 0x87	; 135
    3000:	fd 4f       	sbci	r31, 0xFD	; 253
    3002:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3004:	fc 01       	movw	r30, r24
    3006:	e1 54       	subi	r30, 0x41	; 65
    3008:	fd 4f       	sbci	r31, 0xFD	; 253
    300a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    300c:	88 23       	and	r24, r24
    300e:	61 f1       	breq	.+88     	; 0x3068 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	fc 01       	movw	r30, r24
    3018:	e7 5c       	subi	r30, 0xC7	; 199
    301a:	fc 4f       	sbci	r31, 0xFC	; 252
    301c:	c5 91       	lpm	r28, Z+
    301e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3020:	fc 01       	movw	r30, r24
    3022:	e1 5e       	subi	r30, 0xE1	; 225
    3024:	fc 4f       	sbci	r31, 0xFC	; 252
    3026:	a5 91       	lpm	r26, Z+
    3028:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    302a:	61 11       	cpse	r22, r1
    302c:	09 c0       	rjmp	.+18     	; 0x3040 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    302e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3030:	f8 94       	cli
		*reg &= ~bit;
    3032:	88 81       	ld	r24, Y
    3034:	20 95       	com	r18
    3036:	82 23       	and	r24, r18
    3038:	88 83       	st	Y, r24
		*out &= ~bit;
    303a:	ec 91       	ld	r30, X
    303c:	2e 23       	and	r18, r30
    303e:	0b c0       	rjmp	.+22     	; 0x3056 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3040:	62 30       	cpi	r22, 0x02	; 2
    3042:	61 f4       	brne	.+24     	; 0x305c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3044:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3046:	f8 94       	cli
		*reg &= ~bit;
    3048:	88 81       	ld	r24, Y
    304a:	32 2f       	mov	r19, r18
    304c:	30 95       	com	r19
    304e:	83 23       	and	r24, r19
    3050:	88 83       	st	Y, r24
		*out |= bit;
    3052:	ec 91       	ld	r30, X
    3054:	2e 2b       	or	r18, r30
    3056:	2c 93       	st	X, r18
		SREG = oldSREG;
    3058:	9f bf       	out	0x3f, r25	; 63
    305a:	06 c0       	rjmp	.+12     	; 0x3068 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    305c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    305e:	f8 94       	cli
		*reg |= bit;
    3060:	e8 81       	ld	r30, Y
    3062:	2e 2b       	or	r18, r30
    3064:	28 83       	st	Y, r18
		SREG = oldSREG;
    3066:	8f bf       	out	0x3f, r24	; 63
	}
}
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	08 95       	ret

0000306e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	f9 01       	movw	r30, r18
    307a:	ed 5c       	subi	r30, 0xCD	; 205
    307c:	fd 4f       	sbci	r31, 0xFD	; 253
    307e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3080:	f9 01       	movw	r30, r18
    3082:	e7 58       	subi	r30, 0x87	; 135
    3084:	fd 4f       	sbci	r31, 0xFD	; 253
    3086:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3088:	f9 01       	movw	r30, r18
    308a:	e1 54       	subi	r30, 0x41	; 65
    308c:	fd 4f       	sbci	r31, 0xFD	; 253
    308e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3090:	cc 23       	and	r28, r28
    3092:	b9 f0       	breq	.+46     	; 0x30c2 <digitalWrite+0x54>
    3094:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3096:	81 11       	cpse	r24, r1
    3098:	58 df       	rcall	.-336    	; 0x2f4a <turnOffPWM>

	out = portOutputRegister(port);
    309a:	ec 2f       	mov	r30, r28
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	ee 0f       	add	r30, r30
    30a0:	ff 1f       	adc	r31, r31
    30a2:	e1 5e       	subi	r30, 0xE1	; 225
    30a4:	fc 4f       	sbci	r31, 0xFC	; 252
    30a6:	a5 91       	lpm	r26, Z+
    30a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    30aa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    30ac:	f8 94       	cli

	if (val == LOW) {
    30ae:	11 11       	cpse	r17, r1
    30b0:	04 c0       	rjmp	.+8      	; 0x30ba <digitalWrite+0x4c>
		*out &= ~bit;
    30b2:	8c 91       	ld	r24, X
    30b4:	d0 95       	com	r29
    30b6:	d8 23       	and	r29, r24
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <digitalWrite+0x50>
	} else {
		*out |= bit;
    30ba:	ec 91       	ld	r30, X
    30bc:	de 2b       	or	r29, r30
    30be:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    30c0:	9f bf       	out	0x3f, r25	; 63
}
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	1f 91       	pop	r17
    30c8:	08 95       	ret

000030ca <digitalRead>:

int digitalRead(uint8_t pin)
{
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	f9 01       	movw	r30, r18
    30d4:	ed 5c       	subi	r30, 0xCD	; 205
    30d6:	fd 4f       	sbci	r31, 0xFD	; 253
    30d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    30da:	f9 01       	movw	r30, r18
    30dc:	e7 58       	subi	r30, 0x87	; 135
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    30e2:	f9 01       	movw	r30, r18
    30e4:	e1 54       	subi	r30, 0x41	; 65
    30e6:	fd 4f       	sbci	r31, 0xFD	; 253
    30e8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    30ea:	cc 23       	and	r28, r28
    30ec:	89 f0       	breq	.+34     	; 0x3110 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    30ee:	81 11       	cpse	r24, r1
    30f0:	2c df       	rcall	.-424    	; 0x2f4a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    30f2:	ec 2f       	mov	r30, r28
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	eb 5f       	subi	r30, 0xFB	; 251
    30fc:	fc 4f       	sbci	r31, 0xFC	; 252
    30fe:	a5 91       	lpm	r26, Z+
    3100:	b4 91       	lpm	r27, Z
    3102:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3104:	ed 23       	and	r30, r29
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	21 f4       	brne	.+8      	; 0x3114 <digitalRead+0x4a>
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <digitalRead+0x4a>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	ec 01       	movw	r28, r24
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	8e 81       	ldd	r24, Y+6	; 0x06
    3124:	a4 df       	rcall	.-184    	; 0x306e <digitalWrite>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a2 de       	rcall	.-700    	; 0x2e70 <delayMicroseconds>
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	8e 81       	ldd	r24, Y+6	; 0x06
    3130:	9e df       	rcall	.-196    	; 0x306e <digitalWrite>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	9c de       	rcall	.-712    	; 0x2e70 <delayMicroseconds>
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	8e 81       	ldd	r24, Y+6	; 0x06
    313c:	98 df       	rcall	.-208    	; 0x306e <digitalWrite>
    313e:	84 e6       	ldi	r24, 0x64	; 100
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	94 ce       	rjmp	.-728    	; 0x2e70 <delayMicroseconds>

00003148 <_ZN13LiquidCrystal10write4bitsEh>:
    3148:	cf 92       	push	r12
    314a:	df 92       	push	r13
    314c:	ef 92       	push	r14
    314e:	ff 92       	push	r15
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	6c 01       	movw	r12, r24
    315a:	7c 01       	movw	r14, r24
    315c:	87 e0       	ldi	r24, 0x07	; 7
    315e:	e8 0e       	add	r14, r24
    3160:	f1 1c       	adc	r15, r1
    3162:	c0 e0       	ldi	r28, 0x00	; 0
    3164:	d0 e0       	ldi	r29, 0x00	; 0
    3166:	06 2f       	mov	r16, r22
    3168:	10 e0       	ldi	r17, 0x00	; 0
    316a:	b8 01       	movw	r22, r16
    316c:	0c 2e       	mov	r0, r28
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    3170:	75 95       	asr	r23
    3172:	67 95       	ror	r22
    3174:	0a 94       	dec	r0
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    3178:	61 70       	andi	r22, 0x01	; 1
    317a:	f7 01       	movw	r30, r14
    317c:	81 91       	ld	r24, Z+
    317e:	7f 01       	movw	r14, r30
    3180:	76 df       	rcall	.-276    	; 0x306e <digitalWrite>
    3182:	21 96       	adiw	r28, 0x01	; 1
    3184:	c4 30       	cpi	r28, 0x04	; 4
    3186:	d1 05       	cpc	r29, r1
    3188:	81 f7       	brne	.-32     	; 0x316a <_ZN13LiquidCrystal10write4bitsEh+0x22>
    318a:	c6 01       	movw	r24, r12
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	df 90       	pop	r13
    319a:	cf 90       	pop	r12
    319c:	be cf       	rjmp	.-132    	; 0x311a <_ZN13LiquidCrystal11pulseEnableEv>

0000319e <_ZN13LiquidCrystal10write8bitsEh>:
    319e:	cf 92       	push	r12
    31a0:	df 92       	push	r13
    31a2:	ef 92       	push	r14
    31a4:	ff 92       	push	r15
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	6c 01       	movw	r12, r24
    31b0:	7c 01       	movw	r14, r24
    31b2:	87 e0       	ldi	r24, 0x07	; 7
    31b4:	e8 0e       	add	r14, r24
    31b6:	f1 1c       	adc	r15, r1
    31b8:	c0 e0       	ldi	r28, 0x00	; 0
    31ba:	d0 e0       	ldi	r29, 0x00	; 0
    31bc:	06 2f       	mov	r16, r22
    31be:	10 e0       	ldi	r17, 0x00	; 0
    31c0:	b8 01       	movw	r22, r16
    31c2:	0c 2e       	mov	r0, r28
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    31c6:	75 95       	asr	r23
    31c8:	67 95       	ror	r22
    31ca:	0a 94       	dec	r0
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    31ce:	61 70       	andi	r22, 0x01	; 1
    31d0:	f7 01       	movw	r30, r14
    31d2:	81 91       	ld	r24, Z+
    31d4:	7f 01       	movw	r14, r30
    31d6:	4b df       	rcall	.-362    	; 0x306e <digitalWrite>
    31d8:	21 96       	adiw	r28, 0x01	; 1
    31da:	c8 30       	cpi	r28, 0x08	; 8
    31dc:	d1 05       	cpc	r29, r1
    31de:	81 f7       	brne	.-32     	; 0x31c0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    31e0:	c6 01       	movw	r24, r12
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	ff 90       	pop	r15
    31ec:	ef 90       	pop	r14
    31ee:	df 90       	pop	r13
    31f0:	cf 90       	pop	r12
    31f2:	93 cf       	rjmp	.-218    	; 0x311a <_ZN13LiquidCrystal11pulseEnableEv>

000031f4 <_ZN13LiquidCrystal4sendEhh>:
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	ec 01       	movw	r28, r24
    31fc:	16 2f       	mov	r17, r22
    31fe:	64 2f       	mov	r22, r20
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	35 df       	rcall	.-406    	; 0x306e <digitalWrite>
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	8f 3f       	cpi	r24, 0xFF	; 255
    3208:	11 f0       	breq	.+4      	; 0x320e <_ZN13LiquidCrystal4sendEhh+0x1a>
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	30 df       	rcall	.-416    	; 0x306e <digitalWrite>
    320e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3210:	61 2f       	mov	r22, r17
    3212:	84 ff       	sbrs	r24, 4
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <_ZN13LiquidCrystal4sendEhh+0x2c>
    3216:	ce 01       	movw	r24, r28
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	bf cf       	rjmp	.-130    	; 0x319e <_ZN13LiquidCrystal10write8bitsEh>
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	84 e0       	ldi	r24, 0x04	; 4
    3224:	75 95       	asr	r23
    3226:	67 95       	ror	r22
    3228:	8a 95       	dec	r24
    322a:	e1 f7       	brne	.-8      	; 0x3224 <_ZN13LiquidCrystal4sendEhh+0x30>
    322c:	ce 01       	movw	r24, r28
    322e:	8c df       	rcall	.-232    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>
    3230:	61 2f       	mov	r22, r17
    3232:	ce 01       	movw	r24, r28
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	86 cf       	rjmp	.-244    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>

0000323c <_ZN13LiquidCrystal7commandEh>:
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	da cf       	rjmp	.-76     	; 0x31f4 <_ZN13LiquidCrystal4sendEhh>

00003240 <_ZN13LiquidCrystal5clearEv>:
    3240:	61 e0       	ldi	r22, 0x01	; 1
    3242:	fc df       	rcall	.-8      	; 0x323c <_ZN13LiquidCrystal7commandEh>
    3244:	80 ed       	ldi	r24, 0xD0	; 208
    3246:	97 e0       	ldi	r25, 0x07	; 7
    3248:	13 ce       	rjmp	.-986    	; 0x2e70 <delayMicroseconds>

0000324a <_ZN13LiquidCrystal9setCursorEhh>:
    324a:	fc 01       	movw	r30, r24
    324c:	44 30       	cpi	r20, 0x04	; 4
    324e:	08 f0       	brcs	.+2      	; 0x3252 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    3250:	43 e0       	ldi	r20, 0x03	; 3
    3252:	83 89       	ldd	r24, Z+19	; 0x13
    3254:	48 17       	cp	r20, r24
    3256:	10 f0       	brcs	.+4      	; 0x325c <_ZN13LiquidCrystal9setCursorEhh+0x12>
    3258:	4f ef       	ldi	r20, 0xFF	; 255
    325a:	48 0f       	add	r20, r24
    325c:	df 01       	movw	r26, r30
    325e:	a4 0f       	add	r26, r20
    3260:	b1 1d       	adc	r27, r1
    3262:	54 96       	adiw	r26, 0x14	; 20
    3264:	9c 91       	ld	r25, X
    3266:	69 0f       	add	r22, r25
    3268:	60 68       	ori	r22, 0x80	; 128
    326a:	cf 01       	movw	r24, r30
    326c:	e7 cf       	rjmp	.-50     	; 0x323c <_ZN13LiquidCrystal7commandEh>

0000326e <_ZN13LiquidCrystal7displayEv>:
    326e:	fc 01       	movw	r30, r24
    3270:	60 89       	ldd	r22, Z+16	; 0x10
    3272:	26 2f       	mov	r18, r22
    3274:	24 60       	ori	r18, 0x04	; 4
    3276:	20 8b       	std	Z+16, r18	; 0x10
    3278:	6c 60       	ori	r22, 0x0C	; 12
    327a:	e0 cf       	rjmp	.-64     	; 0x323c <_ZN13LiquidCrystal7commandEh>

0000327c <_ZN13LiquidCrystal5beginEhhh>:
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	ec 01       	movw	r28, r24
    328a:	42 30       	cpi	r20, 0x02	; 2
    328c:	18 f0       	brcs	.+6      	; 0x3294 <_ZN13LiquidCrystal5beginEhhh+0x18>
    328e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3290:	88 60       	ori	r24, 0x08	; 8
    3292:	8f 87       	std	Y+15, r24	; 0x0f
    3294:	4b 8b       	std	Y+19, r20	; 0x13
    3296:	1c 8a       	std	Y+20, r1	; 0x14
    3298:	80 e4       	ldi	r24, 0x40	; 64
    329a:	8d 8b       	std	Y+21, r24	; 0x15
    329c:	6e 8b       	std	Y+22, r22	; 0x16
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	60 5c       	subi	r22, 0xC0	; 192
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	6f 8b       	std	Y+23, r22	; 0x17
    32a6:	22 23       	and	r18, r18
    32a8:	29 f0       	breq	.+10     	; 0x32b4 <_ZN13LiquidCrystal5beginEhhh+0x38>
    32aa:	41 30       	cpi	r20, 0x01	; 1
    32ac:	19 f4       	brne	.+6      	; 0x32b4 <_ZN13LiquidCrystal5beginEhhh+0x38>
    32ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b0:	84 60       	ori	r24, 0x04	; 4
    32b2:	8f 87       	std	Y+15, r24	; 0x0f
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	9e de       	rcall	.-708    	; 0x2ff6 <pinMode>
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	8f 3f       	cpi	r24, 0xFF	; 255
    32be:	11 f0       	breq	.+4      	; 0x32c4 <_ZN13LiquidCrystal5beginEhhh+0x48>
    32c0:	61 e0       	ldi	r22, 0x01	; 1
    32c2:	99 de       	rcall	.-718    	; 0x2ff6 <pinMode>
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	8e 81       	ldd	r24, Y+6	; 0x06
    32c8:	96 de       	rcall	.-724    	; 0x2ff6 <pinMode>
    32ca:	7e 01       	movw	r14, r28
    32cc:	87 e0       	ldi	r24, 0x07	; 7
    32ce:	e8 0e       	add	r14, r24
    32d0:	f1 1c       	adc	r15, r1
    32d2:	00 e0       	ldi	r16, 0x00	; 0
    32d4:	10 e0       	ldi	r17, 0x00	; 0
    32d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d8:	84 fd       	sbrc	r24, 4
    32da:	03 c0       	rjmp	.+6      	; 0x32e2 <_ZN13LiquidCrystal5beginEhhh+0x66>
    32dc:	84 e0       	ldi	r24, 0x04	; 4
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    32e2:	88 e0       	ldi	r24, 0x08	; 8
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	08 17       	cp	r16, r24
    32e8:	19 07       	cpc	r17, r25
    32ea:	44 f4       	brge	.+16     	; 0x32fc <_ZN13LiquidCrystal5beginEhhh+0x80>
    32ec:	61 e0       	ldi	r22, 0x01	; 1
    32ee:	f7 01       	movw	r30, r14
    32f0:	81 91       	ld	r24, Z+
    32f2:	7f 01       	movw	r14, r30
    32f4:	80 de       	rcall	.-768    	; 0x2ff6 <pinMode>
    32f6:	0f 5f       	subi	r16, 0xFF	; 255
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	ed cf       	rjmp	.-38     	; 0x32d6 <_ZN13LiquidCrystal5beginEhhh+0x5a>
    32fc:	80 e5       	ldi	r24, 0x50	; 80
    32fe:	93 ec       	ldi	r25, 0xC3	; 195
    3300:	b7 dd       	rcall	.-1170   	; 0x2e70 <delayMicroseconds>
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	8c 81       	ldd	r24, Y+4	; 0x04
    3306:	b3 de       	rcall	.-666    	; 0x306e <digitalWrite>
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	b0 de       	rcall	.-672    	; 0x306e <digitalWrite>
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	8f 3f       	cpi	r24, 0xFF	; 255
    3312:	11 f0       	breq	.+4      	; 0x3318 <_ZN13LiquidCrystal5beginEhhh+0x9c>
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	ab de       	rcall	.-682    	; 0x306e <digitalWrite>
    3318:	6f 85       	ldd	r22, Y+15	; 0x0f
    331a:	64 fd       	sbrc	r22, 4
    331c:	16 c0       	rjmp	.+44     	; 0x334a <_ZN13LiquidCrystal5beginEhhh+0xce>
    331e:	63 e0       	ldi	r22, 0x03	; 3
    3320:	ce 01       	movw	r24, r28
    3322:	12 df       	rcall	.-476    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>
    3324:	84 e9       	ldi	r24, 0x94	; 148
    3326:	91 e1       	ldi	r25, 0x11	; 17
    3328:	a3 dd       	rcall	.-1210   	; 0x2e70 <delayMicroseconds>
    332a:	63 e0       	ldi	r22, 0x03	; 3
    332c:	ce 01       	movw	r24, r28
    332e:	0c df       	rcall	.-488    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>
    3330:	84 e9       	ldi	r24, 0x94	; 148
    3332:	91 e1       	ldi	r25, 0x11	; 17
    3334:	9d dd       	rcall	.-1222   	; 0x2e70 <delayMicroseconds>
    3336:	63 e0       	ldi	r22, 0x03	; 3
    3338:	ce 01       	movw	r24, r28
    333a:	06 df       	rcall	.-500    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>
    333c:	86 e9       	ldi	r24, 0x96	; 150
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	97 dd       	rcall	.-1234   	; 0x2e70 <delayMicroseconds>
    3342:	62 e0       	ldi	r22, 0x02	; 2
    3344:	ce 01       	movw	r24, r28
    3346:	00 df       	rcall	.-512    	; 0x3148 <_ZN13LiquidCrystal10write4bitsEh>
    3348:	11 c0       	rjmp	.+34     	; 0x336c <_ZN13LiquidCrystal5beginEhhh+0xf0>
    334a:	60 62       	ori	r22, 0x20	; 32
    334c:	ce 01       	movw	r24, r28
    334e:	76 df       	rcall	.-276    	; 0x323c <_ZN13LiquidCrystal7commandEh>
    3350:	84 e9       	ldi	r24, 0x94	; 148
    3352:	91 e1       	ldi	r25, 0x11	; 17
    3354:	8d dd       	rcall	.-1254   	; 0x2e70 <delayMicroseconds>
    3356:	6f 85       	ldd	r22, Y+15	; 0x0f
    3358:	60 62       	ori	r22, 0x20	; 32
    335a:	ce 01       	movw	r24, r28
    335c:	6f df       	rcall	.-290    	; 0x323c <_ZN13LiquidCrystal7commandEh>
    335e:	86 e9       	ldi	r24, 0x96	; 150
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	86 dd       	rcall	.-1268   	; 0x2e70 <delayMicroseconds>
    3364:	6f 85       	ldd	r22, Y+15	; 0x0f
    3366:	60 62       	ori	r22, 0x20	; 32
    3368:	ce 01       	movw	r24, r28
    336a:	68 df       	rcall	.-304    	; 0x323c <_ZN13LiquidCrystal7commandEh>
    336c:	6f 85       	ldd	r22, Y+15	; 0x0f
    336e:	60 62       	ori	r22, 0x20	; 32
    3370:	ce 01       	movw	r24, r28
    3372:	64 df       	rcall	.-312    	; 0x323c <_ZN13LiquidCrystal7commandEh>
    3374:	84 e0       	ldi	r24, 0x04	; 4
    3376:	88 8b       	std	Y+16, r24	; 0x10
    3378:	ce 01       	movw	r24, r28
    337a:	79 df       	rcall	.-270    	; 0x326e <_ZN13LiquidCrystal7displayEv>
    337c:	ce 01       	movw	r24, r28
    337e:	60 df       	rcall	.-320    	; 0x3240 <_ZN13LiquidCrystal5clearEv>
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	89 8b       	std	Y+17, r24	; 0x11
    3384:	66 e0       	ldi	r22, 0x06	; 6
    3386:	ce 01       	movw	r24, r28
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	ff 90       	pop	r15
    3392:	ef 90       	pop	r14
    3394:	53 cf       	rjmp	.-346    	; 0x323c <_ZN13LiquidCrystal7commandEh>

00003396 <_ZN13LiquidCrystalC1Ehhhhhhh>:
    3396:	af 92       	push	r10
    3398:	cf 92       	push	r12
    339a:	ef 92       	push	r14
    339c:	0f 93       	push	r16
    339e:	fc 01       	movw	r30, r24
    33a0:	13 82       	std	Z+3, r1	; 0x03
    33a2:	12 82       	std	Z+2, r1	; 0x02
    33a4:	8f e2       	ldi	r24, 0x2F	; 47
    33a6:	92 e0       	ldi	r25, 0x02	; 2
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    33ac:	64 83       	std	Z+4, r22	; 0x04
    33ae:	45 83       	std	Z+5, r20	; 0x05
    33b0:	26 83       	std	Z+6, r18	; 0x06
    33b2:	07 83       	std	Z+7, r16	; 0x07
    33b4:	e0 86       	std	Z+8, r14	; 0x08
    33b6:	c1 86       	std	Z+9, r12	; 0x09
    33b8:	a2 86       	std	Z+10, r10	; 0x0a
    33ba:	13 86       	std	Z+11, r1	; 0x0b
    33bc:	14 86       	std	Z+12, r1	; 0x0c
    33be:	15 86       	std	Z+13, r1	; 0x0d
    33c0:	16 86       	std	Z+14, r1	; 0x0e
    33c2:	17 86       	std	Z+15, r1	; 0x0f
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	41 e0       	ldi	r20, 0x01	; 1
    33c8:	60 e1       	ldi	r22, 0x10	; 16
    33ca:	cf 01       	movw	r24, r30
    33cc:	0f 91       	pop	r16
    33ce:	ef 90       	pop	r14
    33d0:	cf 90       	pop	r12
    33d2:	af 90       	pop	r10
    33d4:	53 cf       	rjmp	.-346    	; 0x327c <_ZN13LiquidCrystal5beginEhhh>

000033d6 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	0d df       	rcall	.-486    	; 0x31f4 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	08 95       	ret

000033e0 <_Z8print_mej>:
	} else {
		DEBUG(F("Setting variable ")); DEBUG(number);
		DEBUGLN(F(" as glyph failed, the variable must be of 'byte' data type"));
		return false;
	}
}
    33e0:	08 95       	ret

000033e2 <_ZN10LiquidLine15attach_functionEhPFvvE>:
    33e2:	69 30       	cpi	r22, 0x09	; 9
    33e4:	60 f4       	brcc	.+24     	; 0x33fe <_ZN10LiquidLine15attach_functionEhPFvvE+0x1c>
    33e6:	fc 01       	movw	r30, r24
    33e8:	e6 0f       	add	r30, r22
    33ea:	f1 1d       	adc	r31, r1
    33ec:	e6 0f       	add	r30, r22
    33ee:	f1 1d       	adc	r31, r1
    33f0:	56 83       	std	Z+6, r21	; 0x06
    33f2:	45 83       	std	Z+5, r20	; 0x05
    33f4:	21 e0       	ldi	r18, 0x01	; 1
    33f6:	fc 01       	movw	r30, r24
    33f8:	26 a3       	std	Z+38, r18	; 0x26
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	08 95       	ret
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	08 95       	ret

00003402 <_ZN10LiquidLine13set_asProgmemEh>:

bool LiquidLine::set_asProgmem(uint8_t number) {
	uint8_t index = number - 1;
    3402:	61 50       	subi	r22, 0x01	; 1
	if ((index < MAX_VARIABLES) && (_variableType[index] == DataType::CONST_CHAR_PTR)) {
    3404:	65 30       	cpi	r22, 0x05	; 5
    3406:	50 f4       	brcc	.+20     	; 0x341c <_ZN10LiquidLine13set_asProgmemEh+0x1a>
    3408:	fc 01       	movw	r30, r24
    340a:	e6 0f       	add	r30, r22
    340c:	f1 1d       	adc	r31, r1
    340e:	81 a1       	ldd	r24, Z+33	; 0x21
    3410:	8e 33       	cpi	r24, 0x3E	; 62
    3412:	21 f4       	brne	.+8      	; 0x341c <_ZN10LiquidLine13set_asProgmemEh+0x1a>
		_variableType[index] = DataType::PROG_CONST_CHAR_PTR;
    3414:	81 e4       	ldi	r24, 0x41	; 65
    3416:	81 a3       	std	Z+33, r24	; 0x21
		return true;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	08 95       	ret
	}
	else {
		DEBUG(F("Setting variable ")); DEBUG(number);
		DEBUGLN(F(" as PROG_CONST_CHAR failed, the variable must be of 'const char[]' data type"))
		return false;
    341c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    341e:	08 95       	ret

00003420 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh>:
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
    3420:	af 92       	push	r10
    3422:	bf 92       	push	r11
    3424:	cf 92       	push	r12
    3426:	df 92       	push	r13
    3428:	ef 92       	push	r14
    342a:	ff 92       	push	r15
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	1f 92       	push	r1
    3436:	1f 92       	push	r1
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	fc 01       	movw	r30, r24
    343e:	8b 01       	movw	r16, r22

	default: { break; }

	} //switch (_variableType)
	DEBUG(F(" "));
}
    3440:	ed b6       	in	r14, 0x3d	; 61
    3442:	fe b6       	in	r15, 0x3e	; 62
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	dc 01       	movw	r26, r24
    3448:	a4 0f       	add	r26, r20
    344a:	b5 1f       	adc	r27, r21
    344c:	91 96       	adiw	r26, 0x21	; 33
    344e:	8c 91       	ld	r24, X
    3450:	81 34       	cpi	r24, 0x41	; 65
    3452:	09 f4       	brne	.+2      	; 0x3456 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x36>
    3454:	d9 c0       	rjmp	.+434    	; 0x3608 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1e8>
    3456:	08 f0       	brcs	.+2      	; 0x345a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a>
    3458:	50 c0       	rjmp	.+160    	; 0x34fa <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xda>
    345a:	80 32       	cpi	r24, 0x20	; 32
    345c:	09 f4       	brne	.+2      	; 0x3460 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x40>
    345e:	a2 c0       	rjmp	.+324    	; 0x35a4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x184>
    3460:	40 f5       	brcc	.+80     	; 0x34b2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x92>
    3462:	89 30       	cpi	r24, 0x09	; 9
    3464:	09 f4       	brne	.+2      	; 0x3468 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x48>
    3466:	89 c0       	rjmp	.+274    	; 0x357a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x15a>
    3468:	90 f4       	brcc	.+36     	; 0x348e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x6e>
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	09 f4       	brne	.+2      	; 0x3470 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x50>
    346e:	b2 c0       	rjmp	.+356    	; 0x35d4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1b4>
    3470:	88 30       	cpi	r24, 0x08	; 8
    3472:	09 f0       	breq	.+2      	; 0x3476 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x56>
    3474:	a7 c1       	rjmp	.+846    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		p_liquidCrystal->print(variable);
		break;
	} //case CHAR

	case DataType::INT8_T: {
		const int8_t variable = *static_cast<const int8_t*>(_variable[number]);
    3476:	44 0f       	add	r20, r20
    3478:	55 1f       	adc	r21, r21
    347a:	e4 0f       	add	r30, r20
    347c:	f5 1f       	adc	r31, r21
    347e:	07 88       	ldd	r0, Z+23	; 0x17
    3480:	f0 8d       	ldd	r31, Z+24	; 0x18
    3482:	e0 2d       	mov	r30, r0
		DEBUG(F("(int8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3484:	60 81       	ld	r22, Z
    3486:	06 2e       	mov	r0, r22
    3488:	00 0c       	add	r0, r0
    348a:	77 0b       	sbc	r23, r23
    348c:	97 c1       	rjmp	.+814    	; 0x37bc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    348e:	80 31       	cpi	r24, 0x10	; 16
    3490:	09 f4       	brne	.+2      	; 0x3494 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x74>
    3492:	7e c0       	rjmp	.+252    	; 0x3590 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x170>
    3494:	81 31       	cpi	r24, 0x11	; 17
    3496:	09 f0       	breq	.+2      	; 0x349a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x7a>
    3498:	95 c1       	rjmp	.+810    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		DEBUG(F("(int16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case INT16_T
	case DataType::UINT16_T: {
		const uint16_t variable = *static_cast<const uint16_t*>(_variable[number]);
    349a:	44 0f       	add	r20, r20
    349c:	55 1f       	adc	r21, r21
    349e:	e4 0f       	add	r30, r20
    34a0:	f5 1f       	adc	r31, r21
    34a2:	07 88       	ldd	r0, Z+23	; 0x17
    34a4:	f0 8d       	ldd	r31, Z+24	; 0x18
    34a6:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	4a e0       	ldi	r20, 0x0A	; 10
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	3e c1       	rjmp	.+636    	; 0x372e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x30e>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    34b2:	8c 33       	cpi	r24, 0x3C	; 60
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x98>
    34b6:	58 c0       	rjmp	.+176    	; 0x3568 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x148>
    34b8:	a0 f4       	brcc	.+40     	; 0x34e2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xc2>
    34ba:	81 32       	cpi	r24, 0x21	; 33
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xa0>
    34be:	7e c0       	rjmp	.+252    	; 0x35bc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x19c>
    34c0:	82 33       	cpi	r24, 0x32	; 50
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xa6>
    34c4:	7f c1       	rjmp	.+766    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
	} //case UINT32_T

	case DataType::FLOAT: {
		const float variable = *static_cast<const float*>(_variable[number]);
		DEBUG(F("(float)")); DEBUG(variable);
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
    34c6:	25 81       	ldd	r18, Z+5	; 0x05
    34c8:	30 e0       	ldi	r19, 0x00	; 0
		p_liquidCrystal->print(variable);
		break;
	} //case UINT32_T

	case DataType::FLOAT: {
		const float variable = *static_cast<const float*>(_variable[number]);
    34ca:	44 0f       	add	r20, r20
    34cc:	55 1f       	adc	r21, r21
    34ce:	e4 0f       	add	r30, r20
    34d0:	f5 1f       	adc	r31, r21
    34d2:	07 88       	ldd	r0, Z+23	; 0x17
    34d4:	f0 8d       	ldd	r31, Z+24	; 0x18
    34d6:	e0 2d       	mov	r30, r0
		DEBUG(F("(float)")); DEBUG(variable);
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
    34d8:	40 81       	ld	r20, Z
    34da:	51 81       	ldd	r21, Z+1	; 0x01
    34dc:	62 81       	ldd	r22, Z+2	; 0x02
    34de:	73 81       	ldd	r23, Z+3	; 0x03
    34e0:	5d c1       	rjmp	.+698    	; 0x379c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x37c>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    34e2:	8d 33       	cpi	r24, 0x3D	; 61
    34e4:	a9 f1       	breq	.+106    	; 0x3550 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x130>
    34e6:	8e 33       	cpi	r24, 0x3E	; 62
    34e8:	09 f0       	breq	.+2      	; 0x34ec <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xcc>
    34ea:	6c c1       	rjmp	.+728    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>

    // Variables -----
	case DataType::CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
    34ec:	44 0f       	add	r20, r20
    34ee:	55 1f       	adc	r21, r21
    34f0:	e4 0f       	add	r30, r20
    34f2:	f5 1f       	adc	r31, r21
		DEBUG(F("(const char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    34f4:	67 89       	ldd	r22, Z+23	; 0x17
    34f6:	70 8d       	ldd	r23, Z+24	; 0x18
    34f8:	34 c0       	rjmp	.+104    	; 0x3562 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x142>
		//p_liquidCrystal->print(NOTHING);
	}
}

void LiquidLine::print_variable(DisplayClass *p_liquidCrystal, uint8_t number) {
	switch (_variableType[number]) {
    34fa:	89 3d       	cpi	r24, 0xD9	; 217
    34fc:	09 f4       	brne	.+2      	; 0x3500 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xe0>
    34fe:	09 c1       	rjmp	.+530    	; 0x3712 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2f2>
    3500:	90 f4       	brcc	.+36     	; 0x3526 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x106>
    3502:	80 3d       	cpi	r24, 0xD0	; 208
    3504:	09 f4       	brne	.+2      	; 0x3508 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xe8>
    3506:	d6 c0       	rjmp	.+428    	; 0x36b4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x294>
    3508:	38 f4       	brcc	.+14     	; 0x3518 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf8>
    350a:	86 34       	cpi	r24, 0x46	; 70
    350c:	09 f4       	brne	.+2      	; 0x3510 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf0>
    350e:	6b c0       	rjmp	.+214    	; 0x35e6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x1c6>
    3510:	89 3c       	cpi	r24, 0xC9	; 201
    3512:	09 f4       	brne	.+2      	; 0x3516 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xf6>
    3514:	46 c1       	rjmp	.+652    	; 0x37a2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x382>
    3516:	56 c1       	rjmp	.+684    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    3518:	81 3d       	cpi	r24, 0xD1	; 209
    351a:	09 f4       	brne	.+2      	; 0x351e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0xfe>
    351c:	da c0       	rjmp	.+436    	; 0x36d2 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2b2>
    351e:	88 3d       	cpi	r24, 0xD8	; 216
    3520:	09 f4       	brne	.+2      	; 0x3524 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x104>
    3522:	e8 c0       	rjmp	.+464    	; 0x36f4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2d4>
    3524:	4f c1       	rjmp	.+670    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    3526:	80 3f       	cpi	r24, 0xF0	; 240
    3528:	09 f4       	brne	.+2      	; 0x352c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x10c>
    352a:	29 c1       	rjmp	.+594    	; 0x377e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x35e>
    352c:	38 f4       	brcc	.+14     	; 0x353c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x11c>
    352e:	88 3e       	cpi	r24, 0xE8	; 232
    3530:	09 f4       	brne	.+2      	; 0x3534 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x114>
    3532:	00 c1       	rjmp	.+512    	; 0x3734 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x314>
    3534:	89 3e       	cpi	r24, 0xE9	; 233
    3536:	09 f4       	brne	.+2      	; 0x353a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x11a>
    3538:	10 c1       	rjmp	.+544    	; 0x375a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x33a>
    353a:	44 c1       	rjmp	.+648    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    353c:	8b 3f       	cpi	r24, 0xFB	; 251
    353e:	09 f4       	brne	.+2      	; 0x3542 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x122>
    3540:	9d c0       	rjmp	.+314    	; 0x367c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x25c>
    3542:	8c 3f       	cpi	r24, 0xFC	; 252
    3544:	09 f4       	brne	.+2      	; 0x3548 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x128>
    3546:	9a c0       	rjmp	.+308    	; 0x367c <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x25c>
    3548:	8a 3f       	cpi	r24, 0xFA	; 250
    354a:	09 f0       	breq	.+2      	; 0x354e <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x12e>
    354c:	3b c1       	rjmp	.+630    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    354e:	a3 c0       	rjmp	.+326    	; 0x3696 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x276>
		DEBUG(F("(const char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case CONST_CHAR_PTR
	case DataType::CHAR_PTR: {
		char* variable = *reinterpret_cast<char**>( const_cast<void*>(_variable[number]) );
    3550:	44 0f       	add	r20, r20
    3552:	55 1f       	adc	r21, r21
    3554:	e4 0f       	add	r30, r20
    3556:	f5 1f       	adc	r31, r21
    3558:	07 88       	ldd	r0, Z+23	; 0x17
    355a:	f0 8d       	ldd	r31, Z+24	; 0x18
    355c:	e0 2d       	mov	r30, r0
		// char* variable = const_cast<char*>(reinterpret_cast<const char *>(_variable[number]));
		DEBUG(F("(char*)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	c8 01       	movw	r24, r16
    3564:	dc d3       	rcall	.+1976   	; 0x3d1e <_ZN5Print5printEPKc>
		break;
    3566:	2e c1       	rjmp	.+604    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
	} //case CHAR_PTR
	case DataType::CHAR: {
		const char variable = *static_cast<const char*>(_variable[number]);
    3568:	44 0f       	add	r20, r20
    356a:	55 1f       	adc	r21, r21
    356c:	e4 0f       	add	r30, r20
    356e:	f5 1f       	adc	r31, r21
    3570:	07 88       	ldd	r0, Z+23	; 0x17
    3572:	f0 8d       	ldd	r31, Z+24	; 0x18
    3574:	e0 2d       	mov	r30, r0
		DEBUG(F("(char)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3576:	60 81       	ld	r22, Z
    3578:	9a c0       	rjmp	.+308    	; 0x36ae <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x28e>
		DEBUG(F("(int8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
		break;
	} //case INT8_T
	case DataType::UINT8_T: {
		const uint8_t variable = *static_cast<const uint8_t*>(_variable[number]);
    357a:	44 0f       	add	r20, r20
    357c:	55 1f       	adc	r21, r21
    357e:	e4 0f       	add	r30, r20
    3580:	f5 1f       	adc	r31, r21
    3582:	07 88       	ldd	r0, Z+23	; 0x17
    3584:	f0 8d       	ldd	r31, Z+24	; 0x18
    3586:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint8_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    3588:	4a e0       	ldi	r20, 0x0A	; 10
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	60 81       	ld	r22, Z
    358e:	af c0       	rjmp	.+350    	; 0x36ee <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2ce>
		break;
	} //case UINT8_T

	case DataType::INT16_T: {
		const int16_t variable = *static_cast<const int16_t*>(_variable[number]);
    3590:	44 0f       	add	r20, r20
    3592:	55 1f       	adc	r21, r21
    3594:	e4 0f       	add	r30, r20
    3596:	f5 1f       	adc	r31, r21
    3598:	07 88       	ldd	r0, Z+23	; 0x17
    359a:	f0 8d       	ldd	r31, Z+24	; 0x18
    359c:	e0 2d       	mov	r30, r0
		DEBUG(F("(int16_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	0c c1       	rjmp	.+536    	; 0x37bc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		p_liquidCrystal->print(variable);
		break;
	} //case UINT16_T

	case DataType::INT32_T: {
		const int32_t variable = *static_cast<const int32_t*>(_variable[number]);
    35a4:	44 0f       	add	r20, r20
    35a6:	55 1f       	adc	r21, r21
    35a8:	e4 0f       	add	r30, r20
    35aa:	f5 1f       	adc	r31, r21
    35ac:	07 88       	ldd	r0, Z+23	; 0x17
    35ae:	f0 8d       	ldd	r31, Z+24	; 0x18
    35b0:	e0 2d       	mov	r30, r0
		DEBUG(F("(int32_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    35b2:	40 81       	ld	r20, Z
    35b4:	51 81       	ldd	r21, Z+1	; 0x01
    35b6:	62 81       	ldd	r22, Z+2	; 0x02
    35b8:	73 81       	ldd	r23, Z+3	; 0x03
    35ba:	ca c0       	rjmp	.+404    	; 0x3750 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x330>
		break;
	} //case INT32_T
	case DataType::UINT32_T: {
		const uint32_t variable = *static_cast<const uint32_t*>(_variable[number]);
    35bc:	44 0f       	add	r20, r20
    35be:	55 1f       	adc	r21, r21
    35c0:	e4 0f       	add	r30, r20
    35c2:	f5 1f       	adc	r31, r21
    35c4:	07 88       	ldd	r0, Z+23	; 0x17
    35c6:	f0 8d       	ldd	r31, Z+24	; 0x18
    35c8:	e0 2d       	mov	r30, r0
		DEBUG(F("(uint32_t)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    35ca:	40 81       	ld	r20, Z
    35cc:	51 81       	ldd	r21, Z+1	; 0x01
    35ce:	62 81       	ldd	r22, Z+2	; 0x02
    35d0:	73 81       	ldd	r23, Z+3	; 0x03
    35d2:	d0 c0       	rjmp	.+416    	; 0x3774 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x354>
		p_liquidCrystal->print(variable, _floatDecimalPlaces);
		break;
	} //case FLOAT

	case DataType::BOOL: {
		const bool variable = *static_cast<const bool*>(_variable[number]);
    35d4:	44 0f       	add	r20, r20
    35d6:	55 1f       	adc	r21, r21
    35d8:	e4 0f       	add	r30, r20
    35da:	f5 1f       	adc	r31, r21
    35dc:	07 88       	ldd	r0, Z+23	; 0x17
    35de:	f0 8d       	ldd	r31, Z+24	; 0x18
    35e0:	e0 2d       	mov	r30, r0
		DEBUG(F("(bool)")); DEBUG(variable);
		p_liquidCrystal->print(variable);
    35e2:	60 81       	ld	r22, Z
    35e4:	ea c0       	rjmp	.+468    	; 0x37ba <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39a>
		break;
	} //case BOOL

	case DataType::GLYPH: {
		const uint8_t variable = *static_cast<const uint8_t*>(_variable[number]);
    35e6:	44 0f       	add	r20, r20
    35e8:	55 1f       	adc	r21, r21
    35ea:	e4 0f       	add	r30, r20
    35ec:	f5 1f       	adc	r31, r21
    35ee:	a7 89       	ldd	r26, Z+23	; 0x17
    35f0:	b0 8d       	ldd	r27, Z+24	; 0x18
		DEBUG(F("(glyph)")); DEBUG(variable);
		p_liquidCrystal->write((uint8_t)variable);
    35f2:	fb 01       	movw	r30, r22
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	fc 01       	movw	r30, r24
    35fa:	20 81       	ld	r18, Z
    35fc:	31 81       	ldd	r19, Z+1	; 0x01
    35fe:	6c 91       	ld	r22, X
    3600:	c8 01       	movw	r24, r16
    3602:	f9 01       	movw	r30, r18
    3604:	19 95       	eicall
		break;
    3606:	de c0       	rjmp	.+444    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			buffer[i] = pgm_read_byte_near(variable + i);
		}
		buffer[len] = '\0';
		DEBUG(F("(const char*)")); DEBUG(buffer);
		p_liquidCrystal->print(buffer);
		break;
    3608:	cd b6       	in	r12, 0x3d	; 61
    360a:	de b6       	in	r13, 0x3e	; 62
		p_liquidCrystal->write((uint8_t)variable);
		break;
	} //case BOOL

	case DataType::PROG_CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
    360c:	44 0f       	add	r20, r20
    360e:	55 1f       	adc	r21, r21
    3610:	e4 0f       	add	r30, r20
    3612:	f5 1f       	adc	r31, r21
    3614:	a7 88       	ldd	r10, Z+23	; 0x17
    3616:	b0 8c       	ldd	r11, Z+24	; 0x18
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    3618:	c5 01       	movw	r24, r10
    361a:	0f d7       	rcall	.+3614   	; 0x443a <__strlen_P>
		volatile const int len = strlen_P(variable);
    361c:	9a 83       	std	Y+2, r25	; 0x02
    361e:	89 83       	std	Y+1, r24	; 0x01
		char buffer[len];
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	9a 81       	ldd	r25, Y+2	; 0x02
    3624:	2d b7       	in	r18, 0x3d	; 61
    3626:	3e b7       	in	r19, 0x3e	; 62
    3628:	28 1b       	sub	r18, r24
    362a:	39 0b       	sbc	r19, r25
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	3e bf       	out	0x3e, r19	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	2d bf       	out	0x3d, r18	; 61
    3636:	6d b7       	in	r22, 0x3d	; 61
    3638:	7e b7       	in	r23, 0x3e	; 62
    363a:	6f 5f       	subi	r22, 0xFF	; 255
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
		for (uint8_t i = 0; i < len; i++) {
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	82 2f       	mov	r24, r18
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	49 81       	ldd	r20, Y+1	; 0x01
    3646:	5a 81       	ldd	r21, Y+2	; 0x02
    3648:	84 17       	cp	r24, r20
    364a:	95 07       	cpc	r25, r21
    364c:	54 f4       	brge	.+20     	; 0x3662 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x242>
			buffer[i] = pgm_read_byte_near(variable + i);
    364e:	f5 01       	movw	r30, r10
    3650:	e8 0f       	add	r30, r24
    3652:	f9 1f       	adc	r31, r25
    3654:	e4 91       	lpm	r30, Z
    3656:	db 01       	movw	r26, r22
    3658:	a8 0f       	add	r26, r24
    365a:	b9 1f       	adc	r27, r25
    365c:	ec 93       	st	X, r30

	case DataType::PROG_CONST_CHAR_PTR: {
		const char* variable = reinterpret_cast<const char*>(_variable[number]);
		volatile const int len = strlen_P(variable);
		char buffer[len];
		for (uint8_t i = 0; i < len; i++) {
    365e:	2f 5f       	subi	r18, 0xFF	; 255
    3660:	ef cf       	rjmp	.-34     	; 0x3640 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x220>
			buffer[i] = pgm_read_byte_near(variable + i);
		}
		buffer[len] = '\0';
    3662:	e9 81       	ldd	r30, Y+1	; 0x01
    3664:	fa 81       	ldd	r31, Y+2	; 0x02
    3666:	e6 0f       	add	r30, r22
    3668:	f7 1f       	adc	r31, r23
		DEBUG(F("(const char*)")); DEBUG(buffer);
		p_liquidCrystal->print(buffer);
    366a:	10 82       	st	Z, r1
    366c:	c8 01       	movw	r24, r16
    366e:	57 d3       	rcall	.+1710   	; 0x3d1e <_ZN5Print5printEPKc>
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de be       	out	0x3e, r13	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd be       	out	0x3d, r12	; 61
    367a:	a4 c0       	rjmp	.+328    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case CONST_CHAR_PTR_GETTER

	case DataType::CHAR_PTR_GETTER: {
		const charPtrFnPtr getterFunction = reinterpret_cast<charPtrFnPtr>(_variable[number]);
    367c:	44 0f       	add	r20, r20
    367e:	55 1f       	adc	r21, r21
    3680:	e4 0f       	add	r30, r20
    3682:	f5 1f       	adc	r31, r21
    3684:	07 88       	ldd	r0, Z+23	; 0x17
    3686:	f0 8d       	ldd	r31, Z+24	; 0x18
    3688:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    368a:	30 97       	sbiw	r30, 0x00	; 0
    368c:	09 f4       	brne	.+2      	; 0x3690 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x270>
    368e:	9a c0       	rjmp	.+308    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			char* variable = (getterFunction)();
    3690:	19 95       	eicall
			DEBUG(F("(char*)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3692:	bc 01       	movw	r22, r24
    3694:	66 cf       	rjmp	.-308    	; 0x3562 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x142>
		} 
		break;
	} // case CHAR_PTR_GETTER

	case DataType::CHAR_GETTER: {
		const charFnPtr getterFunction = reinterpret_cast<charFnPtr>(_variable[number]);
    3696:	44 0f       	add	r20, r20
    3698:	55 1f       	adc	r21, r21
    369a:	e4 0f       	add	r30, r20
    369c:	f5 1f       	adc	r31, r21
    369e:	07 88       	ldd	r0, Z+23	; 0x17
    36a0:	f0 8d       	ldd	r31, Z+24	; 0x18
    36a2:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    36a4:	30 97       	sbiw	r30, 0x00	; 0
    36a6:	09 f4       	brne	.+2      	; 0x36aa <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x28a>
    36a8:	8d c0       	rjmp	.+282    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			char variable = (getterFunction)();
			DEBUG(F("(char)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    36aa:	19 95       	eicall
    36ac:	68 2f       	mov	r22, r24
    36ae:	c8 01       	movw	r24, r16
    36b0:	37 d3       	rcall	.+1646   	; 0x3d20 <_ZN5Print5printEc>
    36b2:	88 c0       	rjmp	.+272    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case CHAR_GETTER

	case DataType::INT8_T_GETTER: {
		const int8tFnPtr getterFunction = reinterpret_cast<int8tFnPtr>(_variable[number]);
    36b4:	44 0f       	add	r20, r20
    36b6:	55 1f       	adc	r21, r21
    36b8:	e4 0f       	add	r30, r20
    36ba:	f5 1f       	adc	r31, r21
    36bc:	07 88       	ldd	r0, Z+23	; 0x17
    36be:	f0 8d       	ldd	r31, Z+24	; 0x18
    36c0:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    36c2:	30 97       	sbiw	r30, 0x00	; 0
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2a8>
    36c6:	7e c0       	rjmp	.+252    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int8_t variable = (getterFunction)();
    36c8:	19 95       	eicall
			DEBUG(F("(int8_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    36ca:	68 2f       	mov	r22, r24
    36cc:	88 0f       	add	r24, r24
    36ce:	77 0b       	sbc	r23, r23
    36d0:	75 c0       	rjmp	.+234    	; 0x37bc <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x39c>
		} 
		break;
	} // case INT8_T_GETTER

	case DataType::UINT8_T_GETTER: {
		const uint8tFnPtr getterFunction = reinterpret_cast<uint8tFnPtr>(_variable[number]);
    36d2:	44 0f       	add	r20, r20
    36d4:	55 1f       	adc	r21, r21
    36d6:	e4 0f       	add	r30, r20
    36d8:	f5 1f       	adc	r31, r21
    36da:	07 88       	ldd	r0, Z+23	; 0x17
    36dc:	f0 8d       	ldd	r31, Z+24	; 0x18
    36de:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    36e0:	30 97       	sbiw	r30, 0x00	; 0
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2c6>
    36e4:	6f c0       	rjmp	.+222    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			uint8_t variable = (getterFunction)();
    36e6:	19 95       	eicall
			DEBUG(F("(uint8_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    36e8:	4a e0       	ldi	r20, 0x0A	; 10
    36ea:	50 e0       	ldi	r21, 0x00	; 0
    36ec:	68 2f       	mov	r22, r24
    36ee:	c8 01       	movw	r24, r16
    36f0:	71 d3       	rcall	.+1762   	; 0x3dd4 <_ZN5Print5printEhi>
    36f2:	68 c0       	rjmp	.+208    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT8_T_GETTER

	case DataType::INT16_T_GETTER: {
		const int16tFnPtr getterFunction = reinterpret_cast<int16tFnPtr>(_variable[number]);
    36f4:	44 0f       	add	r20, r20
    36f6:	55 1f       	adc	r21, r21
    36f8:	e4 0f       	add	r30, r20
    36fa:	f5 1f       	adc	r31, r21
    36fc:	07 88       	ldd	r0, Z+23	; 0x17
    36fe:	f0 8d       	ldd	r31, Z+24	; 0x18
    3700:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3702:	30 97       	sbiw	r30, 0x00	; 0
    3704:	09 f4       	brne	.+2      	; 0x3708 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x2e8>
    3706:	5e c0       	rjmp	.+188    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int16_t variable = (getterFunction)();
    3708:	19 95       	eicall
			DEBUG(F("(int16_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    370a:	4a e0       	ldi	r20, 0x0A	; 10
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	bc 01       	movw	r22, r24
    3710:	57 c0       	rjmp	.+174    	; 0x37c0 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a0>
		} 
		break;
	} // case INT16_T_GETTER

	case DataType::UINT16_T_GETTER: {
		const uint16tFnPtr getterFunction = reinterpret_cast<uint16tFnPtr>(_variable[number]);
    3712:	44 0f       	add	r20, r20
    3714:	55 1f       	adc	r21, r21
    3716:	e4 0f       	add	r30, r20
    3718:	f5 1f       	adc	r31, r21
    371a:	07 88       	ldd	r0, Z+23	; 0x17
    371c:	f0 8d       	ldd	r31, Z+24	; 0x18
    371e:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3720:	30 97       	sbiw	r30, 0x00	; 0
    3722:	09 f4       	brne	.+2      	; 0x3726 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x306>
    3724:	4f c0       	rjmp	.+158    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			uint16_t variable = (getterFunction)();
			DEBUG(F("(uint16_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3726:	19 95       	eicall
    3728:	4a e0       	ldi	r20, 0x0A	; 10
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	bc 01       	movw	r22, r24
    372e:	c8 01       	movw	r24, r16
    3730:	57 d3       	rcall	.+1710   	; 0x3de0 <_ZN5Print5printEji>
    3732:	48 c0       	rjmp	.+144    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT16_T_GETTER

	case DataType::INT32_T_GETTER: {
		const int32tFnPtr getterFunction = reinterpret_cast<int32tFnPtr>(_variable[number]);
    3734:	9a 01       	movw	r18, r20
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	e2 0f       	add	r30, r18
    373c:	f3 1f       	adc	r31, r19
    373e:	07 88       	ldd	r0, Z+23	; 0x17
    3740:	f0 8d       	ldd	r31, Z+24	; 0x18
    3742:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    3744:	30 97       	sbiw	r30, 0x00	; 0
    3746:	09 f4       	brne	.+2      	; 0x374a <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x32a>
    3748:	3d c0       	rjmp	.+122    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			int32_t variable = (getterFunction)();
    374a:	19 95       	eicall
    374c:	ab 01       	movw	r20, r22
			DEBUG(F("(int32_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    374e:	bc 01       	movw	r22, r24
    3750:	2a e0       	ldi	r18, 0x0A	; 10
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	c8 01       	movw	r24, r16
    3756:	49 d3       	rcall	.+1682   	; 0x3dea <_ZN5Print5printEli>
    3758:	35 c0       	rjmp	.+106    	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case INT32_T_GETTER

	case DataType::UINT32_T_GETTER: {
		const uint32tFnPtr getterFunction = reinterpret_cast<uint32tFnPtr>(_variable[number]);
    375a:	9a 01       	movw	r18, r20
    375c:	22 0f       	add	r18, r18
    375e:	33 1f       	adc	r19, r19
    3760:	e2 0f       	add	r30, r18
    3762:	f3 1f       	adc	r31, r19
    3764:	07 88       	ldd	r0, Z+23	; 0x17
    3766:	f0 8d       	ldd	r31, Z+24	; 0x18
    3768:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    376a:	30 97       	sbiw	r30, 0x00	; 0
			uint32_t variable = (getterFunction)();
    376c:	59 f1       	breq	.+86     	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    376e:	19 95       	eicall
    3770:	ab 01       	movw	r20, r22
			DEBUG(F("(uint32_t)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3772:	bc 01       	movw	r22, r24
    3774:	2a e0       	ldi	r18, 0x0A	; 10
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	c8 01       	movw	r24, r16
    377a:	20 d3       	rcall	.+1600   	; 0x3dbc <_ZN5Print5printEmi>
    377c:	23 c0       	rjmp	.+70     	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case UINT32_T_GETTER

	case DataType::FLOAT_GETTER: {
		const floatFnPtr getterFunction = reinterpret_cast<floatFnPtr>(_variable[number]);
    377e:	9a 01       	movw	r18, r20
    3780:	22 0f       	add	r18, r18
    3782:	33 1f       	adc	r19, r19
    3784:	e2 0f       	add	r30, r18
    3786:	f3 1f       	adc	r31, r19
    3788:	07 88       	ldd	r0, Z+23	; 0x17
    378a:	f0 8d       	ldd	r31, Z+24	; 0x18
    378c:	e0 2d       	mov	r30, r0
		if (getterFunction != nullptr) {
    378e:	30 97       	sbiw	r30, 0x00	; 0
			const float variable = (getterFunction)();
    3790:	c9 f0       	breq	.+50     	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
    3792:	19 95       	eicall
    3794:	ab 01       	movw	r20, r22
			DEBUG(F("(float)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    3796:	bc 01       	movw	r22, r24
    3798:	22 e0       	ldi	r18, 0x02	; 2
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	c8 01       	movw	r24, r16
    379e:	40 d4       	rcall	.+2176   	; 0x4020 <_ZN5Print5printEdi>
    37a0:	11 c0       	rjmp	.+34     	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
		} 
		break;
	} // case FLOAT_GETTER

	case DataType::BOOL_GETTER: {
		const boolFnPtr getterFunction = reinterpret_cast<boolFnPtr>(_variable[number]);
    37a2:	9a 01       	movw	r18, r20
    37a4:	22 0f       	add	r18, r18
    37a6:	33 1f       	adc	r19, r19
    37a8:	e2 0f       	add	r30, r18
    37aa:	f3 1f       	adc	r31, r19
    37ac:	07 88       	ldd	r0, Z+23	; 0x17
    37ae:	f0 8d       	ldd	r31, Z+24	; 0x18
		if (getterFunction != nullptr) {
    37b0:	e0 2d       	mov	r30, r0
    37b2:	30 97       	sbiw	r30, 0x00	; 0
			bool variable = (getterFunction)();
    37b4:	39 f0       	breq	.+14     	; 0x37c4 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh+0x3a4>
			DEBUG(F("(bool)")); DEBUG(variable);
			p_liquidCrystal->print(variable);
    37b6:	19 95       	eicall
    37b8:	68 2f       	mov	r22, r24
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	4a e0       	ldi	r20, 0x0A	; 10
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	c8 01       	movw	r24, r16
    37c2:	58 d3       	rcall	.+1712   	; 0x3e74 <_ZN5Print5printEii>

	default: { break; }

	} //switch (_variableType)
	DEBUG(F(" "));
}
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	fe be       	out	0x3e, r15	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	ed be       	out	0x3d, r14	; 61
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	bf 90       	pop	r11
    37e4:	af 90       	pop	r10
    37e6:	08 95       	ret

000037e8 <_ZN10LiquidLine5printEP13LiquidCrystalb>:
		DEBUGLN(F(" as PROG_CONST_CHAR failed, the variable must be of 'const char[]' data type"))
		return false;
	}
}

void LiquidLine::print(DisplayClass *p_liquidCrystal, bool isFocused) {
    37e8:	ef 92       	push	r14
    37ea:	ff 92       	push	r15
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	8c 01       	movw	r16, r24
    37f6:	eb 01       	movw	r28, r22
    37f8:	e4 2e       	mov	r14, r20
	p_liquidCrystal->setCursor(_column, _row);
    37fa:	dc 01       	movw	r26, r24
    37fc:	4c 91       	ld	r20, X
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	6c 91       	ld	r22, X
    3802:	ce 01       	movw	r24, r28
    3804:	22 dd       	rcall	.-1468   	; 0x324a <_ZN13LiquidCrystal9setCursorEhh>
	DEBUG(F(" (")); DEBUG(_column); DEBUG(F(", ")); DEBUG(_row); DEBUGLN(F(")"));

	DEBUG(F("|\t"));
	for (uint8_t v = 0; v < MAX_VARIABLES; v++) {
    3806:	f1 2c       	mov	r15, r1
		print_variable(p_liquidCrystal, v);
    3808:	4f 2d       	mov	r20, r15
    380a:	be 01       	movw	r22, r28
    380c:	c8 01       	movw	r24, r16
    380e:	08 de       	rcall	.-1008   	; 0x3420 <_ZN10LiquidLine14print_variableEP13LiquidCrystalh>
void LiquidLine::print(DisplayClass *p_liquidCrystal, bool isFocused) {
	p_liquidCrystal->setCursor(_column, _row);
	DEBUG(F(" (")); DEBUG(_column); DEBUG(F(", ")); DEBUG(_row); DEBUGLN(F(")"));

	DEBUG(F("|\t"));
	for (uint8_t v = 0; v < MAX_VARIABLES; v++) {
    3810:	f3 94       	inc	r15
    3812:	b5 e0       	ldi	r27, 0x05	; 5
    3814:	fb 12       	cpse	r15, r27
    3816:	f8 cf       	rjmp	.-16     	; 0x3808 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x20>
		print_variable(p_liquidCrystal, v);
	}
	DEBUGLN();

	if (isFocused) {
    3818:	ee 20       	and	r14, r14
    381a:	99 f1       	breq	.+102    	; 0x3882 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x9a>
		DEBUG(F("\t\t<Focus position: "));
		switch (_focusPosition) {
    381c:	f8 01       	movw	r30, r16
    381e:	84 81       	ldd	r24, Z+4	; 0x04
    3820:	82 30       	cpi	r24, 0x02	; 2
    3822:	59 f0       	breq	.+22     	; 0x383a <_ZN10LiquidLine5printEP13LiquidCrystalb+0x52>
    3824:	83 30       	cpi	r24, 0x03	; 3
    3826:	a9 f0       	breq	.+42     	; 0x3852 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x6a>
    3828:	e8 81       	ld	r30, Y
    382a:	f9 81       	ldd	r31, Y+1	; 0x01
    382c:	81 30       	cpi	r24, 0x01	; 1
    382e:	e9 f0       	breq	.+58     	; 0x386a <_ZN10LiquidLine5printEP13LiquidCrystalb+0x82>
			break;
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	d8 01       	movw	r26, r16
    3834:	14 96       	adiw	r26, 0x04	; 4
    3836:	8c 93       	st	X, r24
    3838:	18 c0       	rjmp	.+48     	; 0x386a <_ZN10LiquidLine5printEP13LiquidCrystalb+0x82>
			//p_liquidCrystal->print(NOTHING);
			break;
		} //case RIGHT
		case Position::LEFT: {
			//p_liquidCrystal->print(NOTHING);
			p_liquidCrystal->setCursor(_column - 1, _row);
    383a:	61 81       	ldd	r22, Z+1	; 0x01
    383c:	61 50       	subi	r22, 0x01	; 1
    383e:	40 81       	ld	r20, Z
    3840:	ce 01       	movw	r24, r28
    3842:	03 dd       	rcall	.-1530   	; 0x324a <_ZN13LiquidCrystal9setCursorEhh>
			p_liquidCrystal->write((uint8_t)14);
    3844:	e8 81       	ld	r30, Y
    3846:	f9 81       	ldd	r31, Y+1	; 0x01
    3848:	01 90       	ld	r0, Z+
    384a:	f0 81       	ld	r31, Z
    384c:	e0 2d       	mov	r30, r0
    384e:	6e e0       	ldi	r22, 0x0E	; 14
    3850:	10 c0       	rjmp	.+32     	; 0x3872 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x8a>
			DEBUGLN(F("left>"));
			break;
		} //case LEFT
		case Position::CUSTOM: {
			//p_liquidCrystal->print(NOTHING);
			p_liquidCrystal->setCursor(_focusColumn, _focusRow);
    3852:	f8 01       	movw	r30, r16
    3854:	42 81       	ldd	r20, Z+2	; 0x02
    3856:	63 81       	ldd	r22, Z+3	; 0x03
    3858:	ce 01       	movw	r24, r28
    385a:	f7 dc       	rcall	.-1554   	; 0x324a <_ZN13LiquidCrystal9setCursorEhh>
			p_liquidCrystal->write((uint8_t)13);
    385c:	e8 81       	ld	r30, Y
    385e:	f9 81       	ldd	r31, Y+1	; 0x01
    3860:	01 90       	ld	r0, Z+
    3862:	f0 81       	ld	r31, Z
    3864:	e0 2d       	mov	r30, r0
    3866:	6d e0       	ldi	r22, 0x0D	; 13
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <_ZN10LiquidLine5printEP13LiquidCrystalb+0x8a>
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
			p_liquidCrystal->write((uint8_t)15);
    386a:	01 90       	ld	r0, Z+
    386c:	f0 81       	ld	r31, Z
    386e:	e0 2d       	mov	r30, r0
    3870:	6f e0       	ldi	r22, 0x0F	; 15
    3872:	ce 01       	movw	r24, r28
		} //default
		} //switch (_focusPosition)
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
		} //case CUSTOM
		default: {
			DEBUG(F("invalid (")); DEBUG((uint8_t)_focusPosition);
			DEBUGLN(F("), switching to default>"));
			_focusPosition = Position::NORMAL;
			p_liquidCrystal->write((uint8_t)15);
    3880:	19 94       	eijmp
		} //default
		} //switch (_focusPosition)
	} else {
		//p_liquidCrystal->print(NOTHING);
	}
}
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	1f 91       	pop	r17
    3888:	0f 91       	pop	r16
    388a:	ff 90       	pop	r15
    388c:	ef 90       	pop	r14
    388e:	08 95       	ret

00003890 <_ZNK10LiquidLine13call_functionEh>:
	} //switch (_variableType)
	DEBUG(F(" "));
}

bool LiquidLine::call_function(uint8_t number) const {
	if (_function[number - 1]) {
    3890:	86 0f       	add	r24, r22
    3892:	91 1d       	adc	r25, r1
    3894:	86 0f       	add	r24, r22
    3896:	91 1d       	adc	r25, r1
    3898:	dc 01       	movw	r26, r24
    389a:	15 96       	adiw	r26, 0x05	; 5
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	16 97       	sbiw	r26, 0x06	; 6
    38a2:	30 97       	sbiw	r30, 0x00	; 0
    38a4:	19 f0       	breq	.+6      	; 0x38ac <_ZNK10LiquidLine13call_functionEh+0x1c>
		(*_function[number - 1])();
    38a6:	19 95       	eicall
		return true;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	08 95       	ret
	} else {
		return false;
    38ac:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    38ae:	08 95       	ret

000038b0 <_ZN10LiquidMenuC1ER13LiquidCrystalh>:
bool LiquidMenu::operator=(uint8_t number) {
  return change_screen(number);
}

bool LiquidMenu::operator=(LiquidScreen &p_liquidScreen) {
  return change_screen(p_liquidScreen);
    38b0:	fc 01       	movw	r30, r24
    38b2:	71 83       	std	Z+1, r23	; 0x01
    38b4:	60 83       	st	Z, r22
    38b6:	16 8e       	std	Z+30, r1	; 0x1e
    38b8:	41 50       	subi	r20, 0x01	; 1
    38ba:	47 8f       	std	Z+31, r20	; 0x1f
    38bc:	08 95       	ret

000038be <_ZN10LiquidMenu10add_screenER12LiquidScreen>:
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	ec 01       	movw	r28, r24
    38c8:	8b 01       	movw	r16, r22
    38ca:	8a dd       	rcall	.-1260   	; 0x33e0 <_Z8print_mej>
    38cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38ce:	8e 30       	cpi	r24, 0x0E	; 14
    38d0:	58 f4       	brcc	.+22     	; 0x38e8 <_ZN10LiquidMenu10add_screenER12LiquidScreen+0x2a>
    38d2:	fe 01       	movw	r30, r28
    38d4:	e8 0f       	add	r30, r24
    38d6:	f1 1d       	adc	r31, r1
    38d8:	e8 0f       	add	r30, r24
    38da:	f1 1d       	adc	r31, r1
    38dc:	13 83       	std	Z+3, r17	; 0x03
    38de:	02 83       	std	Z+2, r16	; 0x02
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	8e 8f       	std	Y+30, r24	; 0x1e
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	01 c0       	rjmp	.+2      	; 0x38ea <_ZN10LiquidMenu10add_screenER12LiquidScreen+0x2c>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	08 95       	ret

000038f4 <_ZNK10LiquidMenu17get_currentScreenEv>:
    38f4:	fc 01       	movw	r30, r24
    38f6:	27 8d       	ldd	r18, Z+31	; 0x1f
    38f8:	e2 0f       	add	r30, r18
    38fa:	f1 1d       	adc	r31, r1
    38fc:	e2 0f       	add	r30, r18
    38fe:	f1 1d       	adc	r31, r1
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	08 95       	ret

00003906 <_ZNK10LiquidMenu10softUpdateEv>:
    3906:	fc 01       	movw	r30, r24
    3908:	60 81       	ld	r22, Z
    390a:	71 81       	ldd	r23, Z+1	; 0x01
    390c:	87 8d       	ldd	r24, Z+31	; 0x1f
    390e:	e8 0f       	add	r30, r24
    3910:	f1 1d       	adc	r31, r1
    3912:	e8 0f       	add	r30, r24
    3914:	f1 1d       	adc	r31, r1
    3916:	82 81       	ldd	r24, Z+2	; 0x02
    3918:	93 81       	ldd	r25, Z+3	; 0x03
    391a:	b0 c0       	rjmp	.+352    	; 0x3a7c <_ZNK12LiquidScreen5printEP13LiquidCrystal>

0000391c <_ZNK10LiquidMenu6updateEv>:
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	ec 01       	movw	r28, r24
    3922:	88 81       	ld	r24, Y
    3924:	99 81       	ldd	r25, Y+1	; 0x01
    3926:	8c dc       	rcall	.-1768   	; 0x3240 <_ZN13LiquidCrystal5clearEv>
    3928:	ce 01       	movw	r24, r28
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	eb cf       	rjmp	.-42     	; 0x3906 <_ZNK10LiquidMenu10softUpdateEv>

00003930 <_ZN10LiquidMenu13change_screenER12LiquidScreen>:
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	8c 01       	movw	r16, r24
    393c:	7b 01       	movw	r14, r22
    393e:	c0 e0       	ldi	r28, 0x00	; 0
    3940:	f8 01       	movw	r30, r16
    3942:	86 8d       	ldd	r24, Z+30	; 0x1e
    3944:	c8 17       	cp	r28, r24
    3946:	b8 f4       	brcc	.+46     	; 0x3976 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x46>
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	79 dc       	rcall	.-1806   	; 0x3240 <_ZN13LiquidCrystal5clearEv>
    394e:	f8 01       	movw	r30, r16
    3950:	ec 0f       	add	r30, r28
    3952:	f1 1d       	adc	r31, r1
    3954:	ec 0f       	add	r30, r28
    3956:	f1 1d       	adc	r31, r1
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	8e 15       	cp	r24, r14
    395e:	9f 05       	cpc	r25, r15
    3960:	41 f4       	brne	.+16     	; 0x3972 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x42>
    3962:	f8 01       	movw	r30, r16
    3964:	c7 8f       	std	Z+31, r28	; 0x1f
    3966:	c8 01       	movw	r24, r16
    3968:	d9 df       	rcall	.-78     	; 0x391c <_ZNK10LiquidMenu6updateEv>
    396a:	c8 01       	movw	r24, r16
    396c:	d7 df       	rcall	.-82     	; 0x391c <_ZNK10LiquidMenu6updateEv>
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	03 c0       	rjmp	.+6      	; 0x3978 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x48>
    3972:	cf 5f       	subi	r28, 0xFF	; 255
    3974:	e5 cf       	rjmp	.-54     	; 0x3940 <_ZN10LiquidMenu13change_screenER12LiquidScreen+0x10>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	08 95       	ret

00003984 <_ZN10LiquidMenu12switch_focusEb>:
}

void LiquidMenu::switch_focus(bool forward) {
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	ec 01       	movw	r28, r24
    398c:	16 2f       	mov	r17, r22
  _p_liquidCrystal->clear();
    398e:	88 81       	ld	r24, Y
    3990:	99 81       	ldd	r25, Y+1	; 0x01
    3992:	56 dc       	rcall	.-1876   	; 0x3240 <_ZN13LiquidCrystal5clearEv>
  _p_liquidScreen[_currentScreen]->switch_focus(forward);
    3994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3996:	fe 01       	movw	r30, r28
    3998:	e8 0f       	add	r30, r24
    399a:	f1 1d       	adc	r31, r1
    399c:	e8 0f       	add	r30, r24
    399e:	f1 1d       	adc	r31, r1
    39a0:	61 2f       	mov	r22, r17
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	bf d0       	rcall	.+382    	; 0x3b26 <_ZN12LiquidScreen12switch_focusEb>
  update();
    39a8:	ce 01       	movw	r24, r28
}
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
}

void LiquidMenu::switch_focus(bool forward) {
  _p_liquidCrystal->clear();
  _p_liquidScreen[_currentScreen]->switch_focus(forward);
  update();
    39ae:	1f 91       	pop	r17
    39b0:	b5 cf       	rjmp	.-150    	; 0x391c <_ZNK10LiquidMenu6updateEv>

000039b2 <_ZNK10LiquidMenu13call_functionEh>:
    DEBUGLN2(symbol[i], BIN);
  }
  return true;
}

bool LiquidMenu::call_function(uint8_t number) const {
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	ec 01       	movw	r28, r24
  bool returnValue = _p_liquidScreen[_currentScreen]->call_function(number);
    39ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39bc:	fe 01       	movw	r30, r28
    39be:	e8 0f       	add	r30, r24
    39c0:	f1 1d       	adc	r31, r1
    39c2:	e8 0f       	add	r30, r24
    39c4:	f1 1d       	adc	r31, r1
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	d7 d0       	rcall	.+430    	; 0x3b7a <_ZNK12LiquidScreen13call_functionEh>
    39cc:	18 2f       	mov	r17, r24
  update();
    39ce:	ce 01       	movw	r24, r28
    39d0:	a5 df       	rcall	.-182    	; 0x391c <_ZNK10LiquidMenu6updateEv>
  return returnValue;
}
    39d2:	81 2f       	mov	r24, r17
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	08 95       	ret

000039dc <_ZN12LiquidScreen8add_lineER10LiquidLine>:
{
	_displayLineCount = lines;
}

void LiquidScreen::hide(bool hide) {
	_hidden = hide;
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	ec 01       	movw	r28, r24
    39e6:	8b 01       	movw	r16, r22
    39e8:	fb dc       	rcall	.-1546   	; 0x33e0 <_Z8print_mej>
    39ea:	88 8d       	ldd	r24, Y+24	; 0x18
    39ec:	8c 30       	cpi	r24, 0x0C	; 12
    39ee:	78 f4       	brcc	.+30     	; 0x3a0e <_ZN12LiquidScreen8add_lineER10LiquidLine+0x32>
    39f0:	fe 01       	movw	r30, r28
    39f2:	e8 0f       	add	r30, r24
    39f4:	f1 1d       	adc	r31, r1
    39f6:	e8 0f       	add	r30, r24
    39f8:	f1 1d       	adc	r31, r1
    39fa:	11 83       	std	Z+1, r17	; 0x01
    39fc:	00 83       	st	Z, r16
    39fe:	8f 5f       	subi	r24, 0xFF	; 255
    3a00:	88 8f       	std	Y+24, r24	; 0x18
    3a02:	99 8d       	ldd	r25, Y+25	; 0x19
    3a04:	9f 5f       	subi	r25, 0xFF	; 255
    3a06:	99 8f       	std	Y+25, r25	; 0x19
    3a08:	8a 8f       	std	Y+26, r24	; 0x1a
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	01 c0       	rjmp	.+2      	; 0x3a10 <_ZN12LiquidScreen8add_lineER10LiquidLine+0x34>
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	1f 91       	pop	r17
    3a16:	0f 91       	pop	r16
    3a18:	08 95       	ret

00003a1a <_ZN12LiquidScreenC1ER10LiquidLine>:
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	10 8e       	std	Z+24, r1	; 0x18
    3a1e:	11 8e       	std	Z+25, r1	; 0x19
    3a20:	13 8e       	std	Z+27, r1	; 0x1b
    3a22:	dc cf       	rjmp	.-72     	; 0x39dc <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>:
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
    3a2e:	8a 01       	movw	r16, r20
    3a30:	f4 df       	rcall	.-24     	; 0x3a1a <_ZN12LiquidScreenC1ER10LiquidLine>
    3a32:	b8 01       	movw	r22, r16
    3a34:	ce 01       	movw	r24, r28
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	ce cf       	rjmp	.-100    	; 0x39dc <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003a40 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>:
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	ec 01       	movw	r28, r24
    3a4a:	89 01       	movw	r16, r18
    3a4c:	eb df       	rcall	.-42     	; 0x3a24 <_ZN12LiquidScreenC1ER10LiquidLineS1_>
    3a4e:	b8 01       	movw	r22, r16
    3a50:	ce 01       	movw	r24, r28
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	c0 cf       	rjmp	.-128    	; 0x39dc <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003a5c <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_S1_>:
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	ec 01       	movw	r28, r24
    3a66:	ec df       	rcall	.-40     	; 0x3a40 <_ZN12LiquidScreenC1ER10LiquidLineS1_S1_>
    3a68:	b8 01       	movw	r22, r16
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	df 91       	pop	r29
    3a6e:	cf 91       	pop	r28
    3a70:	1f 91       	pop	r17
    3a72:	0f 91       	pop	r16
    3a74:	b3 cf       	rjmp	.-154    	; 0x39dc <_ZN12LiquidScreen8add_lineER10LiquidLine>

00003a76 <_ZN12LiquidScreen20set_displayLineCountEh>:
    3a76:	fc 01       	movw	r30, r24
    3a78:	62 8f       	std	Z+26, r22	; 0x1a
    3a7a:	08 95       	ret

00003a7c <_ZNK12LiquidScreen5printEP13LiquidCrystal>:
}

void LiquidScreen::print(DisplayClass *p_liquidCrystal) const {
    3a7c:	bf 92       	push	r11
    3a7e:	cf 92       	push	r12
    3a80:	df 92       	push	r13
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	cf 93       	push	r28
    3a8c:	df 93       	push	r29
    3a8e:	8c 01       	movw	r16, r24
    3a90:	6b 01       	movw	r12, r22
	uint8_t lOffset = 0;
	uint8_t displayLineCount = _displayLineCount;
    3a92:	fc 01       	movw	r30, r24
    3a94:	b2 8c       	ldd	r11, Z+26	; 0x1a
    3a96:	80 8d       	ldd	r24, Z+24	; 0x18
	if (displayLineCount == 0)
    3a98:	bb 20       	and	r11, r11
    3a9a:	11 f0       	breq	.+4      	; 0x3aa0 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x24>
    3a9c:	8b 15       	cp	r24, r11
    3a9e:	08 f4       	brcc	.+2      	; 0x3aa2 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x26>
    3aa0:	b8 2e       	mov	r11, r24
		displayLineCount = _lineCount;
	DEBUG("MaxLine: ");
	DEBUG(displayLineCount);
	DEBUG("\n");

	if (_focus >= displayLineCount)
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	c1 8d       	ldd	r28, Z+25	; 0x19
    3aa6:	eb 2c       	mov	r14, r11
    3aa8:	f1 2c       	mov	r15, r1
    3aaa:	cb 15       	cp	r28, r11
    3aac:	68 f0       	brcs	.+26     	; 0x3ac8 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4c>
	{
		lOffset = (_focus - displayLineCount) + 1;
    3aae:	cf 5f       	subi	r28, 0xFF	; 255
    3ab0:	cb 19       	sub	r28, r11
		if ((displayLineCount + lOffset) > _lineCount)
    3ab2:	a7 01       	movw	r20, r14
    3ab4:	4c 0f       	add	r20, r28
    3ab6:	51 1d       	adc	r21, r1
    3ab8:	28 2f       	mov	r18, r24
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	24 17       	cp	r18, r20
    3abe:	35 07       	cpc	r19, r21
    3ac0:	24 f4       	brge	.+8      	; 0x3aca <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4e>
			lOffset = (_lineCount - displayLineCount);
    3ac2:	c8 2f       	mov	r28, r24
    3ac4:	cb 19       	sub	r28, r11
    3ac6:	01 c0       	rjmp	.+2      	; 0x3aca <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x4e>
void LiquidScreen::hide(bool hide) {
	_hidden = hide;
}

void LiquidScreen::print(DisplayClass *p_liquidCrystal) const {
	uint8_t lOffset = 0;
    3ac8:	c0 e0       	ldi	r28, 0x00	; 0
		lOffset = (_focus - displayLineCount) + 1;
		if ((displayLineCount + lOffset) > _lineCount)
			lOffset = (_lineCount - displayLineCount);
	}
	uint8_t offsetRow = 0;
	for (uint8_t l = lOffset; l < displayLineCount + lOffset; l++) {
    3aca:	dc 2f       	mov	r29, r28
    3acc:	ec 0e       	add	r14, r28
    3ace:	f1 1c       	adc	r15, r1
    3ad0:	2d 2f       	mov	r18, r29
    3ad2:	2c 1b       	sub	r18, r28
    3ad4:	8d 2f       	mov	r24, r29
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	8e 15       	cp	r24, r14
    3ada:	9f 05       	cpc	r25, r15
    3adc:	d4 f4       	brge	.+52     	; 0x3b12 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x96>
		bool focus = true;
		if (_focus != l) {
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	31 8d       	ldd	r19, Z+25	; 0x19
    3ae4:	3d 13       	cpse	r19, r29
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
			DEBUG(F("|"));
		} else {
			DEBUG(F("|   -->"));
		}
		DEBUG(F("\tLine ")); DEBUG(l);
		if (displayLineCount < _lineCount)
    3ae8:	f8 01       	movw	r30, r16
    3aea:	30 8d       	ldd	r19, Z+24	; 0x18
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	b3 16       	cp	r11, r19
    3af2:	30 f4       	brcc	.+12     	; 0x3b00 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x84>
			_p_liquidLine[l]->_row = offsetRow;
    3af4:	e8 0f       	add	r30, r24
    3af6:	f9 1f       	adc	r31, r25
    3af8:	01 90       	ld	r0, Z+
    3afa:	f0 81       	ld	r31, Z
    3afc:	e0 2d       	mov	r30, r0
    3afe:	20 83       	st	Z, r18
		_p_liquidLine[l]->print(p_liquidCrystal, focus);
    3b00:	f8 01       	movw	r30, r16
    3b02:	e8 0f       	add	r30, r24
    3b04:	f9 1f       	adc	r31, r25
    3b06:	b6 01       	movw	r22, r12
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	6d de       	rcall	.-806    	; 0x37e8 <_ZN10LiquidLine5printEP13LiquidCrystalb>
		lOffset = (_focus - displayLineCount) + 1;
		if ((displayLineCount + lOffset) > _lineCount)
			lOffset = (_lineCount - displayLineCount);
	}
	uint8_t offsetRow = 0;
	for (uint8_t l = lOffset; l < displayLineCount + lOffset; l++) {
    3b0e:	df 5f       	subi	r29, 0xFF	; 255
    3b10:	df cf       	rjmp	.-66     	; 0x3ad0 <_ZNK12LiquidScreen5printEP13LiquidCrystal+0x54>
		if (displayLineCount < _lineCount)
			_p_liquidLine[l]->_row = offsetRow;
		_p_liquidLine[l]->print(p_liquidCrystal, focus);
		offsetRow++;
	}
}
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	df 90       	pop	r13
    3b20:	cf 90       	pop	r12
    3b22:	bf 90       	pop	r11
    3b24:	08 95       	ret

00003b26 <_ZN12LiquidScreen12switch_focusEb>:

void LiquidScreen::switch_focus(bool forward) {
    3b26:	1f 93       	push	r17
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	ec 01       	movw	r28, r24
    3b2e:	16 2f       	mov	r17, r22
	print_me(reinterpret_cast<uintptr_t>(this));
    3b30:	57 dc       	rcall	.-1874   	; 0x33e0 <_Z8print_mej>
    3b32:	89 8d       	ldd	r24, Y+25	; 0x19
	do {
		if (forward) {
    3b34:	11 23       	and	r17, r17
    3b36:	51 f0       	breq	.+20     	; 0x3b4c <_ZN12LiquidScreen12switch_focusEb+0x26>
			if (_focus < _lineCount) {
    3b38:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3a:	89 17       	cp	r24, r25
    3b3c:	28 f4       	brcc	.+10     	; 0x3b48 <_ZN12LiquidScreen12switch_focusEb+0x22>
				_focus++;
    3b3e:	8f 5f       	subi	r24, 0xFF	; 255
    3b40:	89 8f       	std	Y+25, r24	; 0x19
				if (_focus == _lineCount) {
    3b42:	98 13       	cpse	r25, r24
    3b44:	0a c0       	rjmp	.+20     	; 0x3b5a <_ZN12LiquidScreen12switch_focusEb+0x34>
    3b46:	15 c0       	rjmp	.+42     	; 0x3b72 <_ZN12LiquidScreen12switch_focusEb+0x4c>
					break;
				}
			} else {
				_focus = 0;
    3b48:	19 8e       	std	Y+25, r1	; 0x19
    3b4a:	07 c0       	rjmp	.+14     	; 0x3b5a <_ZN12LiquidScreen12switch_focusEb+0x34>
			}
		} else { //else (forward)
			if (_focus == 0) {
    3b4c:	81 11       	cpse	r24, r1
    3b4e:	03 c0       	rjmp	.+6      	; 0x3b56 <_ZN12LiquidScreen12switch_focusEb+0x30>
				_focus = _lineCount;
    3b50:	88 8d       	ldd	r24, Y+24	; 0x18
    3b52:	89 8f       	std	Y+25, r24	; 0x19
				break;
    3b54:	0e c0       	rjmp	.+28     	; 0x3b72 <_ZN12LiquidScreen12switch_focusEb+0x4c>
			} else {
				_focus--;
    3b56:	81 50       	subi	r24, 0x01	; 1
    3b58:	89 8f       	std	Y+25, r24	; 0x19
			}
		} //else (forward)
	} while (_p_liquidLine[_focus]->_focusable == false);
    3b5a:	89 8d       	ldd	r24, Y+25	; 0x19
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e8 0f       	add	r30, r24
    3b60:	f1 1d       	adc	r31, r1
    3b62:	e8 0f       	add	r30, r24
    3b64:	f1 1d       	adc	r31, r1
    3b66:	01 90       	ld	r0, Z+
    3b68:	f0 81       	ld	r31, Z
    3b6a:	e0 2d       	mov	r30, r0
    3b6c:	86 a1       	ldd	r24, Z+38	; 0x26
    3b6e:	88 23       	and	r24, r24
    3b70:	01 f3       	breq	.-64     	; 0x3b32 <_ZN12LiquidScreen12switch_focusEb+0xc>
	DEBUG(F("Focus switched to ")); DEBUGLN(_focus);
}
    3b72:	df 91       	pop	r29
    3b74:	cf 91       	pop	r28
    3b76:	1f 91       	pop	r17
    3b78:	08 95       	ret

00003b7a <_ZNK12LiquidScreen13call_functionEh>:

bool LiquidScreen::call_function(uint8_t number) const {
    3b7a:	fc 01       	movw	r30, r24
	if (_focus != _lineCount) {
    3b7c:	81 8d       	ldd	r24, Z+25	; 0x19
    3b7e:	90 8d       	ldd	r25, Z+24	; 0x18
    3b80:	89 17       	cp	r24, r25
    3b82:	39 f0       	breq	.+14     	; 0x3b92 <_ZNK12LiquidScreen13call_functionEh+0x18>
		return _p_liquidLine[_focus]->call_function(number);
    3b84:	e8 0f       	add	r30, r24
    3b86:	f1 1d       	adc	r31, r1
    3b88:	e8 0f       	add	r30, r24
    3b8a:	f1 1d       	adc	r31, r1
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	7f ce       	rjmp	.-770    	; 0x3890 <_ZNK10LiquidLine13call_functionEh>
	}
	return false;
}
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	08 95       	ret

00003b96 <_Z13recognizeTypePKc>:
}

DataType recognizeType(int32_t variable) {
	return DataType::INT32_T;
	variable = variable;
}
    3b96:	8e e3       	ldi	r24, 0x3E	; 62
    3b98:	08 95       	ret

00003b9a <_Z13recognizeTypem>:

DataType recognizeType(uint32_t variable) {
	return DataType::UINT32_T;
	variable = variable;
}
    3b9a:	81 e2       	ldi	r24, 0x21	; 33
    3b9c:	08 95       	ret

00003b9e <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb>:
  return pressState.getSingleDebouncedRisingEdge(isPressed());
}

bool PushbuttonBase::getSingleDebouncedRelease()
{
  return releaseState.getSingleDebouncedRisingEdge(!isPressed());
    3b9e:	1f 93       	push	r17
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	ec 01       	movw	r28, r24
    3ba6:	16 2f       	mov	r17, r22
    3ba8:	f9 d8       	rcall	.-3598   	; 0x2d9c <millis>
    3baa:	28 81       	ld	r18, Y
    3bac:	21 30       	cpi	r18, 0x01	; 1
    3bae:	61 f0       	breq	.+24     	; 0x3bc8 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x2a>
    3bb0:	28 f0       	brcs	.+10     	; 0x3bbc <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x1e>
    3bb2:	22 30       	cpi	r18, 0x02	; 2
    3bb4:	b1 f0       	breq	.+44     	; 0x3be2 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x44>
    3bb6:	23 30       	cpi	r18, 0x03	; 3
    3bb8:	d9 f0       	breq	.+54     	; 0x3bf0 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x52>
    3bba:	26 c0       	rjmp	.+76     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3bbc:	11 11       	cpse	r17, r1
    3bbe:	24 c0       	rjmp	.+72     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3bc0:	7a 83       	std	Y+2, r23	; 0x02
    3bc2:	69 83       	std	Y+1, r22	; 0x01
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	12 c0       	rjmp	.+36     	; 0x3bec <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x4e>
    3bc8:	11 23       	and	r17, r17
    3bca:	11 f0       	breq	.+4      	; 0x3bd0 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x32>
    3bcc:	18 82       	st	Y, r1
    3bce:	1c c0       	rjmp	.+56     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3bd0:	29 81       	ldd	r18, Y+1	; 0x01
    3bd2:	3a 81       	ldd	r19, Y+2	; 0x02
    3bd4:	62 1b       	sub	r22, r18
    3bd6:	73 0b       	sbc	r23, r19
    3bd8:	6f 30       	cpi	r22, 0x0F	; 15
    3bda:	71 05       	cpc	r23, r1
    3bdc:	a8 f0       	brcs	.+42     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3bde:	82 e0       	ldi	r24, 0x02	; 2
    3be0:	05 c0       	rjmp	.+10     	; 0x3bec <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x4e>
    3be2:	11 23       	and	r17, r17
    3be4:	89 f0       	breq	.+34     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3be6:	7a 83       	std	Y+2, r23	; 0x02
    3be8:	69 83       	std	Y+1, r22	; 0x01
    3bea:	83 e0       	ldi	r24, 0x03	; 3
    3bec:	88 83       	st	Y, r24
    3bee:	0c c0       	rjmp	.+24     	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3bf0:	11 23       	and	r17, r17
    3bf2:	a9 f3       	breq	.-22     	; 0x3bde <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x40>
    3bf4:	29 81       	ldd	r18, Y+1	; 0x01
    3bf6:	3a 81       	ldd	r19, Y+2	; 0x02
    3bf8:	62 1b       	sub	r22, r18
    3bfa:	73 0b       	sbc	r23, r19
    3bfc:	6f 30       	cpi	r22, 0x0F	; 15
    3bfe:	71 05       	cpc	r23, r1
    3c00:	18 f0       	brcs	.+6      	; 0x3c08 <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6a>
    3c02:	18 82       	st	Y, r1
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb+0x6c>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	08 95       	ret

00003c12 <_ZN14PushbuttonBase23getSingleDebouncedPressEv>:
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	ec 01       	movw	r28, r24
    3c18:	e8 81       	ld	r30, Y
    3c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c1c:	01 90       	ld	r0, Z+
    3c1e:	f0 81       	ld	r31, Z
    3c20:	e0 2d       	mov	r30, r0
    3c22:	19 95       	eicall
    3c24:	68 2f       	mov	r22, r24
    3c26:	ce 01       	movw	r24, r28
    3c28:	02 96       	adiw	r24, 0x02	; 2
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	b7 cf       	rjmp	.-146    	; 0x3b9e <_ZN22PushbuttonStateMachine28getSingleDebouncedRisingEdgeEb>

00003c30 <_ZN10PushbuttonC1Ehhh>:
}

Pushbutton::Pushbutton(uint8_t pin, uint8_t pullUp, uint8_t defaultState)
    3c30:	fc 01       	movw	r30, r24

// \cond

PushbuttonStateMachine::PushbuttonStateMachine()
{
  state = 0;
    3c32:	12 82       	std	Z+2, r1	; 0x02
    3c34:	15 82       	std	Z+5, r1	; 0x05
bool PushbuttonBase::getSingleDebouncedRelease()
{
  return releaseState.getSingleDebouncedRisingEdge(!isPressed());
}

Pushbutton::Pushbutton(uint8_t pin, uint8_t pullUp, uint8_t defaultState)
    3c36:	8b e3       	ldi	r24, 0x3B	; 59
    3c38:	92 e0       	ldi	r25, 0x02	; 2
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	80 83       	st	Z, r24
{
  initialized = false;
    3c3e:	10 86       	std	Z+8, r1	; 0x08
  _pin = pin;
    3c40:	61 87       	std	Z+9, r22	; 0x09
  _pullUp = pullUp;
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	41 11       	cpse	r20, r1
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <_ZN10PushbuttonC1Ehhh+0x1a>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	82 87       	std	Z+10, r24	; 0x0a
  _defaultState = defaultState;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	21 11       	cpse	r18, r1
    3c50:	01 c0       	rjmp	.+2      	; 0x3c54 <_ZN10PushbuttonC1Ehhh+0x24>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	83 87       	std	Z+11, r24	; 0x0b
    3c56:	08 95       	ret

00003c58 <_ZN10Pushbutton5init2Ev>:
}

void Pushbutton::init2()
{
    3c58:	fc 01       	movw	r30, r24
  if (_pullUp == PULL_UP_ENABLED)
    3c5a:	82 85       	ldd	r24, Z+10	; 0x0a
    3c5c:	88 23       	and	r24, r24
    3c5e:	11 f0       	breq	.+4      	; 0x3c64 <_ZN10Pushbutton5init2Ev+0xc>
  {
    pinMode(_pin, INPUT_PULLUP);
    3c60:	62 e0       	ldi	r22, 0x02	; 2
    3c62:	01 c0       	rjmp	.+2      	; 0x3c66 <_ZN10Pushbutton5init2Ev+0xe>
  }
  else
  {
    pinMode(_pin, INPUT); // high impedance
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	81 85       	ldd	r24, Z+9	; 0x09
    3c68:	c6 d9       	rcall	.-3188   	; 0x2ff6 <pinMode>
  }

  delayMicroseconds(5); // give pull-up time to stabilize
    3c6a:	85 e0       	ldi	r24, 0x05	; 5
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	00 c9       	rjmp	.-3584   	; 0x2e70 <delayMicroseconds>

00003c70 <_ZN10Pushbutton9isPressedEv>:
}

bool Pushbutton::isPressed()
{
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	ec 01       	movw	r28, r24

private:

  void init()
  {
    if (!initialized)
    3c76:	88 85       	ldd	r24, Y+8	; 0x08
    3c78:	81 11       	cpse	r24, r1
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <_ZN10Pushbutton9isPressedEv+0x14>
    {
      initialized = true;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	88 87       	std	Y+8, r24	; 0x08
      init2();
    3c80:	ce 01       	movw	r24, r28
    3c82:	ea df       	rcall	.-44     	; 0x3c58 <_ZN10Pushbutton5init2Ev>
  init();  // initialize if needed
  return digitalRead(_pin) != _defaultState;
    3c84:	89 85       	ldd	r24, Y+9	; 0x09
    3c86:	21 da       	rcall	.-3006   	; 0x30ca <digitalRead>
    3c88:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	41 e0       	ldi	r20, 0x01	; 1
    3c8e:	28 17       	cp	r18, r24
    3c90:	39 07       	cpc	r19, r25
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <_ZN10Pushbutton9isPressedEv+0x26>
    3c94:	40 e0       	ldi	r20, 0x00	; 0
}
    3c96:	84 2f       	mov	r24, r20
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	08 95       	ret

00003c9e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3c9e:	08 95       	ret

00003ca0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3ca0:	cf 92       	push	r12
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	6c 01       	movw	r12, r24
    3cb2:	7a 01       	movw	r14, r20
    3cb4:	8b 01       	movw	r16, r22
    3cb6:	c0 e0       	ldi	r28, 0x00	; 0
    3cb8:	d0 e0       	ldi	r29, 0x00	; 0
    3cba:	ce 15       	cp	r28, r14
    3cbc:	df 05       	cpc	r29, r15
    3cbe:	81 f0       	breq	.+32     	; 0x3ce0 <_ZN5Print5writeEPKhj+0x40>
    3cc0:	d8 01       	movw	r26, r16
    3cc2:	6d 91       	ld	r22, X+
    3cc4:	8d 01       	movw	r16, r26
    3cc6:	d6 01       	movw	r26, r12
    3cc8:	ed 91       	ld	r30, X+
    3cca:	fc 91       	ld	r31, X
    3ccc:	01 90       	ld	r0, Z+
    3cce:	f0 81       	ld	r31, Z
    3cd0:	e0 2d       	mov	r30, r0
    3cd2:	c6 01       	movw	r24, r12
    3cd4:	19 95       	eicall
    3cd6:	89 2b       	or	r24, r25
    3cd8:	11 f0       	breq	.+4      	; 0x3cde <_ZN5Print5writeEPKhj+0x3e>
    3cda:	21 96       	adiw	r28, 0x01	; 1
    3cdc:	ee cf       	rjmp	.-36     	; 0x3cba <_ZN5Print5writeEPKhj+0x1a>
    3cde:	7e 01       	movw	r14, r28
    3ce0:	c7 01       	movw	r24, r14
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	df 90       	pop	r13
    3cf0:	cf 90       	pop	r12
    3cf2:	08 95       	ret

00003cf4 <_ZN5Print5writeEPKc>:
    3cf4:	61 15       	cp	r22, r1
    3cf6:	71 05       	cpc	r23, r1
    3cf8:	79 f0       	breq	.+30     	; 0x3d18 <_ZN5Print5writeEPKc+0x24>
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	01 90       	ld	r0, Z+
    3cfe:	00 20       	and	r0, r0
    3d00:	e9 f7       	brne	.-6      	; 0x3cfc <_ZN5Print5writeEPKc+0x8>
    3d02:	31 97       	sbiw	r30, 0x01	; 1
    3d04:	af 01       	movw	r20, r30
    3d06:	46 1b       	sub	r20, r22
    3d08:	57 0b       	sbc	r21, r23
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	ed 91       	ld	r30, X+
    3d0e:	fc 91       	ld	r31, X
    3d10:	02 80       	ldd	r0, Z+2	; 0x02
    3d12:	f3 81       	ldd	r31, Z+3	; 0x03
    3d14:	e0 2d       	mov	r30, r0
    3d16:	19 94       	eijmp
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	08 95       	ret

00003d1e <_ZN5Print5printEPKc>:
    3d1e:	ea cf       	rjmp	.-44     	; 0x3cf4 <_ZN5Print5writeEPKc>

00003d20 <_ZN5Print5printEc>:
    3d20:	dc 01       	movw	r26, r24
    3d22:	ed 91       	ld	r30, X+
    3d24:	fc 91       	ld	r31, X
    3d26:	01 90       	ld	r0, Z+
    3d28:	f0 81       	ld	r31, Z
    3d2a:	e0 2d       	mov	r30, r0
    3d2c:	19 94       	eijmp

00003d2e <_ZN5Print11printNumberEmh>:
    3d2e:	8f 92       	push	r8
    3d30:	9f 92       	push	r9
    3d32:	af 92       	push	r10
    3d34:	bf 92       	push	r11
    3d36:	ef 92       	push	r14
    3d38:	ff 92       	push	r15
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	a1 97       	sbiw	r28, 0x21	; 33
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	7c 01       	movw	r14, r24
    3d54:	fa 01       	movw	r30, r20
    3d56:	cb 01       	movw	r24, r22
    3d58:	19 a2       	std	Y+33, r1	; 0x21
    3d5a:	22 30       	cpi	r18, 0x02	; 2
    3d5c:	08 f4       	brcc	.+2      	; 0x3d60 <_ZN5Print11printNumberEmh+0x32>
    3d5e:	2a e0       	ldi	r18, 0x0A	; 10
    3d60:	8e 01       	movw	r16, r28
    3d62:	0f 5d       	subi	r16, 0xDF	; 223
    3d64:	1f 4f       	sbci	r17, 0xFF	; 255
    3d66:	82 2e       	mov	r8, r18
    3d68:	91 2c       	mov	r9, r1
    3d6a:	a1 2c       	mov	r10, r1
    3d6c:	b1 2c       	mov	r11, r1
    3d6e:	bf 01       	movw	r22, r30
    3d70:	a5 01       	movw	r20, r10
    3d72:	94 01       	movw	r18, r8
    3d74:	b5 d1       	rcall	.+874    	; 0x40e0 <__udivmodsi4>
    3d76:	f9 01       	movw	r30, r18
    3d78:	ca 01       	movw	r24, r20
    3d7a:	01 50       	subi	r16, 0x01	; 1
    3d7c:	11 09       	sbc	r17, r1
    3d7e:	6a 30       	cpi	r22, 0x0A	; 10
    3d80:	10 f4       	brcc	.+4      	; 0x3d86 <_ZN5Print11printNumberEmh+0x58>
    3d82:	60 5d       	subi	r22, 0xD0	; 208
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <_ZN5Print11printNumberEmh+0x5a>
    3d86:	69 5c       	subi	r22, 0xC9	; 201
    3d88:	d8 01       	movw	r26, r16
    3d8a:	6c 93       	st	X, r22
    3d8c:	23 2b       	or	r18, r19
    3d8e:	24 2b       	or	r18, r20
    3d90:	25 2b       	or	r18, r21
    3d92:	69 f7       	brne	.-38     	; 0x3d6e <_ZN5Print11printNumberEmh+0x40>
    3d94:	b8 01       	movw	r22, r16
    3d96:	c7 01       	movw	r24, r14
    3d98:	ad df       	rcall	.-166    	; 0x3cf4 <_ZN5Print5writeEPKc>
    3d9a:	a1 96       	adiw	r28, 0x21	; 33
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	ff 90       	pop	r15
    3db0:	ef 90       	pop	r14
    3db2:	bf 90       	pop	r11
    3db4:	af 90       	pop	r10
    3db6:	9f 90       	pop	r9
    3db8:	8f 90       	pop	r8
    3dba:	08 95       	ret

00003dbc <_ZN5Print5printEmi>:
    3dbc:	21 15       	cp	r18, r1
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	41 f4       	brne	.+16     	; 0x3dd2 <_ZN5Print5printEmi+0x16>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	ed 91       	ld	r30, X+
    3dc6:	fc 91       	ld	r31, X
    3dc8:	01 90       	ld	r0, Z+
    3dca:	f0 81       	ld	r31, Z
    3dcc:	e0 2d       	mov	r30, r0
    3dce:	64 2f       	mov	r22, r20
    3dd0:	19 94       	eijmp
    3dd2:	ad cf       	rjmp	.-166    	; 0x3d2e <_ZN5Print11printNumberEmh>

00003dd4 <_ZN5Print5printEhi>:
    3dd4:	9a 01       	movw	r18, r20
    3dd6:	46 2f       	mov	r20, r22
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	60 e0       	ldi	r22, 0x00	; 0
    3ddc:	70 e0       	ldi	r23, 0x00	; 0
    3dde:	ee cf       	rjmp	.-36     	; 0x3dbc <_ZN5Print5printEmi>

00003de0 <_ZN5Print5printEji>:
    3de0:	9a 01       	movw	r18, r20
    3de2:	ab 01       	movw	r20, r22
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	e9 cf       	rjmp	.-46     	; 0x3dbc <_ZN5Print5printEmi>

00003dea <_ZN5Print5printEli>:
    3dea:	cf 92       	push	r12
    3dec:	df 92       	push	r13
    3dee:	ef 92       	push	r14
    3df0:	ff 92       	push	r15
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	21 15       	cp	r18, r1
    3dfc:	31 05       	cpc	r19, r1
    3dfe:	81 f4       	brne	.+32     	; 0x3e20 <_ZN5Print5printEli+0x36>
    3e00:	dc 01       	movw	r26, r24
    3e02:	ed 91       	ld	r30, X+
    3e04:	fc 91       	ld	r31, X
    3e06:	01 90       	ld	r0, Z+
    3e08:	f0 81       	ld	r31, Z
    3e0a:	e0 2d       	mov	r30, r0
    3e0c:	64 2f       	mov	r22, r20
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	ff 90       	pop	r15
    3e18:	ef 90       	pop	r14
    3e1a:	df 90       	pop	r13
    3e1c:	cf 90       	pop	r12
    3e1e:	19 94       	eijmp
    3e20:	2a 30       	cpi	r18, 0x0A	; 10
    3e22:	31 05       	cpc	r19, r1
    3e24:	f1 f4       	brne	.+60     	; 0x3e62 <_ZN5Print5printEli+0x78>
    3e26:	77 ff       	sbrs	r23, 7
    3e28:	1b c0       	rjmp	.+54     	; 0x3e60 <_ZN5Print5printEli+0x76>
    3e2a:	6a 01       	movw	r12, r20
    3e2c:	7b 01       	movw	r14, r22
    3e2e:	ec 01       	movw	r28, r24
    3e30:	6d e2       	ldi	r22, 0x2D	; 45
    3e32:	76 df       	rcall	.-276    	; 0x3d20 <_ZN5Print5printEc>
    3e34:	8c 01       	movw	r16, r24
    3e36:	44 27       	eor	r20, r20
    3e38:	55 27       	eor	r21, r21
    3e3a:	ba 01       	movw	r22, r20
    3e3c:	4c 19       	sub	r20, r12
    3e3e:	5d 09       	sbc	r21, r13
    3e40:	6e 09       	sbc	r22, r14
    3e42:	7f 09       	sbc	r23, r15
    3e44:	2a e0       	ldi	r18, 0x0A	; 10
    3e46:	ce 01       	movw	r24, r28
    3e48:	72 df       	rcall	.-284    	; 0x3d2e <_ZN5Print11printNumberEmh>
    3e4a:	80 0f       	add	r24, r16
    3e4c:	91 1f       	adc	r25, r17
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	ff 90       	pop	r15
    3e58:	ef 90       	pop	r14
    3e5a:	df 90       	pop	r13
    3e5c:	cf 90       	pop	r12
    3e5e:	08 95       	ret
    3e60:	2a e0       	ldi	r18, 0x0A	; 10
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	ff 90       	pop	r15
    3e6c:	ef 90       	pop	r14
    3e6e:	df 90       	pop	r13
    3e70:	cf 90       	pop	r12
    3e72:	5d cf       	rjmp	.-326    	; 0x3d2e <_ZN5Print11printNumberEmh>

00003e74 <_ZN5Print5printEii>:
    3e74:	9a 01       	movw	r18, r20
    3e76:	ab 01       	movw	r20, r22
    3e78:	77 0f       	add	r23, r23
    3e7a:	66 0b       	sbc	r22, r22
    3e7c:	77 0b       	sbc	r23, r23
    3e7e:	b5 cf       	rjmp	.-150    	; 0x3dea <_ZN5Print5printEli>

00003e80 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3e80:	7f 92       	push	r7
    3e82:	8f 92       	push	r8
    3e84:	9f 92       	push	r9
    3e86:	af 92       	push	r10
    3e88:	bf 92       	push	r11
    3e8a:	cf 92       	push	r12
    3e8c:	df 92       	push	r13
    3e8e:	ef 92       	push	r14
    3e90:	ff 92       	push	r15
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	8c 01       	movw	r16, r24
    3e9c:	6a 01       	movw	r12, r20
    3e9e:	7b 01       	movw	r14, r22
    3ea0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3ea2:	9a 01       	movw	r18, r20
    3ea4:	ab 01       	movw	r20, r22
    3ea6:	c7 01       	movw	r24, r14
    3ea8:	b6 01       	movw	r22, r12
    3eaa:	e7 d0       	rcall	.+462    	; 0x407a <__unordsf2>
    3eac:	88 23       	and	r24, r24
    3eae:	19 f0       	breq	.+6      	; 0x3eb6 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3eb0:	60 e4       	ldi	r22, 0x40	; 64
    3eb2:	72 e0       	ldi	r23, 0x02	; 2
    3eb4:	24 c0       	rjmp	.+72     	; 0x3efe <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3eb6:	46 01       	movw	r8, r12
    3eb8:	57 01       	movw	r10, r14
    3eba:	e8 94       	clt
    3ebc:	b7 f8       	bld	r11, 7
    3ebe:	2f ef       	ldi	r18, 0xFF	; 255
    3ec0:	3f ef       	ldi	r19, 0xFF	; 255
    3ec2:	4f e7       	ldi	r20, 0x7F	; 127
    3ec4:	5f e7       	ldi	r21, 0x7F	; 127
    3ec6:	c5 01       	movw	r24, r10
    3ec8:	b4 01       	movw	r22, r8
    3eca:	d7 d0       	rcall	.+430    	; 0x407a <__unordsf2>
    3ecc:	81 11       	cpse	r24, r1
    3ece:	0c c0       	rjmp	.+24     	; 0x3ee8 <_ZN5Print10printFloatEdh+0x68>
    3ed0:	2f ef       	ldi	r18, 0xFF	; 255
    3ed2:	3f ef       	ldi	r19, 0xFF	; 255
    3ed4:	4f e7       	ldi	r20, 0x7F	; 127
    3ed6:	5f e7       	ldi	r21, 0x7F	; 127
    3ed8:	c5 01       	movw	r24, r10
    3eda:	b4 01       	movw	r22, r8
    3edc:	a2 d0       	rcall	.+324    	; 0x4022 <__cmpsf2>
    3ede:	18 16       	cp	r1, r24
    3ee0:	1c f4       	brge	.+6      	; 0x3ee8 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3ee2:	64 e4       	ldi	r22, 0x44	; 68
    3ee4:	72 e0       	ldi	r23, 0x02	; 2
    3ee6:	0b c0       	rjmp	.+22     	; 0x3efe <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3ee8:	2f ef       	ldi	r18, 0xFF	; 255
    3eea:	3f ef       	ldi	r19, 0xFF	; 255
    3eec:	4f e7       	ldi	r20, 0x7F	; 127
    3eee:	5f e4       	ldi	r21, 0x4F	; 79
    3ef0:	c7 01       	movw	r24, r14
    3ef2:	b6 01       	movw	r22, r12
    3ef4:	be d0       	rcall	.+380    	; 0x4072 <__gesf2>
    3ef6:	18 16       	cp	r1, r24
    3ef8:	8c f4       	brge	.+34     	; 0x3f1c <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3efa:	68 e4       	ldi	r22, 0x48	; 72
    3efc:	72 e0       	ldi	r23, 0x02	; 2
    3efe:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	ff 90       	pop	r15
    3f0a:	ef 90       	pop	r14
    3f0c:	df 90       	pop	r13
    3f0e:	cf 90       	pop	r12
    3f10:	bf 90       	pop	r11
    3f12:	af 90       	pop	r10
    3f14:	9f 90       	pop	r9
    3f16:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3f18:	7f 90       	pop	r7
    3f1a:	ec ce       	rjmp	.-552    	; 0x3cf4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3f1c:	2f ef       	ldi	r18, 0xFF	; 255
    3f1e:	3f ef       	ldi	r19, 0xFF	; 255
    3f20:	4f e7       	ldi	r20, 0x7F	; 127
    3f22:	5f ec       	ldi	r21, 0xCF	; 207
    3f24:	c7 01       	movw	r24, r14
    3f26:	b6 01       	movw	r22, r12
    3f28:	7c d0       	rcall	.+248    	; 0x4022 <__cmpsf2>
    3f2a:	87 fd       	sbrc	r24, 7
    3f2c:	e6 cf       	rjmp	.-52     	; 0x3efa <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	a9 01       	movw	r20, r18
    3f34:	c7 01       	movw	r24, r14
    3f36:	b6 01       	movw	r22, r12
    3f38:	74 d0       	rcall	.+232    	; 0x4022 <__cmpsf2>
    3f3a:	87 ff       	sbrs	r24, 7
    3f3c:	09 c0       	rjmp	.+18     	; 0x3f50 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    3f3e:	6d e2       	ldi	r22, 0x2D	; 45
    3f40:	c8 01       	movw	r24, r16
    3f42:	ee de       	rcall	.-548    	; 0x3d20 <_ZN5Print5printEc>
    3f44:	ec 01       	movw	r28, r24
    3f46:	f7 fa       	bst	r15, 7
     number = -number;
    3f48:	f0 94       	com	r15
    3f4a:	f7 f8       	bld	r15, 7
    3f4c:	f0 94       	com	r15
    3f4e:	02 c0       	rjmp	.+4      	; 0x3f54 <_ZN5Print10printFloatEdh+0xd4>
    3f50:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3f52:	d0 e0       	ldi	r29, 0x00	; 0
    3f54:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3f56:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	9f e3       	ldi	r25, 0x3F	; 63
    3f5e:	7b 14       	cp	r7, r11
  for (uint8_t i=0; i<digits; ++i)
    3f60:	41 f0       	breq	.+16     	; 0x3f72 <_ZN5Print10printFloatEdh+0xf2>
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    rounding /= 10.0;
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	40 e2       	ldi	r20, 0x20	; 32
    3f68:	51 e4       	ldi	r21, 0x41	; 65
    3f6a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <__divsf3>
    3f6e:	b3 94       	inc	r11
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3f70:	f6 cf       	rjmp	.-20     	; 0x3f5e <_ZN5Print10printFloatEdh+0xde>
    3f72:	a7 01       	movw	r20, r14
    rounding /= 10.0;
  
  number += rounding;
    3f74:	96 01       	movw	r18, r12
    3f76:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    3f7a:	6b 01       	movw	r12, r22
    3f7c:	7c 01       	movw	r14, r24
    3f7e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__fixunssfsi>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3f82:	4b 01       	movw	r8, r22
    3f84:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3f86:	2a e0       	ldi	r18, 0x0A	; 10
    3f88:	ab 01       	movw	r20, r22
    3f8a:	bc 01       	movw	r22, r24
    3f8c:	c8 01       	movw	r24, r16
    3f8e:	cf de       	rcall	.-610    	; 0x3d2e <_ZN5Print11printNumberEmh>
    3f90:	c8 0f       	add	r28, r24
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3f92:	d9 1f       	adc	r29, r25
    3f94:	77 20       	and	r7, r7

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3f96:	a9 f1       	breq	.+106    	; 0x4002 <_ZN5Print10printFloatEdh+0x182>
    3f98:	c5 01       	movw	r24, r10
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3f9a:	b4 01       	movw	r22, r8
    3f9c:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__floatunsisf>
    3fa0:	9b 01       	movw	r18, r22
    3fa2:	ac 01       	movw	r20, r24
    3fa4:	c7 01       	movw	r24, r14
    3fa6:	b6 01       	movw	r22, r12
    3fa8:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    3fac:	6b 01       	movw	r12, r22
    3fae:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3fb0:	6e e2       	ldi	r22, 0x2E	; 46
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	b5 de       	rcall	.-662    	; 0x3d20 <_ZN5Print5printEc>
    3fb6:	c8 0f       	add	r28, r24
    3fb8:	d9 1f       	adc	r29, r25
    3fba:	20 e0       	ldi	r18, 0x00	; 0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	40 e2       	ldi	r20, 0x20	; 32
    3fc0:	51 e4       	ldi	r21, 0x41	; 65
    3fc2:	c7 01       	movw	r24, r14
    3fc4:	b6 01       	movw	r22, r12
    3fc6:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__mulsf3>
    3fca:	4b 01       	movw	r8, r22
    3fcc:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    3fce:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__fixunssfsi>
    3fd2:	6b 01       	movw	r12, r22
    3fd4:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3fd6:	4a e0       	ldi	r20, 0x0A	; 10
    3fd8:	50 e0       	ldi	r21, 0x00	; 0
    3fda:	c8 01       	movw	r24, r16
    3fdc:	01 df       	rcall	.-510    	; 0x3de0 <_ZN5Print5printEji>
    3fde:	c8 0f       	add	r28, r24
    3fe0:	d9 1f       	adc	r29, r25
    3fe2:	b6 01       	movw	r22, r12
    remainder -= toPrint; 
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__floatunsisf>
    3fec:	9b 01       	movw	r18, r22
    3fee:	ac 01       	movw	r20, r24
    3ff0:	c5 01       	movw	r24, r10
    3ff2:	b4 01       	movw	r22, r8
    3ff4:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    3ff8:	6b 01       	movw	r12, r22
    3ffa:	7c 01       	movw	r14, r24
    3ffc:	7a 94       	dec	r7
    3ffe:	71 10       	cpse	r7, r1
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4000:	dc cf       	rjmp	.-72     	; 0x3fba <_ZN5Print10printFloatEdh+0x13a>
    4002:	ce 01       	movw	r24, r28
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4004:	df 91       	pop	r29
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4006:	cf 91       	pop	r28
    4008:	1f 91       	pop	r17
    400a:	0f 91       	pop	r16
    400c:	ff 90       	pop	r15
    400e:	ef 90       	pop	r14
    4010:	df 90       	pop	r13
    4012:	cf 90       	pop	r12
    4014:	bf 90       	pop	r11
    4016:	af 90       	pop	r10
    4018:	9f 90       	pop	r9
    401a:	8f 90       	pop	r8
    401c:	7f 90       	pop	r7
    401e:	08 95       	ret

00004020 <_ZN5Print5printEdi>:
    4020:	2f cf       	rjmp	.-418    	; 0x3e80 <_ZN5Print10printFloatEdh>

00004022 <__cmpsf2>:
    4022:	03 d0       	rcall	.+6      	; 0x402a <__fp_cmp>
    4024:	08 f4       	brcc	.+2      	; 0x4028 <__cmpsf2+0x6>
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	08 95       	ret

0000402a <__fp_cmp>:
    402a:	99 0f       	add	r25, r25
    402c:	00 08       	sbc	r0, r0
    402e:	55 0f       	add	r21, r21
    4030:	aa 0b       	sbc	r26, r26
    4032:	e0 e8       	ldi	r30, 0x80	; 128
    4034:	fe ef       	ldi	r31, 0xFE	; 254
    4036:	16 16       	cp	r1, r22
    4038:	17 06       	cpc	r1, r23
    403a:	e8 07       	cpc	r30, r24
    403c:	f9 07       	cpc	r31, r25
    403e:	c0 f0       	brcs	.+48     	; 0x4070 <__fp_cmp+0x46>
    4040:	12 16       	cp	r1, r18
    4042:	13 06       	cpc	r1, r19
    4044:	e4 07       	cpc	r30, r20
    4046:	f5 07       	cpc	r31, r21
    4048:	98 f0       	brcs	.+38     	; 0x4070 <__fp_cmp+0x46>
    404a:	62 1b       	sub	r22, r18
    404c:	73 0b       	sbc	r23, r19
    404e:	84 0b       	sbc	r24, r20
    4050:	95 0b       	sbc	r25, r21
    4052:	39 f4       	brne	.+14     	; 0x4062 <__fp_cmp+0x38>
    4054:	0a 26       	eor	r0, r26
    4056:	61 f0       	breq	.+24     	; 0x4070 <__fp_cmp+0x46>
    4058:	23 2b       	or	r18, r19
    405a:	24 2b       	or	r18, r20
    405c:	25 2b       	or	r18, r21
    405e:	21 f4       	brne	.+8      	; 0x4068 <__fp_cmp+0x3e>
    4060:	08 95       	ret
    4062:	0a 26       	eor	r0, r26
    4064:	09 f4       	brne	.+2      	; 0x4068 <__fp_cmp+0x3e>
    4066:	a1 40       	sbci	r26, 0x01	; 1
    4068:	a6 95       	lsr	r26
    406a:	8f ef       	ldi	r24, 0xFF	; 255
    406c:	81 1d       	adc	r24, r1
    406e:	81 1d       	adc	r24, r1
    4070:	08 95       	ret

00004072 <__gesf2>:
    4072:	db df       	rcall	.-74     	; 0x402a <__fp_cmp>
    4074:	08 f4       	brcc	.+2      	; 0x4078 <__gesf2+0x6>
    4076:	8f ef       	ldi	r24, 0xFF	; 255
    4078:	08 95       	ret

0000407a <__unordsf2>:
    407a:	d7 df       	rcall	.-82     	; 0x402a <__fp_cmp>
    407c:	88 0b       	sbc	r24, r24
    407e:	99 0b       	sbc	r25, r25
    4080:	08 95       	ret

00004082 <__mulsi3>:
    4082:	db 01       	movw	r26, r22
    4084:	8f 93       	push	r24
    4086:	9f 93       	push	r25
    4088:	86 d0       	rcall	.+268    	; 0x4196 <__muluhisi3>
    408a:	bf 91       	pop	r27
    408c:	af 91       	pop	r26
    408e:	a2 9f       	mul	r26, r18
    4090:	80 0d       	add	r24, r0
    4092:	91 1d       	adc	r25, r1
    4094:	a3 9f       	mul	r26, r19
    4096:	90 0d       	add	r25, r0
    4098:	b2 9f       	mul	r27, r18
    409a:	90 0d       	add	r25, r0
    409c:	11 24       	eor	r1, r1
    409e:	08 95       	ret

000040a0 <__udivmodqi4>:
    40a0:	99 1b       	sub	r25, r25
    40a2:	79 e0       	ldi	r23, 0x09	; 9
    40a4:	04 c0       	rjmp	.+8      	; 0x40ae <__udivmodqi4_ep>

000040a6 <__udivmodqi4_loop>:
    40a6:	99 1f       	adc	r25, r25
    40a8:	96 17       	cp	r25, r22
    40aa:	08 f0       	brcs	.+2      	; 0x40ae <__udivmodqi4_ep>
    40ac:	96 1b       	sub	r25, r22

000040ae <__udivmodqi4_ep>:
    40ae:	88 1f       	adc	r24, r24
    40b0:	7a 95       	dec	r23
    40b2:	c9 f7       	brne	.-14     	; 0x40a6 <__udivmodqi4_loop>
    40b4:	80 95       	com	r24
    40b6:	08 95       	ret

000040b8 <__udivmodhi4>:
    40b8:	aa 1b       	sub	r26, r26
    40ba:	bb 1b       	sub	r27, r27
    40bc:	51 e1       	ldi	r21, 0x11	; 17
    40be:	07 c0       	rjmp	.+14     	; 0x40ce <__udivmodhi4_ep>

000040c0 <__udivmodhi4_loop>:
    40c0:	aa 1f       	adc	r26, r26
    40c2:	bb 1f       	adc	r27, r27
    40c4:	a6 17       	cp	r26, r22
    40c6:	b7 07       	cpc	r27, r23
    40c8:	10 f0       	brcs	.+4      	; 0x40ce <__udivmodhi4_ep>
    40ca:	a6 1b       	sub	r26, r22
    40cc:	b7 0b       	sbc	r27, r23

000040ce <__udivmodhi4_ep>:
    40ce:	88 1f       	adc	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	5a 95       	dec	r21
    40d4:	a9 f7       	brne	.-22     	; 0x40c0 <__udivmodhi4_loop>
    40d6:	80 95       	com	r24
    40d8:	90 95       	com	r25
    40da:	bc 01       	movw	r22, r24
    40dc:	cd 01       	movw	r24, r26
    40de:	08 95       	ret

000040e0 <__udivmodsi4>:
    40e0:	a1 e2       	ldi	r26, 0x21	; 33
    40e2:	1a 2e       	mov	r1, r26
    40e4:	aa 1b       	sub	r26, r26
    40e6:	bb 1b       	sub	r27, r27
    40e8:	fd 01       	movw	r30, r26
    40ea:	0d c0       	rjmp	.+26     	; 0x4106 <__udivmodsi4_ep>

000040ec <__udivmodsi4_loop>:
    40ec:	aa 1f       	adc	r26, r26
    40ee:	bb 1f       	adc	r27, r27
    40f0:	ee 1f       	adc	r30, r30
    40f2:	ff 1f       	adc	r31, r31
    40f4:	a2 17       	cp	r26, r18
    40f6:	b3 07       	cpc	r27, r19
    40f8:	e4 07       	cpc	r30, r20
    40fa:	f5 07       	cpc	r31, r21
    40fc:	20 f0       	brcs	.+8      	; 0x4106 <__udivmodsi4_ep>
    40fe:	a2 1b       	sub	r26, r18
    4100:	b3 0b       	sbc	r27, r19
    4102:	e4 0b       	sbc	r30, r20
    4104:	f5 0b       	sbc	r31, r21

00004106 <__udivmodsi4_ep>:
    4106:	66 1f       	adc	r22, r22
    4108:	77 1f       	adc	r23, r23
    410a:	88 1f       	adc	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	1a 94       	dec	r1
    4110:	69 f7       	brne	.-38     	; 0x40ec <__udivmodsi4_loop>
    4112:	60 95       	com	r22
    4114:	70 95       	com	r23
    4116:	80 95       	com	r24
    4118:	90 95       	com	r25
    411a:	9b 01       	movw	r18, r22
    411c:	ac 01       	movw	r20, r24
    411e:	bd 01       	movw	r22, r26
    4120:	cf 01       	movw	r24, r30
    4122:	08 95       	ret

00004124 <__divmodsi4>:
    4124:	05 2e       	mov	r0, r21
    4126:	97 fb       	bst	r25, 7
    4128:	16 f4       	brtc	.+4      	; 0x412e <__divmodsi4+0xa>
    412a:	00 94       	com	r0
    412c:	0f d0       	rcall	.+30     	; 0x414c <__negsi2>
    412e:	57 fd       	sbrc	r21, 7
    4130:	05 d0       	rcall	.+10     	; 0x413c <__divmodsi4_neg2>
    4132:	d6 df       	rcall	.-84     	; 0x40e0 <__udivmodsi4>
    4134:	07 fc       	sbrc	r0, 7
    4136:	02 d0       	rcall	.+4      	; 0x413c <__divmodsi4_neg2>
    4138:	46 f4       	brtc	.+16     	; 0x414a <__divmodsi4_exit>
    413a:	08 c0       	rjmp	.+16     	; 0x414c <__negsi2>

0000413c <__divmodsi4_neg2>:
    413c:	50 95       	com	r21
    413e:	40 95       	com	r20
    4140:	30 95       	com	r19
    4142:	21 95       	neg	r18
    4144:	3f 4f       	sbci	r19, 0xFF	; 255
    4146:	4f 4f       	sbci	r20, 0xFF	; 255
    4148:	5f 4f       	sbci	r21, 0xFF	; 255

0000414a <__divmodsi4_exit>:
    414a:	08 95       	ret

0000414c <__negsi2>:
    414c:	90 95       	com	r25
    414e:	80 95       	com	r24
    4150:	70 95       	com	r23
    4152:	61 95       	neg	r22
    4154:	7f 4f       	sbci	r23, 0xFF	; 255
    4156:	8f 4f       	sbci	r24, 0xFF	; 255
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	08 95       	ret

0000415c <__tablejump2__>:
    415c:	ee 0f       	add	r30, r30
    415e:	ff 1f       	adc	r31, r31
    4160:	88 1f       	adc	r24, r24
    4162:	8b bf       	out	0x3b, r24	; 59
    4164:	07 90       	elpm	r0, Z+
    4166:	f6 91       	elpm	r31, Z
    4168:	e0 2d       	mov	r30, r0
    416a:	19 94       	eijmp

0000416c <__umulhisi3>:
    416c:	a2 9f       	mul	r26, r18
    416e:	b0 01       	movw	r22, r0
    4170:	b3 9f       	mul	r27, r19
    4172:	c0 01       	movw	r24, r0
    4174:	a3 9f       	mul	r26, r19
    4176:	70 0d       	add	r23, r0
    4178:	81 1d       	adc	r24, r1
    417a:	11 24       	eor	r1, r1
    417c:	91 1d       	adc	r25, r1
    417e:	b2 9f       	mul	r27, r18
    4180:	70 0d       	add	r23, r0
    4182:	81 1d       	adc	r24, r1
    4184:	11 24       	eor	r1, r1
    4186:	91 1d       	adc	r25, r1
    4188:	08 95       	ret

0000418a <__usmulhisi3>:
    418a:	f0 df       	rcall	.-32     	; 0x416c <__umulhisi3>

0000418c <__usmulhisi3_tail>:
    418c:	b7 ff       	sbrs	r27, 7
    418e:	08 95       	ret
    4190:	82 1b       	sub	r24, r18
    4192:	93 0b       	sbc	r25, r19
    4194:	08 95       	ret

00004196 <__muluhisi3>:
    4196:	ea df       	rcall	.-44     	; 0x416c <__umulhisi3>
    4198:	a5 9f       	mul	r26, r21
    419a:	90 0d       	add	r25, r0
    419c:	b4 9f       	mul	r27, r20
    419e:	90 0d       	add	r25, r0
    41a0:	a4 9f       	mul	r26, r20
    41a2:	80 0d       	add	r24, r0
    41a4:	91 1d       	adc	r25, r1
    41a6:	11 24       	eor	r1, r1
    41a8:	08 95       	ret

000041aa <__muldi3>:
    41aa:	df 93       	push	r29
    41ac:	cf 93       	push	r28
    41ae:	1f 93       	push	r17
    41b0:	0f 93       	push	r16
    41b2:	9a 9d       	mul	r25, r10
    41b4:	f0 2d       	mov	r31, r0
    41b6:	21 9f       	mul	r18, r17
    41b8:	f0 0d       	add	r31, r0
    41ba:	8b 9d       	mul	r24, r11
    41bc:	f0 0d       	add	r31, r0
    41be:	8a 9d       	mul	r24, r10
    41c0:	e0 2d       	mov	r30, r0
    41c2:	f1 0d       	add	r31, r1
    41c4:	03 9f       	mul	r16, r19
    41c6:	f0 0d       	add	r31, r0
    41c8:	02 9f       	mul	r16, r18
    41ca:	e0 0d       	add	r30, r0
    41cc:	f1 1d       	adc	r31, r1
    41ce:	4e 9d       	mul	r20, r14
    41d0:	e0 0d       	add	r30, r0
    41d2:	f1 1d       	adc	r31, r1
    41d4:	5e 9d       	mul	r21, r14
    41d6:	f0 0d       	add	r31, r0
    41d8:	4f 9d       	mul	r20, r15
    41da:	f0 0d       	add	r31, r0
    41dc:	7f 93       	push	r23
    41de:	6f 93       	push	r22
    41e0:	bf 92       	push	r11
    41e2:	af 92       	push	r10
    41e4:	5f 93       	push	r21
    41e6:	4f 93       	push	r20
    41e8:	d5 01       	movw	r26, r10
    41ea:	c0 df       	rcall	.-128    	; 0x416c <__umulhisi3>
    41ec:	8b 01       	movw	r16, r22
    41ee:	ac 01       	movw	r20, r24
    41f0:	d7 01       	movw	r26, r14
    41f2:	bc df       	rcall	.-136    	; 0x416c <__umulhisi3>
    41f4:	eb 01       	movw	r28, r22
    41f6:	e8 0f       	add	r30, r24
    41f8:	f9 1f       	adc	r31, r25
    41fa:	d6 01       	movw	r26, r12
    41fc:	1f d0       	rcall	.+62     	; 0x423c <__muldi3_6>
    41fe:	2f 91       	pop	r18
    4200:	3f 91       	pop	r19
    4202:	d6 01       	movw	r26, r12
    4204:	b3 df       	rcall	.-154    	; 0x416c <__umulhisi3>
    4206:	c6 0f       	add	r28, r22
    4208:	d7 1f       	adc	r29, r23
    420a:	e8 1f       	adc	r30, r24
    420c:	f9 1f       	adc	r31, r25
    420e:	af 91       	pop	r26
    4210:	bf 91       	pop	r27
    4212:	14 d0       	rcall	.+40     	; 0x423c <__muldi3_6>
    4214:	2f 91       	pop	r18
    4216:	3f 91       	pop	r19
    4218:	a9 df       	rcall	.-174    	; 0x416c <__umulhisi3>
    421a:	c6 0f       	add	r28, r22
    421c:	d7 1f       	adc	r29, r23
    421e:	e8 1f       	adc	r30, r24
    4220:	f9 1f       	adc	r31, r25
    4222:	d6 01       	movw	r26, r12
    4224:	a3 df       	rcall	.-186    	; 0x416c <__umulhisi3>
    4226:	e6 0f       	add	r30, r22
    4228:	f7 1f       	adc	r31, r23
    422a:	98 01       	movw	r18, r16
    422c:	be 01       	movw	r22, r28
    422e:	cf 01       	movw	r24, r30
    4230:	11 24       	eor	r1, r1
    4232:	0f 91       	pop	r16
    4234:	1f 91       	pop	r17
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	08 95       	ret

0000423c <__muldi3_6>:
    423c:	97 df       	rcall	.-210    	; 0x416c <__umulhisi3>
    423e:	46 0f       	add	r20, r22
    4240:	57 1f       	adc	r21, r23
    4242:	c8 1f       	adc	r28, r24
    4244:	d9 1f       	adc	r29, r25
    4246:	08 f4       	brcc	.+2      	; 0x424a <__muldi3_6+0xe>
    4248:	31 96       	adiw	r30, 0x01	; 1
    424a:	08 95       	ret

0000424c <__umulsidi3>:
    424c:	e8 94       	clt

0000424e <__umulsidi3_helper>:
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	fc 01       	movw	r30, r24
    4254:	db 01       	movw	r26, r22
    4256:	8a df       	rcall	.-236    	; 0x416c <__umulhisi3>
    4258:	7f 93       	push	r23
    425a:	6f 93       	push	r22
    425c:	e9 01       	movw	r28, r18
    425e:	9a 01       	movw	r18, r20
    4260:	ac 01       	movw	r20, r24
    4262:	bf 93       	push	r27
    4264:	af 93       	push	r26
    4266:	3f 93       	push	r19
    4268:	2f 93       	push	r18
    426a:	df 01       	movw	r26, r30
    426c:	7f df       	rcall	.-258    	; 0x416c <__umulhisi3>
    426e:	26 f4       	brtc	.+8      	; 0x4278 <__umulsidi3_helper+0x2a>
    4270:	6c 1b       	sub	r22, r28
    4272:	7d 0b       	sbc	r23, r29
    4274:	82 0b       	sbc	r24, r18
    4276:	93 0b       	sbc	r25, r19
    4278:	9e 01       	movw	r18, r28
    427a:	eb 01       	movw	r28, r22
    427c:	fc 01       	movw	r30, r24
    427e:	de df       	rcall	.-68     	; 0x423c <__muldi3_6>
    4280:	af 91       	pop	r26
    4282:	bf 91       	pop	r27
    4284:	2f 91       	pop	r18
    4286:	3f 91       	pop	r19
    4288:	d9 df       	rcall	.-78     	; 0x423c <__muldi3_6>
    428a:	be 01       	movw	r22, r28
    428c:	cf 01       	movw	r24, r30
    428e:	f9 01       	movw	r30, r18
    4290:	2f 91       	pop	r18
    4292:	3f 91       	pop	r19
    4294:	cf 91       	pop	r28
    4296:	df 91       	pop	r29
    4298:	08 95       	ret

0000429a <__moddi3>:
    429a:	68 94       	set
    429c:	01 c0       	rjmp	.+2      	; 0x42a0 <__divdi3_moddi3>

0000429e <__divdi3>:
    429e:	e8 94       	clt

000042a0 <__divdi3_moddi3>:
    42a0:	f9 2f       	mov	r31, r25
    42a2:	f1 2b       	or	r31, r17
    42a4:	0a f0       	brmi	.+2      	; 0x42a8 <__divdi3_moddi3+0x8>
    42a6:	27 c0       	rjmp	.+78     	; 0x42f6 <__udivdi3_umoddi3>
    42a8:	a0 e0       	ldi	r26, 0x00	; 0
    42aa:	b0 e0       	ldi	r27, 0x00	; 0
    42ac:	e9 e5       	ldi	r30, 0x59	; 89
    42ae:	f1 e2       	ldi	r31, 0x21	; 33
    42b0:	93 c0       	rjmp	.+294    	; 0x43d8 <__prologue_saves__+0xc>
    42b2:	09 2e       	mov	r0, r25
    42b4:	05 94       	asr	r0
    42b6:	1a f4       	brpl	.+6      	; 0x42be <__divdi3_moddi3+0x1e>
    42b8:	79 d0       	rcall	.+242    	; 0x43ac <__negdi2>
    42ba:	11 23       	and	r17, r17
    42bc:	92 f4       	brpl	.+36     	; 0x42e2 <__divdi3_moddi3+0x42>
    42be:	f0 e8       	ldi	r31, 0x80	; 128
    42c0:	0f 26       	eor	r0, r31
    42c2:	ff ef       	ldi	r31, 0xFF	; 255
    42c4:	e0 94       	com	r14
    42c6:	f0 94       	com	r15
    42c8:	00 95       	com	r16
    42ca:	10 95       	com	r17
    42cc:	b0 94       	com	r11
    42ce:	c0 94       	com	r12
    42d0:	d0 94       	com	r13
    42d2:	a1 94       	neg	r10
    42d4:	bf 0a       	sbc	r11, r31
    42d6:	cf 0a       	sbc	r12, r31
    42d8:	df 0a       	sbc	r13, r31
    42da:	ef 0a       	sbc	r14, r31
    42dc:	ff 0a       	sbc	r15, r31
    42de:	0f 0b       	sbc	r16, r31
    42e0:	1f 0b       	sbc	r17, r31
    42e2:	13 d0       	rcall	.+38     	; 0x430a <__udivmod64>
    42e4:	07 fc       	sbrc	r0, 7
    42e6:	62 d0       	rcall	.+196    	; 0x43ac <__negdi2>
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	ec e0       	ldi	r30, 0x0C	; 12
    42ee:	90 c0       	rjmp	.+288    	; 0x4410 <__epilogue_restores__+0xc>

000042f0 <__umoddi3>:
    42f0:	68 94       	set
    42f2:	01 c0       	rjmp	.+2      	; 0x42f6 <__udivdi3_umoddi3>

000042f4 <__udivdi3>:
    42f4:	e8 94       	clt

000042f6 <__udivdi3_umoddi3>:
    42f6:	8f 92       	push	r8
    42f8:	9f 92       	push	r9
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	05 d0       	rcall	.+10     	; 0x430a <__udivmod64>
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	9f 90       	pop	r9
    4306:	8f 90       	pop	r8
    4308:	08 95       	ret

0000430a <__udivmod64>:
    430a:	88 24       	eor	r8, r8
    430c:	99 24       	eor	r9, r9
    430e:	f4 01       	movw	r30, r8
    4310:	e4 01       	movw	r28, r8
    4312:	b0 e4       	ldi	r27, 0x40	; 64
    4314:	9f 93       	push	r25
    4316:	aa 27       	eor	r26, r26
    4318:	9a 15       	cp	r25, r10
    431a:	8b 04       	cpc	r8, r11
    431c:	9c 04       	cpc	r9, r12
    431e:	ed 05       	cpc	r30, r13
    4320:	fe 05       	cpc	r31, r14
    4322:	cf 05       	cpc	r28, r15
    4324:	d0 07       	cpc	r29, r16
    4326:	a1 07       	cpc	r26, r17
    4328:	98 f4       	brcc	.+38     	; 0x4350 <__udivmod64+0x46>
    432a:	ad 2f       	mov	r26, r29
    432c:	dc 2f       	mov	r29, r28
    432e:	cf 2f       	mov	r28, r31
    4330:	fe 2f       	mov	r31, r30
    4332:	e9 2d       	mov	r30, r9
    4334:	98 2c       	mov	r9, r8
    4336:	89 2e       	mov	r8, r25
    4338:	98 2f       	mov	r25, r24
    433a:	87 2f       	mov	r24, r23
    433c:	76 2f       	mov	r23, r22
    433e:	65 2f       	mov	r22, r21
    4340:	54 2f       	mov	r21, r20
    4342:	43 2f       	mov	r20, r19
    4344:	32 2f       	mov	r19, r18
    4346:	22 27       	eor	r18, r18
    4348:	b8 50       	subi	r27, 0x08	; 8
    434a:	31 f7       	brne	.-52     	; 0x4318 <__udivmod64+0xe>
    434c:	bf 91       	pop	r27
    434e:	27 c0       	rjmp	.+78     	; 0x439e <__udivmod64+0x94>
    4350:	1b 2e       	mov	r1, r27
    4352:	bf 91       	pop	r27
    4354:	bb 27       	eor	r27, r27
    4356:	22 0f       	add	r18, r18
    4358:	33 1f       	adc	r19, r19
    435a:	44 1f       	adc	r20, r20
    435c:	55 1f       	adc	r21, r21
    435e:	66 1f       	adc	r22, r22
    4360:	77 1f       	adc	r23, r23
    4362:	88 1f       	adc	r24, r24
    4364:	99 1f       	adc	r25, r25
    4366:	88 1c       	adc	r8, r8
    4368:	99 1c       	adc	r9, r9
    436a:	ee 1f       	adc	r30, r30
    436c:	ff 1f       	adc	r31, r31
    436e:	cc 1f       	adc	r28, r28
    4370:	dd 1f       	adc	r29, r29
    4372:	aa 1f       	adc	r26, r26
    4374:	bb 1f       	adc	r27, r27
    4376:	8a 14       	cp	r8, r10
    4378:	9b 04       	cpc	r9, r11
    437a:	ec 05       	cpc	r30, r12
    437c:	fd 05       	cpc	r31, r13
    437e:	ce 05       	cpc	r28, r14
    4380:	df 05       	cpc	r29, r15
    4382:	a0 07       	cpc	r26, r16
    4384:	b1 07       	cpc	r27, r17
    4386:	48 f0       	brcs	.+18     	; 0x439a <__udivmod64+0x90>
    4388:	8a 18       	sub	r8, r10
    438a:	9b 08       	sbc	r9, r11
    438c:	ec 09       	sbc	r30, r12
    438e:	fd 09       	sbc	r31, r13
    4390:	ce 09       	sbc	r28, r14
    4392:	df 09       	sbc	r29, r15
    4394:	a0 0b       	sbc	r26, r16
    4396:	b1 0b       	sbc	r27, r17
    4398:	21 60       	ori	r18, 0x01	; 1
    439a:	1a 94       	dec	r1
    439c:	e1 f6       	brne	.-72     	; 0x4356 <__udivmod64+0x4c>
    439e:	2e f4       	brtc	.+10     	; 0x43aa <__udivmod64+0xa0>
    43a0:	94 01       	movw	r18, r8
    43a2:	af 01       	movw	r20, r30
    43a4:	be 01       	movw	r22, r28
    43a6:	cd 01       	movw	r24, r26
    43a8:	00 0c       	add	r0, r0
    43aa:	08 95       	ret

000043ac <__negdi2>:
    43ac:	60 95       	com	r22
    43ae:	70 95       	com	r23
    43b0:	80 95       	com	r24
    43b2:	90 95       	com	r25
    43b4:	30 95       	com	r19
    43b6:	40 95       	com	r20
    43b8:	50 95       	com	r21
    43ba:	21 95       	neg	r18
    43bc:	3f 4f       	sbci	r19, 0xFF	; 255
    43be:	4f 4f       	sbci	r20, 0xFF	; 255
    43c0:	5f 4f       	sbci	r21, 0xFF	; 255
    43c2:	6f 4f       	sbci	r22, 0xFF	; 255
    43c4:	7f 4f       	sbci	r23, 0xFF	; 255
    43c6:	8f 4f       	sbci	r24, 0xFF	; 255
    43c8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ca:	08 95       	ret

000043cc <__prologue_saves__>:
    43cc:	2f 92       	push	r2
    43ce:	3f 92       	push	r3
    43d0:	4f 92       	push	r4
    43d2:	5f 92       	push	r5
    43d4:	6f 92       	push	r6
    43d6:	7f 92       	push	r7
    43d8:	8f 92       	push	r8
    43da:	9f 92       	push	r9
    43dc:	af 92       	push	r10
    43de:	bf 92       	push	r11
    43e0:	cf 92       	push	r12
    43e2:	df 92       	push	r13
    43e4:	ef 92       	push	r14
    43e6:	ff 92       	push	r15
    43e8:	0f 93       	push	r16
    43ea:	1f 93       	push	r17
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	ca 1b       	sub	r28, r26
    43f6:	db 0b       	sbc	r29, r27
    43f8:	0f b6       	in	r0, 0x3f	; 63
    43fa:	f8 94       	cli
    43fc:	de bf       	out	0x3e, r29	; 62
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	19 94       	eijmp

00004404 <__epilogue_restores__>:
    4404:	2a 88       	ldd	r2, Y+18	; 0x12
    4406:	39 88       	ldd	r3, Y+17	; 0x11
    4408:	48 88       	ldd	r4, Y+16	; 0x10
    440a:	5f 84       	ldd	r5, Y+15	; 0x0f
    440c:	6e 84       	ldd	r6, Y+14	; 0x0e
    440e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4410:	8c 84       	ldd	r8, Y+12	; 0x0c
    4412:	9b 84       	ldd	r9, Y+11	; 0x0b
    4414:	aa 84       	ldd	r10, Y+10	; 0x0a
    4416:	b9 84       	ldd	r11, Y+9	; 0x09
    4418:	c8 84       	ldd	r12, Y+8	; 0x08
    441a:	df 80       	ldd	r13, Y+7	; 0x07
    441c:	ee 80       	ldd	r14, Y+6	; 0x06
    441e:	fd 80       	ldd	r15, Y+5	; 0x05
    4420:	0c 81       	ldd	r16, Y+4	; 0x04
    4422:	1b 81       	ldd	r17, Y+3	; 0x03
    4424:	aa 81       	ldd	r26, Y+2	; 0x02
    4426:	b9 81       	ldd	r27, Y+1	; 0x01
    4428:	ce 0f       	add	r28, r30
    442a:	d1 1d       	adc	r29, r1
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	ed 01       	movw	r28, r26
    4438:	08 95       	ret

0000443a <__strlen_P>:
    443a:	fc 01       	movw	r30, r24
    443c:	05 90       	lpm	r0, Z+
    443e:	00 20       	and	r0, r0
    4440:	e9 f7       	brne	.-6      	; 0x443c <__strlen_P+0x2>
    4442:	80 95       	com	r24
    4444:	90 95       	com	r25
    4446:	8e 0f       	add	r24, r30
    4448:	9f 1f       	adc	r25, r31
    444a:	08 95       	ret

0000444c <eeprom_read_byte>:
    444c:	f9 99       	sbic	0x1f, 1	; 31
    444e:	fe cf       	rjmp	.-4      	; 0x444c <eeprom_read_byte>
    4450:	92 bd       	out	0x22, r25	; 34
    4452:	81 bd       	out	0x21, r24	; 33
    4454:	f8 9a       	sbi	0x1f, 0	; 31
    4456:	99 27       	eor	r25, r25
    4458:	80 b5       	in	r24, 0x20	; 32
    445a:	08 95       	ret

0000445c <eeprom_write_byte>:
    445c:	26 2f       	mov	r18, r22

0000445e <eeprom_write_r18>:
    445e:	f9 99       	sbic	0x1f, 1	; 31
    4460:	fe cf       	rjmp	.-4      	; 0x445e <eeprom_write_r18>
    4462:	1f ba       	out	0x1f, r1	; 31
    4464:	92 bd       	out	0x22, r25	; 34
    4466:	81 bd       	out	0x21, r24	; 33
    4468:	20 bd       	out	0x20, r18	; 32
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	f8 94       	cli
    446e:	fa 9a       	sbi	0x1f, 2	; 31
    4470:	f9 9a       	sbi	0x1f, 1	; 31
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	01 96       	adiw	r24, 0x01	; 1
    4476:	08 95       	ret

00004478 <__do_global_dtors>:
    4478:	11 e0       	ldi	r17, 0x01	; 1
    447a:	cd ea       	ldi	r28, 0xAD	; 173
    447c:	d1 e0       	ldi	r29, 0x01	; 1
    447e:	00 e0       	ldi	r16, 0x00	; 0
    4480:	05 c0       	rjmp	.+10     	; 0x448c <__do_global_dtors+0x14>
    4482:	80 2f       	mov	r24, r16
    4484:	fe 01       	movw	r30, r28
    4486:	6a de       	rcall	.-812    	; 0x415c <__tablejump2__>
    4488:	21 96       	adiw	r28, 0x01	; 1
    448a:	01 1d       	adc	r16, r1
    448c:	ce 3a       	cpi	r28, 0xAE	; 174
    448e:	d1 07       	cpc	r29, r17
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	08 07       	cpc	r16, r24
    4494:	b1 f7       	brne	.-20     	; 0x4482 <__do_global_dtors+0xa>
    4496:	f8 94       	cli

00004498 <__stop_program>:
    4498:	ff cf       	rjmp	.-2      	; 0x4498 <__stop_program>
